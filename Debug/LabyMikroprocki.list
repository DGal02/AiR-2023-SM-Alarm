
LabyMikroprocki.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051d4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800539c  0800539c  0001539c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053b8  080053b8  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  080053b8  080053b8  000153b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c0  080053c0  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c0  080053c0  000153c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  080053c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  20000050  08005418  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001a4  08005418  000201a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c14  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000246b  00000000  00000000  00030cd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e08  00000000  00000000  00033148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aef  00000000  00000000  00033f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026350  00000000  00000000  00034a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121f6  00000000  00000000  0005ad8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efcb4  00000000  00000000  0006cf85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000039d0  00000000  00000000  0015cc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0016060c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000050 	.word	0x20000050
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005384 	.word	0x08005384

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000054 	.word	0x20000054
 8000204:	08005384 	.word	0x08005384

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4bb7      	ldr	r3, [pc, #732]	; (8000808 <MX_GPIO_Init+0x2f4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4ab6      	ldr	r2, [pc, #728]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4bb4      	ldr	r3, [pc, #720]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4bb1      	ldr	r3, [pc, #708]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4ab0      	ldr	r2, [pc, #704]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4bae      	ldr	r3, [pc, #696]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0320 	and.w	r3, r3, #32
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055a:	4bab      	ldr	r3, [pc, #684]	; (8000808 <MX_GPIO_Init+0x2f4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4aaa      	ldr	r2, [pc, #680]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4ba8      	ldr	r3, [pc, #672]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4ba5      	ldr	r3, [pc, #660]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4aa4      	ldr	r2, [pc, #656]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4ba2      	ldr	r3, [pc, #648]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	4b9f      	ldr	r3, [pc, #636]	; (8000808 <MX_GPIO_Init+0x2f4>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a9e      	ldr	r2, [pc, #632]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b9c      	ldr	r3, [pc, #624]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a2:	4b99      	ldr	r3, [pc, #612]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a98      	ldr	r2, [pc, #608]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b96      	ldr	r3, [pc, #600]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ba:	4b93      	ldr	r3, [pc, #588]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a92      	ldr	r2, [pc, #584]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b90      	ldr	r3, [pc, #576]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	488d      	ldr	r0, [pc, #564]	; (800080c <MX_GPIO_Init+0x2f8>)
 80005d8:	f001 fb56 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	488a      	ldr	r0, [pc, #552]	; (800080c <MX_GPIO_Init+0x2f8>)
 80005e2:	f001 fb51 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Row2_Pin|Row3_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2109      	movs	r1, #9
 80005ea:	4889      	ldr	r0, [pc, #548]	; (8000810 <MX_GPIO_Init+0x2fc>)
 80005ec:	f001 fb4c 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2108      	movs	r1, #8
 80005f4:	4887      	ldr	r0, [pc, #540]	; (8000814 <MX_GPIO_Init+0x300>)
 80005f6:	f001 fb47 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000600:	4885      	ldr	r0, [pc, #532]	; (8000818 <MX_GPIO_Init+0x304>)
 8000602:	f001 fb41 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2140      	movs	r1, #64	; 0x40
 800060a:	4884      	ldr	r0, [pc, #528]	; (800081c <MX_GPIO_Init+0x308>)
 800060c:	f001 fb3c 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000616:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800061a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4619      	mov	r1, r3
 8000626:	487a      	ldr	r0, [pc, #488]	; (8000810 <MX_GPIO_Init+0x2fc>)
 8000628:	f001 f96a 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Row4_Pin|Buzzer_Pin;
 800062c:	2328      	movs	r3, #40	; 0x28
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	4872      	ldr	r0, [pc, #456]	; (800080c <MX_GPIO_Init+0x2f8>)
 8000644:	f001 f95c 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Guzik_Pin;
 8000648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Guzik_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	486b      	ldr	r0, [pc, #428]	; (800080c <MX_GPIO_Init+0x2f8>)
 8000660:	f001 f94e 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Row2_Pin|Row3_Pin;
 8000664:	2309      	movs	r3, #9
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4865      	ldr	r0, [pc, #404]	; (8000810 <MX_GPIO_Init+0x2fc>)
 800067c:	f001 f940 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000680:	2332      	movs	r3, #50	; 0x32
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000690:	230b      	movs	r3, #11
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	485d      	ldr	r0, [pc, #372]	; (8000810 <MX_GPIO_Init+0x2fc>)
 800069c:	f001 f930 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006a0:	2386      	movs	r3, #134	; 0x86
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b0:	230b      	movs	r3, #11
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4856      	ldr	r0, [pc, #344]	; (8000814 <MX_GPIO_Init+0x300>)
 80006bc:	f001 f920 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Row1_Pin;
 80006c0:	2308      	movs	r3, #8
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	484f      	ldr	r0, [pc, #316]	; (8000814 <MX_GPIO_Init+0x300>)
 80006d8:	f001 f912 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006dc:	f244 0381 	movw	r3, #16513	; 0x4081
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	4848      	ldr	r0, [pc, #288]	; (8000818 <MX_GPIO_Init+0x304>)
 80006f6:	f001 f903 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800070c:	230b      	movs	r3, #11
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4840      	ldr	r0, [pc, #256]	; (8000818 <MX_GPIO_Init+0x304>)
 8000718:	f001 f8f2 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	483a      	ldr	r0, [pc, #232]	; (800081c <MX_GPIO_Init+0x308>)
 8000734:	f001 f8e4 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4834      	ldr	r0, [pc, #208]	; (800081c <MX_GPIO_Init+0x308>)
 800074c:	f001 f8d8 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000750:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000762:	230a      	movs	r3, #10
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4829      	ldr	r0, [pc, #164]	; (8000814 <MX_GPIO_Init+0x300>)
 800076e:	f001 f8c7 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_GPIO_Init+0x300>)
 8000788:	f001 f8ba 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = moveSensor_Pin;
 800078c:	2310      	movs	r3, #16
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(moveSensor_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	481f      	ldr	r0, [pc, #124]	; (8000820 <MX_GPIO_Init+0x30c>)
 80007a2:	f001 f8ad 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Col3_Pin|Col2_Pin|Col1_Pin;
 80007a6:	23e0      	movs	r3, #224	; 0xe0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4819      	ldr	r0, [pc, #100]	; (8000820 <MX_GPIO_Init+0x30c>)
 80007ba:	f001 f8a1 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d0:	230b      	movs	r3, #11
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4810      	ldr	r0, [pc, #64]	; (800081c <MX_GPIO_Init+0x308>)
 80007dc:	f001 f890 	bl	8001900 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	200a      	movs	r0, #10
 80007e6:	f000 ffc2 	bl	800176e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f000 ffdb 	bl	80017a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2028      	movs	r0, #40	; 0x28
 80007f6:	f000 ffba 	bl	800176e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fa:	2028      	movs	r0, #40	; 0x28
 80007fc:	f000 ffd3 	bl	80017a6 <HAL_NVIC_EnableIRQ>

}
 8000800:	bf00      	nop
 8000802:	3730      	adds	r7, #48	; 0x30
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40021400 	.word	0x40021400
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400
 800081c:	40021800 	.word	0x40021800
 8000820:	40020c00 	.word	0x40020c00

08000824 <HAL_GPIO_EXTI_Callback>:
void phase0LED(void);
void phase1LED(void);
void phase2LED(void);
void activatedBuzzerLED(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == moveSensor_Pin) {
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2b10      	cmp	r3, #16
 8000832:	d112      	bne.n	800085a <HAL_GPIO_EXTI_Callback+0x36>
		HAL_UART_Transmit(&huart3, (uint8_t*) moveDetectedMessage,
				strlen(moveDetectedMessage), 1000);
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <HAL_GPIO_EXTI_Callback+0x40>)
 8000836:	f7ff fce7 	bl	8000208 <strlen>
 800083a:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart3, (uint8_t*) moveDetectedMessage,
 800083c:	b29a      	uxth	r2, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <HAL_GPIO_EXTI_Callback+0x40>)
 8000844:	4808      	ldr	r0, [pc, #32]	; (8000868 <HAL_GPIO_EXTI_Callback+0x44>)
 8000846:	f003 fd53 	bl	80042f0 <HAL_UART_Transmit>
		if (phase == 2) {
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <HAL_GPIO_EXTI_Callback+0x48>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d103      	bne.n	800085a <HAL_GPIO_EXTI_Callback+0x36>
			activateBuzzer();
 8000852:	f000 f84f 	bl	80008f4 <activateBuzzer>
			activatedBuzzerLED();
 8000856:	f000 fa2f 	bl	8000cb8 <activatedBuzzerLED>
		}
	}
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000000 	.word	0x20000000
 8000868:	20000118 	.word	0x20000118
 800086c:	2000007d 	.word	0x2000007d

08000870 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d129      	bne.n	80008d4 <HAL_TIM_PeriodElapsedCallback+0x64>
		if (firstTrigger == 0) {
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d106      	bne.n	8000896 <HAL_TIM_PeriodElapsedCallback+0x26>
			firstTrigger++;
 8000888:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	3301      	adds	r3, #1
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000892:	701a      	strb	r2, [r3, #0]
			return;
 8000894:	e01e      	b.n	80008d4 <HAL_TIM_PeriodElapsedCallback+0x64>
		}
		HAL_UART_Transmit(&huart3, (uint8_t*) activatedBuzzerMessage, strlen(activatedBuzzerMessage),
 8000896:	4813      	ldr	r0, [pc, #76]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000898:	f7ff fcb6 	bl	8000208 <strlen>
 800089c:	4603      	mov	r3, r0
 800089e:	b29a      	uxth	r2, r3
 80008a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a4:	490f      	ldr	r1, [pc, #60]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80008a6:	4810      	ldr	r0, [pc, #64]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80008a8:	f003 fd22 	bl	80042f0 <HAL_UART_Transmit>
				1000);
		if (HAL_GPIO_ReadPin(moveSensor_GPIO_Port, moveSensor_Pin) == 1) {
 80008ac:	2110      	movs	r1, #16
 80008ae:	480f      	ldr	r0, [pc, #60]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80008b0:	f001 f9d2 	bl	8001c58 <HAL_GPIO_ReadPin>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d101      	bne.n	80008be <HAL_TIM_PeriodElapsedCallback+0x4e>
			activateBuzzer();
 80008ba:	f000 f81b 	bl	80008f4 <activateBuzzer>
		}

		firstTrigger = 0;
 80008be:	4b08      	ldr	r3, [pc, #32]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	701a      	strb	r2, [r3, #0]
		phase = 2;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	701a      	strb	r2, [r3, #0]
		phase2LED();
 80008ca:	f000 f9df 	bl	8000c8c <phase2LED>
		HAL_TIM_Base_Stop_IT(&htim2);
 80008ce:	4803      	ldr	r0, [pc, #12]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80008d0:	f002 fba6 	bl	8003020 <HAL_TIM_Base_Stop_IT>
	}
}
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000080 	.word	0x20000080
 80008e0:	2000007e 	.word	0x2000007e
 80008e4:	20000028 	.word	0x20000028
 80008e8:	20000118 	.word	0x20000118
 80008ec:	40020c00 	.word	0x40020c00
 80008f0:	2000007d 	.word	0x2000007d

080008f4 <activateBuzzer>:

void activateBuzzer(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2120      	movs	r1, #32
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <activateBuzzer+0x14>)
 80008fe:	f001 f9c3 	bl	8001c88 <HAL_GPIO_WritePin>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40021400 	.word	0x40021400

0800090c <deactivateBuzzer>:

void deactivateBuzzer(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 1);
 8000910:	2201      	movs	r2, #1
 8000912:	2120      	movs	r1, #32
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <deactivateBuzzer+0x14>)
 8000916:	f001 f9b7 	bl	8001c88 <HAL_GPIO_WritePin>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021400 	.word	0x40021400

08000924 <readKeypad>:

char readKeypad(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET); //Pull the R1 low
 8000928:	2200      	movs	r2, #0
 800092a:	2108      	movs	r1, #8
 800092c:	488d      	ldr	r0, [pc, #564]	; (8000b64 <readKeypad+0x240>)
 800092e:	f001 f9ab 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000932:	2201      	movs	r2, #1
 8000934:	2101      	movs	r1, #1
 8000936:	488c      	ldr	r0, [pc, #560]	; (8000b68 <readKeypad+0x244>)
 8000938:	f001 f9a6 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET); // Pull the R3 High
 800093c:	2201      	movs	r2, #1
 800093e:	2108      	movs	r1, #8
 8000940:	4889      	ldr	r0, [pc, #548]	; (8000b68 <readKeypad+0x244>)
 8000942:	f001 f9a1 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET); // Pull the R4 High
 8000946:	2201      	movs	r2, #1
 8000948:	2108      	movs	r1, #8
 800094a:	4888      	ldr	r0, [pc, #544]	; (8000b6c <readKeypad+0x248>)
 800094c:	f001 f99c 	bl	8001c88 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000950:	2180      	movs	r1, #128	; 0x80
 8000952:	4887      	ldr	r0, [pc, #540]	; (8000b70 <readKeypad+0x24c>)
 8000954:	f001 f980 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d109      	bne.n	8000972 <readKeypad+0x4e>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 800095e:	bf00      	nop
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	4883      	ldr	r0, [pc, #524]	; (8000b70 <readKeypad+0x24c>)
 8000964:	f001 f978 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d0f8      	beq.n	8000960 <readKeypad+0x3c>
			;   // wait till the button is pressed
		return '1';
 800096e:	2331      	movs	r3, #49	; 0x31
 8000970:	e0f6      	b.n	8000b60 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000972:	2140      	movs	r1, #64	; 0x40
 8000974:	487e      	ldr	r0, [pc, #504]	; (8000b70 <readKeypad+0x24c>)
 8000976:	f001 f96f 	bl	8001c58 <HAL_GPIO_ReadPin>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d109      	bne.n	8000994 <readKeypad+0x70>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000980:	bf00      	nop
 8000982:	2140      	movs	r1, #64	; 0x40
 8000984:	487a      	ldr	r0, [pc, #488]	; (8000b70 <readKeypad+0x24c>)
 8000986:	f001 f967 	bl	8001c58 <HAL_GPIO_ReadPin>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0f8      	beq.n	8000982 <readKeypad+0x5e>
			;   // wait till the button is pressed
		return '2';
 8000990:	2332      	movs	r3, #50	; 0x32
 8000992:	e0e5      	b.n	8000b60 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000994:	2120      	movs	r1, #32
 8000996:	4876      	ldr	r0, [pc, #472]	; (8000b70 <readKeypad+0x24c>)
 8000998:	f001 f95e 	bl	8001c58 <HAL_GPIO_ReadPin>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d109      	bne.n	80009b6 <readKeypad+0x92>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 80009a2:	bf00      	nop
 80009a4:	2120      	movs	r1, #32
 80009a6:	4872      	ldr	r0, [pc, #456]	; (8000b70 <readKeypad+0x24c>)
 80009a8:	f001 f956 	bl	8001c58 <HAL_GPIO_ReadPin>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0f8      	beq.n	80009a4 <readKeypad+0x80>
			;   // wait till the button is pressed
		return '3';
 80009b2:	2333      	movs	r3, #51	; 0x33
 80009b4:	e0d4      	b.n	8000b60 <readKeypad+0x23c>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET); //Pull the R1 low
 80009b6:	2201      	movs	r2, #1
 80009b8:	2108      	movs	r1, #8
 80009ba:	486a      	ldr	r0, [pc, #424]	; (8000b64 <readKeypad+0x240>)
 80009bc:	f001 f964 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET); // Pull the R2 High
 80009c0:	2200      	movs	r2, #0
 80009c2:	2101      	movs	r1, #1
 80009c4:	4868      	ldr	r0, [pc, #416]	; (8000b68 <readKeypad+0x244>)
 80009c6:	f001 f95f 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET); // Pull the R3 High
 80009ca:	2201      	movs	r2, #1
 80009cc:	2108      	movs	r1, #8
 80009ce:	4866      	ldr	r0, [pc, #408]	; (8000b68 <readKeypad+0x244>)
 80009d0:	f001 f95a 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET); // Pull the R4 High
 80009d4:	2201      	movs	r2, #1
 80009d6:	2108      	movs	r1, #8
 80009d8:	4864      	ldr	r0, [pc, #400]	; (8000b6c <readKeypad+0x248>)
 80009da:	f001 f955 	bl	8001c88 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 80009de:	2180      	movs	r1, #128	; 0x80
 80009e0:	4863      	ldr	r0, [pc, #396]	; (8000b70 <readKeypad+0x24c>)
 80009e2:	f001 f939 	bl	8001c58 <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d109      	bne.n	8000a00 <readKeypad+0xdc>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 80009ec:	bf00      	nop
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	485f      	ldr	r0, [pc, #380]	; (8000b70 <readKeypad+0x24c>)
 80009f2:	f001 f931 	bl	8001c58 <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f8      	beq.n	80009ee <readKeypad+0xca>
			;   // wait till the button is pressed
		return '4';
 80009fc:	2334      	movs	r3, #52	; 0x34
 80009fe:	e0af      	b.n	8000b60 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	485b      	ldr	r0, [pc, #364]	; (8000b70 <readKeypad+0x24c>)
 8000a04:	f001 f928 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d109      	bne.n	8000a22 <readKeypad+0xfe>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000a0e:	bf00      	nop
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	4857      	ldr	r0, [pc, #348]	; (8000b70 <readKeypad+0x24c>)
 8000a14:	f001 f920 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f8      	beq.n	8000a10 <readKeypad+0xec>
			;   // wait till the button is pressed
		return '5';
 8000a1e:	2335      	movs	r3, #53	; 0x35
 8000a20:	e09e      	b.n	8000b60 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000a22:	2120      	movs	r1, #32
 8000a24:	4852      	ldr	r0, [pc, #328]	; (8000b70 <readKeypad+0x24c>)
 8000a26:	f001 f917 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d109      	bne.n	8000a44 <readKeypad+0x120>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 8000a30:	bf00      	nop
 8000a32:	2120      	movs	r1, #32
 8000a34:	484e      	ldr	r0, [pc, #312]	; (8000b70 <readKeypad+0x24c>)
 8000a36:	f001 f90f 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d0f8      	beq.n	8000a32 <readKeypad+0x10e>
			;   // wait till the button is pressed
		return '6';
 8000a40:	2336      	movs	r3, #54	; 0x36
 8000a42:	e08d      	b.n	8000b60 <readKeypad+0x23c>
	}

	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET); //Pull the R1 low
 8000a44:	2201      	movs	r2, #1
 8000a46:	2108      	movs	r1, #8
 8000a48:	4846      	ldr	r0, [pc, #280]	; (8000b64 <readKeypad+0x240>)
 8000a4a:	f001 f91d 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000a4e:	2201      	movs	r2, #1
 8000a50:	2101      	movs	r1, #1
 8000a52:	4845      	ldr	r0, [pc, #276]	; (8000b68 <readKeypad+0x244>)
 8000a54:	f001 f918 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET); // Pull the R3 High
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2108      	movs	r1, #8
 8000a5c:	4842      	ldr	r0, [pc, #264]	; (8000b68 <readKeypad+0x244>)
 8000a5e:	f001 f913 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET); // Pull the R4 High
 8000a62:	2201      	movs	r2, #1
 8000a64:	2108      	movs	r1, #8
 8000a66:	4841      	ldr	r0, [pc, #260]	; (8000b6c <readKeypad+0x248>)
 8000a68:	f001 f90e 	bl	8001c88 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	4840      	ldr	r0, [pc, #256]	; (8000b70 <readKeypad+0x24c>)
 8000a70:	f001 f8f2 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d109      	bne.n	8000a8e <readKeypad+0x16a>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 8000a7a:	bf00      	nop
 8000a7c:	2180      	movs	r1, #128	; 0x80
 8000a7e:	483c      	ldr	r0, [pc, #240]	; (8000b70 <readKeypad+0x24c>)
 8000a80:	f001 f8ea 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f8      	beq.n	8000a7c <readKeypad+0x158>
			;   // wait till the button is pressed
		return '7';
 8000a8a:	2337      	movs	r3, #55	; 0x37
 8000a8c:	e068      	b.n	8000b60 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000a8e:	2140      	movs	r1, #64	; 0x40
 8000a90:	4837      	ldr	r0, [pc, #220]	; (8000b70 <readKeypad+0x24c>)
 8000a92:	f001 f8e1 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d109      	bne.n	8000ab0 <readKeypad+0x18c>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000a9c:	bf00      	nop
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	4833      	ldr	r0, [pc, #204]	; (8000b70 <readKeypad+0x24c>)
 8000aa2:	f001 f8d9 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f8      	beq.n	8000a9e <readKeypad+0x17a>
			;   // wait till the button is pressed
		return '8';
 8000aac:	2338      	movs	r3, #56	; 0x38
 8000aae:	e057      	b.n	8000b60 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000ab0:	2120      	movs	r1, #32
 8000ab2:	482f      	ldr	r0, [pc, #188]	; (8000b70 <readKeypad+0x24c>)
 8000ab4:	f001 f8d0 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d109      	bne.n	8000ad2 <readKeypad+0x1ae>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 8000abe:	bf00      	nop
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	482b      	ldr	r0, [pc, #172]	; (8000b70 <readKeypad+0x24c>)
 8000ac4:	f001 f8c8 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d0f8      	beq.n	8000ac0 <readKeypad+0x19c>
			;   // wait till the button is pressed
		return '9';
 8000ace:	2339      	movs	r3, #57	; 0x39
 8000ad0:	e046      	b.n	8000b60 <readKeypad+0x23c>
	}

	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET); //Pull the R1 low
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	2108      	movs	r1, #8
 8000ad6:	4823      	ldr	r0, [pc, #140]	; (8000b64 <readKeypad+0x240>)
 8000ad8:	f001 f8d6 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000adc:	2201      	movs	r2, #1
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4821      	ldr	r0, [pc, #132]	; (8000b68 <readKeypad+0x244>)
 8000ae2:	f001 f8d1 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET); // Pull the R3 High
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	2108      	movs	r1, #8
 8000aea:	481f      	ldr	r0, [pc, #124]	; (8000b68 <readKeypad+0x244>)
 8000aec:	f001 f8cc 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET); // Pull the R4 High
 8000af0:	2200      	movs	r2, #0
 8000af2:	2108      	movs	r1, #8
 8000af4:	481d      	ldr	r0, [pc, #116]	; (8000b6c <readKeypad+0x248>)
 8000af6:	f001 f8c7 	bl	8001c88 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	481c      	ldr	r0, [pc, #112]	; (8000b70 <readKeypad+0x24c>)
 8000afe:	f001 f8ab 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d109      	bne.n	8000b1c <readKeypad+0x1f8>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 8000b08:	bf00      	nop
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	4818      	ldr	r0, [pc, #96]	; (8000b70 <readKeypad+0x24c>)
 8000b0e:	f001 f8a3 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d0f8      	beq.n	8000b0a <readKeypad+0x1e6>
			;   // wait till the button is pressed
		return '*';
 8000b18:	232a      	movs	r3, #42	; 0x2a
 8000b1a:	e021      	b.n	8000b60 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000b1c:	2140      	movs	r1, #64	; 0x40
 8000b1e:	4814      	ldr	r0, [pc, #80]	; (8000b70 <readKeypad+0x24c>)
 8000b20:	f001 f89a 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d109      	bne.n	8000b3e <readKeypad+0x21a>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000b2a:	bf00      	nop
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	4810      	ldr	r0, [pc, #64]	; (8000b70 <readKeypad+0x24c>)
 8000b30:	f001 f892 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d0f8      	beq.n	8000b2c <readKeypad+0x208>
			;   // wait till the button is pressed
		return '0';
 8000b3a:	2330      	movs	r3, #48	; 0x30
 8000b3c:	e010      	b.n	8000b60 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000b3e:	2120      	movs	r1, #32
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <readKeypad+0x24c>)
 8000b42:	f001 f889 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d109      	bne.n	8000b60 <readKeypad+0x23c>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 8000b4c:	bf00      	nop
 8000b4e:	2120      	movs	r1, #32
 8000b50:	4807      	ldr	r0, [pc, #28]	; (8000b70 <readKeypad+0x24c>)
 8000b52:	f001 f881 	bl	8001c58 <HAL_GPIO_ReadPin>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d0f8      	beq.n	8000b4e <readKeypad+0x22a>
			;   // wait till the button is pressed
		return '#';
 8000b5c:	2323      	movs	r3, #35	; 0x23
 8000b5e:	e7ff      	b.n	8000b60 <readKeypad+0x23c>
	}
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40020800 	.word	0x40020800
 8000b6c:	40021400 	.word	0x40021400
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <handleBadPin>:

void handleBadPin(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t*) badPinMessage, strlen(badPinMessage),
 8000b78:	480a      	ldr	r0, [pc, #40]	; (8000ba4 <handleBadPin+0x30>)
 8000b7a:	f7ff fb45 	bl	8000208 <strlen>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	4907      	ldr	r1, [pc, #28]	; (8000ba4 <handleBadPin+0x30>)
 8000b88:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <handleBadPin+0x34>)
 8000b8a:	f003 fbb1 	bl	80042f0 <HAL_UART_Transmit>
			1000);
	memset(&codeUser[0], '\0', 4);
 8000b8e:	2204      	movs	r2, #4
 8000b90:	2100      	movs	r1, #0
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <handleBadPin+0x38>)
 8000b94:	f004 fbc9 	bl	800532a <memset>
	codeUserIndex = 0;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <handleBadPin+0x3c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000010 	.word	0x20000010
 8000ba8:	20000118 	.word	0x20000118
 8000bac:	20000078 	.word	0x20000078
 8000bb0:	2000007c 	.word	0x2000007c

08000bb4 <handleGoodPin>:

void handleGoodPin(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	deactivateBuzzer();
 8000bb8:	f7ff fea8 	bl	800090c <deactivateBuzzer>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <handleGoodPin+0x58>)
 8000bbe:	f002 fa2f 	bl	8003020 <HAL_TIM_Base_Stop_IT>
	HAL_UART_Transmit(&huart3, (uint8_t*) goodPinMessage,
			strlen(goodPinMessage), 1000);
 8000bc2:	4813      	ldr	r0, [pc, #76]	; (8000c10 <handleGoodPin+0x5c>)
 8000bc4:	f7ff fb20 	bl	8000208 <strlen>
 8000bc8:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart3, (uint8_t*) goodPinMessage,
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd0:	490f      	ldr	r1, [pc, #60]	; (8000c10 <handleGoodPin+0x5c>)
 8000bd2:	4810      	ldr	r0, [pc, #64]	; (8000c14 <handleGoodPin+0x60>)
 8000bd4:	f003 fb8c 	bl	80042f0 <HAL_UART_Transmit>
	memset(&codeSet[0], '\0', 4);
 8000bd8:	2204      	movs	r2, #4
 8000bda:	2100      	movs	r1, #0
 8000bdc:	480e      	ldr	r0, [pc, #56]	; (8000c18 <handleGoodPin+0x64>)
 8000bde:	f004 fba4 	bl	800532a <memset>
	memset(&codeUser[0], '\0', 4);
 8000be2:	2204      	movs	r2, #4
 8000be4:	2100      	movs	r1, #0
 8000be6:	480d      	ldr	r0, [pc, #52]	; (8000c1c <handleGoodPin+0x68>)
 8000be8:	f004 fb9f 	bl	800532a <memset>
	codeSetIndex = 0;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <handleGoodPin+0x6c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
	codeUserIndex = 0;
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <handleGoodPin+0x70>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
	phase = 0;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <handleGoodPin+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
	firstTrigger = 0;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <handleGoodPin+0x78>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
	phase0LED();
 8000c04:	f000 f814 	bl	8000c30 <phase0LED>
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000080 	.word	0x20000080
 8000c10:	2000001c 	.word	0x2000001c
 8000c14:	20000118 	.word	0x20000118
 8000c18:	20000070 	.word	0x20000070
 8000c1c:	20000078 	.word	0x20000078
 8000c20:	20000074 	.word	0x20000074
 8000c24:	2000007c 	.word	0x2000007c
 8000c28:	2000007d 	.word	0x2000007d
 8000c2c:	2000007e 	.word	0x2000007e

08000c30 <phase0LED>:

void phase0LED() {
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <phase0LED+0x28>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <phase0LED+0x28>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c44:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000c46:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <phase0LED+0x28>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	200000cc 	.word	0x200000cc

08000c5c <phase1LED>:

void phase1LED() {
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 700);
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <phase1LED+0x2c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 500);
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <phase1LED+0x2c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c72:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <phase1LED+0x2c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	200000cc 	.word	0x200000cc

08000c8c <phase2LED>:

void phase2LED() {
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 200);
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <phase2LED+0x28>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	22c8      	movs	r2, #200	; 0xc8
 8000c96:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <phase2LED+0x28>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <phase2LED+0x28>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	200000cc 	.word	0x200000cc

08000cb8 <activatedBuzzerLED>:

void activatedBuzzerLED() {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <activatedBuzzerLED+0x28>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cc4:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <activatedBuzzerLED+0x28>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <activatedBuzzerLED+0x28>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000cd6:	bf00      	nop
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	200000cc 	.word	0x200000cc

08000ce4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce8:	f000 fbe5 	bl	80014b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cec:	f000 f8b4 	bl	8000e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf0:	f7ff fc10 	bl	8000514 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cf4:	f000 fb1e 	bl	8001334 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000cf8:	f000 f9b0 	bl	800105c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cfc:	f000 f9fe 	bl	80010fc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  phase0LED();
 8000d00:	f7ff ff96 	bl	8000c30 <phase0LED>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d04:	2100      	movs	r1, #0
 8000d06:	484a      	ldr	r0, [pc, #296]	; (8000e30 <main+0x14c>)
 8000d08:	f002 fa1a 	bl	8003140 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	4848      	ldr	r0, [pc, #288]	; (8000e30 <main+0x14c>)
 8000d10:	f002 fa16 	bl	8003140 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000d14:	2108      	movs	r1, #8
 8000d16:	4846      	ldr	r0, [pc, #280]	; (8000e30 <main+0x14c>)
 8000d18:	f002 fa12 	bl	8003140 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (phase == 0) {
 8000d1c:	4b45      	ldr	r3, [pc, #276]	; (8000e34 <main+0x150>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d133      	bne.n	8000d8c <main+0xa8>
			keyboard = readKeypad();
 8000d24:	f7ff fdfe 	bl	8000924 <readKeypad>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	4b42      	ldr	r3, [pc, #264]	; (8000e38 <main+0x154>)
 8000d2e:	701a      	strb	r2, [r3, #0]
			if (keyboard != 0x01) {
 8000d30:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <main+0x154>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d026      	beq.n	8000d86 <main+0xa2>
				codeSet[codeSetIndex] = keyboard;
 8000d38:	4b40      	ldr	r3, [pc, #256]	; (8000e3c <main+0x158>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <main+0x154>)
 8000d40:	7819      	ldrb	r1, [r3, #0]
 8000d42:	4b3f      	ldr	r3, [pc, #252]	; (8000e40 <main+0x15c>)
 8000d44:	5499      	strb	r1, [r3, r2]
				codeSetIndex++;
 8000d46:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <main+0x158>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <main+0x158>)
 8000d50:	701a      	strb	r2, [r3, #0]
				if (codeSetIndex >= 4) {
 8000d52:	4b3a      	ldr	r3, [pc, #232]	; (8000e3c <main+0x158>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b03      	cmp	r3, #3
 8000d58:	d907      	bls.n	8000d6a <main+0x86>
					HAL_TIM_Base_Start_IT(&htim2);
 8000d5a:	483a      	ldr	r0, [pc, #232]	; (8000e44 <main+0x160>)
 8000d5c:	f002 f8e8 	bl	8002f30 <HAL_TIM_Base_Start_IT>
					phase = 1;
 8000d60:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <main+0x150>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	701a      	strb	r2, [r3, #0]
					phase1LED();
 8000d66:	f7ff ff79 	bl	8000c5c <phase1LED>
				}

				HAL_UART_Transmit(&huart3, &keyboard, 1, 1000);
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4931      	ldr	r1, [pc, #196]	; (8000e38 <main+0x154>)
 8000d72:	4835      	ldr	r0, [pc, #212]	; (8000e48 <main+0x164>)
 8000d74:	f003 fabc 	bl	80042f0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) "\n", 1, 1000);
 8000d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4933      	ldr	r1, [pc, #204]	; (8000e4c <main+0x168>)
 8000d80:	4831      	ldr	r0, [pc, #196]	; (8000e48 <main+0x164>)
 8000d82:	f003 fab5 	bl	80042f0 <HAL_UART_Transmit>
			}

			HAL_Delay(200);
 8000d86:	20c8      	movs	r0, #200	; 0xc8
 8000d88:	f000 fbf2 	bl	8001570 <HAL_Delay>
		}

		if (phase == 1 || phase == 2) {
 8000d8c:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <main+0x150>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d003      	beq.n	8000d9c <main+0xb8>
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <main+0x150>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d1bf      	bne.n	8000d1c <main+0x38>
			keyboard = readKeypad();
 8000d9c:	f7ff fdc2 	bl	8000924 <readKeypad>
 8000da0:	4603      	mov	r3, r0
 8000da2:	461a      	mov	r2, r3
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <main+0x154>)
 8000da6:	701a      	strb	r2, [r3, #0]
			if (keyboard != 0x01) {
 8000da8:	4b23      	ldr	r3, [pc, #140]	; (8000e38 <main+0x154>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d03b      	beq.n	8000e28 <main+0x144>
				codeUser[codeUserIndex] = keyboard;
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <main+0x16c>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b20      	ldr	r3, [pc, #128]	; (8000e38 <main+0x154>)
 8000db8:	7819      	ldrb	r1, [r3, #0]
 8000dba:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <main+0x170>)
 8000dbc:	5499      	strb	r1, [r3, r2]
				codeUserIndex++;
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <main+0x16c>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <main+0x16c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, &keyboard, 1, 1000);
 8000dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4919      	ldr	r1, [pc, #100]	; (8000e38 <main+0x154>)
 8000dd2:	481d      	ldr	r0, [pc, #116]	; (8000e48 <main+0x164>)
 8000dd4:	f003 fa8c 	bl	80042f0 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) "\n", 1, 1000);
 8000dd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ddc:	2201      	movs	r2, #1
 8000dde:	491b      	ldr	r1, [pc, #108]	; (8000e4c <main+0x168>)
 8000de0:	4819      	ldr	r0, [pc, #100]	; (8000e48 <main+0x164>)
 8000de2:	f003 fa85 	bl	80042f0 <HAL_UART_Transmit>
				if (codeUserIndex >= 4) {
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <main+0x16c>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d91c      	bls.n	8000e28 <main+0x144>
					if (codeUser[0] == codeSet[0] && codeUser[1] == codeSet[1]
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <main+0x170>)
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <main+0x15c>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d114      	bne.n	8000e24 <main+0x140>
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <main+0x170>)
 8000dfc:	785a      	ldrb	r2, [r3, #1]
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <main+0x15c>)
 8000e00:	785b      	ldrb	r3, [r3, #1]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d10e      	bne.n	8000e24 <main+0x140>
							&& codeUser[2] == codeSet[2]
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <main+0x170>)
 8000e08:	789a      	ldrb	r2, [r3, #2]
 8000e0a:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <main+0x15c>)
 8000e0c:	789b      	ldrb	r3, [r3, #2]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d108      	bne.n	8000e24 <main+0x140>
							&& codeUser[3] == codeSet[3]) {
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <main+0x170>)
 8000e14:	78da      	ldrb	r2, [r3, #3]
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <main+0x15c>)
 8000e18:	78db      	ldrb	r3, [r3, #3]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d102      	bne.n	8000e24 <main+0x140>
						handleGoodPin();
 8000e1e:	f7ff fec9 	bl	8000bb4 <handleGoodPin>
 8000e22:	e001      	b.n	8000e28 <main+0x144>
					} else {
						handleBadPin();
 8000e24:	f7ff fea6 	bl	8000b74 <handleBadPin>
					}
				}
			}

			HAL_Delay(200);
 8000e28:	20c8      	movs	r0, #200	; 0xc8
 8000e2a:	f000 fba1 	bl	8001570 <HAL_Delay>
		if (phase == 0) {
 8000e2e:	e775      	b.n	8000d1c <main+0x38>
 8000e30:	200000cc 	.word	0x200000cc
 8000e34:	2000007d 	.word	0x2000007d
 8000e38:	2000006c 	.word	0x2000006c
 8000e3c:	20000074 	.word	0x20000074
 8000e40:	20000070 	.word	0x20000070
 8000e44:	20000080 	.word	0x20000080
 8000e48:	20000118 	.word	0x20000118
 8000e4c:	0800539c 	.word	0x0800539c
 8000e50:	2000007c 	.word	0x2000007c
 8000e54:	20000078 	.word	0x20000078

08000e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b094      	sub	sp, #80	; 0x50
 8000e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5e:	f107 0320 	add.w	r3, r7, #32
 8000e62:	2230      	movs	r2, #48	; 0x30
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f004 fa5f 	bl	800532a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000e7c:	f000 ff36 	bl	8001cec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <SystemClock_Config+0xc8>)
 8000e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e84:	4a26      	ldr	r2, [pc, #152]	; (8000f20 <SystemClock_Config+0xc8>)
 8000e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <SystemClock_Config+0xc8>)
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <SystemClock_Config+0xcc>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ea0:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <SystemClock_Config+0xcc>)
 8000ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b1e      	ldr	r3, [pc, #120]	; (8000f24 <SystemClock_Config+0xcc>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ec8:	2304      	movs	r3, #4
 8000eca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ecc:	2348      	movs	r3, #72	; 0x48
 8000ece:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed8:	f107 0320 	add.w	r3, r7, #32
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 ff15 	bl	8001d0c <HAL_RCC_OscConfig>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ee8:	f000 f81e 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eec:	230f      	movs	r3, #15
 8000eee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f02:	f107 030c 	add.w	r3, r7, #12
 8000f06:	2102      	movs	r1, #2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f001 f9a3 	bl	8002254 <HAL_RCC_ClockConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f14:	f000 f808 	bl	8000f28 <Error_Handler>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3750      	adds	r7, #80	; 0x50
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40007000 	.word	0x40007000

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_MspInit+0x50>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a11      	ldr	r2, [pc, #68]	; (8000f84 <HAL_MspInit+0x50>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_MspInit+0x50>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_MspInit+0x50>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <HAL_MspInit+0x50>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <HAL_MspInit+0x50>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2005      	movs	r0, #5
 8000f70:	f000 fbfd 	bl	800176e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f74:	2005      	movs	r0, #5
 8000f76:	f000 fc16 	bl	80017a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 faac 	bl	8001530 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(moveSensor_Pin);
 8000fee:	2010      	movs	r0, #16
 8000ff0:	f000 fe64 	bl	8001cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ffc:	4802      	ldr	r0, [pc, #8]	; (8001008 <TIM2_IRQHandler+0x10>)
 8000ffe:	f002 f999 	bl	8003334 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000080 	.word	0x20000080

0800100c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001010:	4802      	ldr	r0, [pc, #8]	; (800101c <USART3_IRQHandler+0x10>)
 8001012:	f003 f9f1 	bl	80043f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000118 	.word	0x20000118

08001020 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Guzik_Pin);
 8001024:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001028:	f000 fe48 	bl	8001cbc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 800102c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001030:	f000 fe44 	bl	8001cbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <SystemInit+0x20>)
 800103e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001042:	4a05      	ldr	r2, [pc, #20]	; (8001058 <SystemInit+0x20>)
 8001044:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001048:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0310 	add.w	r3, r7, #16
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <MX_TIM2_Init+0x98>)
 800107c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001080:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <MX_TIM2_Init+0x98>)
 8001084:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001088:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_TIM2_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 299999;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_TIM2_Init+0x98>)
 8001092:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <MX_TIM2_Init+0x9c>)
 8001094:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_TIM2_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_TIM2_Init+0x98>)
 800109e:	2200      	movs	r2, #0
 80010a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a2:	4814      	ldr	r0, [pc, #80]	; (80010f4 <MX_TIM2_Init+0x98>)
 80010a4:	f001 feec 	bl	8002e80 <HAL_TIM_Base_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80010ae:	f7ff ff3b 	bl	8000f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	4619      	mov	r1, r3
 80010be:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_TIM2_Init+0x98>)
 80010c0:	f002 fb6c 	bl	800379c <HAL_TIM_ConfigClockSource>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80010ca:	f7ff ff2d 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4806      	ldr	r0, [pc, #24]	; (80010f4 <MX_TIM2_Init+0x98>)
 80010dc:	f003 f80e 	bl	80040fc <HAL_TIMEx_MasterConfigSynchronization>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80010e6:	f7ff ff1f 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	3720      	adds	r7, #32
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000080 	.word	0x20000080
 80010f8:	000493df 	.word	0x000493df

080010fc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08e      	sub	sp, #56	; 0x38
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111c:	463b      	mov	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
 8001128:	611a      	str	r2, [r3, #16]
 800112a:	615a      	str	r2, [r3, #20]
 800112c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800112e:	4b38      	ldr	r3, [pc, #224]	; (8001210 <MX_TIM3_Init+0x114>)
 8001130:	4a38      	ldr	r2, [pc, #224]	; (8001214 <MX_TIM3_Init+0x118>)
 8001132:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <MX_TIM3_Init+0x114>)
 8001136:	2247      	movs	r2, #71	; 0x47
 8001138:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <MX_TIM3_Init+0x114>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001140:	4b33      	ldr	r3, [pc, #204]	; (8001210 <MX_TIM3_Init+0x114>)
 8001142:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001146:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b31      	ldr	r3, [pc, #196]	; (8001210 <MX_TIM3_Init+0x114>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b30      	ldr	r3, [pc, #192]	; (8001210 <MX_TIM3_Init+0x114>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001154:	482e      	ldr	r0, [pc, #184]	; (8001210 <MX_TIM3_Init+0x114>)
 8001156:	f001 fe93 	bl	8002e80 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001160:	f7ff fee2 	bl	8000f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116e:	4619      	mov	r1, r3
 8001170:	4827      	ldr	r0, [pc, #156]	; (8001210 <MX_TIM3_Init+0x114>)
 8001172:	f002 fb13 	bl	800379c <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800117c:	f7ff fed4 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001180:	4823      	ldr	r0, [pc, #140]	; (8001210 <MX_TIM3_Init+0x114>)
 8001182:	f001 ff7c 	bl	800307e <HAL_TIM_PWM_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800118c:	f7ff fecc 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	481c      	ldr	r0, [pc, #112]	; (8001210 <MX_TIM3_Init+0x114>)
 80011a0:	f002 ffac 	bl	80040fc <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80011aa:	f7ff febd 	bl	8000f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ae:	2360      	movs	r3, #96	; 0x60
 80011b0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	4619      	mov	r1, r3
 80011c4:	4812      	ldr	r0, [pc, #72]	; (8001210 <MX_TIM3_Init+0x114>)
 80011c6:	f002 f9d5 	bl	8003574 <HAL_TIM_PWM_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011d0:	f7ff feaa 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011d4:	463b      	mov	r3, r7
 80011d6:	2204      	movs	r2, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_TIM3_Init+0x114>)
 80011dc:	f002 f9ca 	bl	8003574 <HAL_TIM_PWM_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80011e6:	f7ff fe9f 	bl	8000f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80011ea:	463b      	mov	r3, r7
 80011ec:	2208      	movs	r2, #8
 80011ee:	4619      	mov	r1, r3
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <MX_TIM3_Init+0x114>)
 80011f2:	f002 f9bf 	bl	8003574 <HAL_TIM_PWM_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80011fc:	f7ff fe94 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <MX_TIM3_Init+0x114>)
 8001202:	f000 f841 	bl	8001288 <HAL_TIM_MspPostInit>

}
 8001206:	bf00      	nop
 8001208:	3738      	adds	r7, #56	; 0x38
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200000cc 	.word	0x200000cc
 8001214:	40000400 	.word	0x40000400

08001218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001228:	d114      	bne.n	8001254 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_TIM_Base_MspInit+0x68>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a14      	ldr	r2, [pc, #80]	; (8001280 <HAL_TIM_Base_MspInit+0x68>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_TIM_Base_MspInit+0x68>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	201c      	movs	r0, #28
 8001248:	f000 fa91 	bl	800176e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800124c:	201c      	movs	r0, #28
 800124e:	f000 faaa 	bl	80017a6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001252:	e010      	b.n	8001276 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_TIM_Base_MspInit+0x6c>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d10b      	bne.n	8001276 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_TIM_Base_MspInit+0x68>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a07      	ldr	r2, [pc, #28]	; (8001280 <HAL_TIM_Base_MspInit+0x68>)
 8001264:	f043 0302 	orr.w	r3, r3, #2
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_TIM_Base_MspInit+0x68>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	40000400 	.word	0x40000400

08001288 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
 800129e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <HAL_TIM_MspPostInit+0x9c>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d138      	bne.n	800131c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <HAL_TIM_MspPostInit+0xa0>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a1e      	ldr	r2, [pc, #120]	; (8001328 <HAL_TIM_MspPostInit+0xa0>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <HAL_TIM_MspPostInit+0xa0>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <HAL_TIM_MspPostInit+0xa0>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a18      	ldr	r2, [pc, #96]	; (8001328 <HAL_TIM_MspPostInit+0xa0>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_TIM_MspPostInit+0xa0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012da:	2340      	movs	r3, #64	; 0x40
 80012dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ea:	2302      	movs	r3, #2
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <HAL_TIM_MspPostInit+0xa4>)
 80012f6:	f000 fb03 	bl	8001900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80012fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800130c:	2302      	movs	r3, #2
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <HAL_TIM_MspPostInit+0xa8>)
 8001318:	f000 faf2 	bl	8001900 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800131c:	bf00      	nop
 800131e:	3728      	adds	r7, #40	; 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40000400 	.word	0x40000400
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000
 8001330:	40020800 	.word	0x40020800

08001334 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_USART3_UART_Init+0x58>)
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <MX_USART3_UART_Init+0x5c>)
 800133c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_USART3_UART_Init+0x58>)
 8001340:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001344:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_USART3_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_USART3_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_USART3_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_USART3_UART_Init+0x58>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_USART3_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_USART3_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_USART3_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_USART3_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_USART3_UART_Init+0x58>)
 8001378:	f002 ff6c 	bl	8004254 <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001382:	f7ff fdd1 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000118 	.word	0x20000118
 8001390:	40004800 	.word	0x40004800

08001394 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0aa      	sub	sp, #168	; 0xa8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ac:	f107 0310 	add.w	r3, r7, #16
 80013b0:	2284      	movs	r2, #132	; 0x84
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f003 ffb8 	bl	800532a <memset>
  if(uartHandle->Instance==USART3)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a26      	ldr	r2, [pc, #152]	; (8001458 <HAL_UART_MspInit+0xc4>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d144      	bne.n	800144e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f107 0310 	add.w	r3, r7, #16
 80013d2:	4618      	mov	r0, r3
 80013d4:	f001 f964 	bl	80026a0 <HAL_RCCEx_PeriphCLKConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013de:	f7ff fda3 	bl	8000f28 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e2:	4b1e      	ldr	r3, [pc, #120]	; (800145c <HAL_UART_MspInit+0xc8>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_UART_MspInit+0xc8>)
 80013e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ec:	6413      	str	r3, [r2, #64]	; 0x40
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_UART_MspInit+0xc8>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	4b18      	ldr	r3, [pc, #96]	; (800145c <HAL_UART_MspInit+0xc8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_UART_MspInit+0xc8>)
 8001400:	f043 0308 	orr.w	r3, r3, #8
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_UART_MspInit+0xc8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001412:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001420:	2301      	movs	r3, #1
 8001422:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001426:	2303      	movs	r3, #3
 8001428:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800142c:	2307      	movs	r3, #7
 800142e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001432:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001436:	4619      	mov	r1, r3
 8001438:	4809      	ldr	r0, [pc, #36]	; (8001460 <HAL_UART_MspInit+0xcc>)
 800143a:	f000 fa61 	bl	8001900 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	2027      	movs	r0, #39	; 0x27
 8001444:	f000 f993 	bl	800176e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001448:	2027      	movs	r0, #39	; 0x27
 800144a:	f000 f9ac 	bl	80017a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800144e:	bf00      	nop
 8001450:	37a8      	adds	r7, #168	; 0xa8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40004800 	.word	0x40004800
 800145c:	40023800 	.word	0x40023800
 8001460:	40020c00 	.word	0x40020c00

08001464 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800149c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800146a:	490e      	ldr	r1, [pc, #56]	; (80014a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800146c:	4a0e      	ldr	r2, [pc, #56]	; (80014a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001470:	e002      	b.n	8001478 <LoopCopyDataInit>

08001472 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001472:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001474:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001476:	3304      	adds	r3, #4

08001478 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001478:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800147c:	d3f9      	bcc.n	8001472 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001480:	4c0b      	ldr	r4, [pc, #44]	; (80014b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001484:	e001      	b.n	800148a <LoopFillZerobss>

08001486 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001486:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001488:	3204      	adds	r2, #4

0800148a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800148c:	d3fb      	bcc.n	8001486 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800148e:	f7ff fdd3 	bl	8001038 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001492:	f003 ff53 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001496:	f7ff fc25 	bl	8000ce4 <main>
  bx  lr    
 800149a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800149c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80014a8:	080053c8 	.word	0x080053c8
  ldr r2, =_sbss
 80014ac:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80014b0:	200001a4 	.word	0x200001a4

080014b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC_IRQHandler>

080014b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ba:	2003      	movs	r0, #3
 80014bc:	f000 f94c 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014c0:	2000      	movs	r0, #0
 80014c2:	f000 f805 	bl	80014d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c6:	f7ff fd35 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_InitTick+0x54>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <HAL_InitTick+0x58>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f967 	bl	80017c2 <HAL_SYSTICK_Config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00e      	b.n	800151c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b0f      	cmp	r3, #15
 8001502:	d80a      	bhi.n	800151a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001504:	2200      	movs	r2, #0
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f000 f92f 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001510:	4a06      	ldr	r2, [pc, #24]	; (800152c <HAL_InitTick+0x5c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	e000      	b.n	800151c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000044 	.word	0x20000044
 8001528:	2000004c 	.word	0x2000004c
 800152c:	20000048 	.word	0x20000048

08001530 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <HAL_IncTick+0x20>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	4b06      	ldr	r3, [pc, #24]	; (8001554 <HAL_IncTick+0x24>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4413      	add	r3, r2
 8001540:	4a04      	ldr	r2, [pc, #16]	; (8001554 <HAL_IncTick+0x24>)
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2000004c 	.word	0x2000004c
 8001554:	200001a0 	.word	0x200001a0

08001558 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  return uwTick;
 800155c:	4b03      	ldr	r3, [pc, #12]	; (800156c <HAL_GetTick+0x14>)
 800155e:	681b      	ldr	r3, [r3, #0]
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	200001a0 	.word	0x200001a0

08001570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001578:	f7ff ffee 	bl	8001558 <HAL_GetTick>
 800157c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001588:	d005      	beq.n	8001596 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158a:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_Delay+0x44>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4413      	add	r3, r2
 8001594:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001596:	bf00      	nop
 8001598:	f7ff ffde 	bl	8001558 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d8f7      	bhi.n	8001598 <HAL_Delay+0x28>
  {
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000004c 	.word	0x2000004c

080015b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015c8:	4b0b      	ldr	r3, [pc, #44]	; (80015f8 <__NVIC_SetPriorityGrouping+0x40>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d4:	4013      	ands	r3, r2
 80015d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <__NVIC_SetPriorityGrouping+0x44>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <__NVIC_SetPriorityGrouping+0x40>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	60d3      	str	r3, [r2, #12]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00
 80015fc:	05fa0000 	.word	0x05fa0000

08001600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <__NVIC_GetPriorityGrouping+0x18>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	0a1b      	lsrs	r3, r3, #8
 800160a:	f003 0307 	and.w	r3, r3, #7
}
 800160e:	4618      	mov	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	db0b      	blt.n	8001646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 021f 	and.w	r2, r3, #31
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <__NVIC_EnableIRQ+0x38>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	2001      	movs	r0, #1
 800163e:	fa00 f202 	lsl.w	r2, r0, r2
 8001642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e100 	.word	0xe000e100

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	; (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	; 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	; (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	; (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff29 	bl	80015b8 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff3e 	bl	8001600 <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff8e 	bl	80016ac <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5d 	bl	8001658 <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	4603      	mov	r3, r0
 80017ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff31 	bl	800161c <__NVIC_EnableIRQ>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffa2 	bl	8001714 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff feb6 	bl	8001558 <HAL_GetTick>
 80017ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d008      	beq.n	800180c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e052      	b.n	80018b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0216 	bic.w	r2, r2, #22
 800181a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800182a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2b00      	cmp	r3, #0
 8001832:	d103      	bne.n	800183c <HAL_DMA_Abort+0x62>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001838:	2b00      	cmp	r3, #0
 800183a:	d007      	beq.n	800184c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0208 	bic.w	r2, r2, #8
 800184a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800185c:	e013      	b.n	8001886 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800185e:	f7ff fe7b 	bl	8001558 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b05      	cmp	r3, #5
 800186a:	d90c      	bls.n	8001886 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e015      	b.n	80018b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e4      	bne.n	800185e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001898:	223f      	movs	r2, #63	; 0x3f
 800189a:	409a      	lsls	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d004      	beq.n	80018d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2280      	movs	r2, #128	; 0x80
 80018d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e00c      	b.n	80018f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2205      	movs	r2, #5
 80018dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b089      	sub	sp, #36	; 0x24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e175      	b.n	8001c0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8164 	bne.w	8001c06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_GPIO_Init+0x56>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d130      	bne.n	80019b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80be 	beq.w	8001c06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	4b66      	ldr	r3, [pc, #408]	; (8001c24 <HAL_GPIO_Init+0x324>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	4a65      	ldr	r2, [pc, #404]	; (8001c24 <HAL_GPIO_Init+0x324>)
 8001a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a94:	6453      	str	r3, [r2, #68]	; 0x44
 8001a96:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_GPIO_Init+0x324>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001aa2:	4a61      	ldr	r2, [pc, #388]	; (8001c28 <HAL_GPIO_Init+0x328>)
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	089b      	lsrs	r3, r3, #2
 8001aa8:	3302      	adds	r3, #2
 8001aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	220f      	movs	r2, #15
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_GPIO_Init+0x32c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d037      	beq.n	8001b3e <HAL_GPIO_Init+0x23e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a57      	ldr	r2, [pc, #348]	; (8001c30 <HAL_GPIO_Init+0x330>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d031      	beq.n	8001b3a <HAL_GPIO_Init+0x23a>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a56      	ldr	r2, [pc, #344]	; (8001c34 <HAL_GPIO_Init+0x334>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d02b      	beq.n	8001b36 <HAL_GPIO_Init+0x236>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a55      	ldr	r2, [pc, #340]	; (8001c38 <HAL_GPIO_Init+0x338>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d025      	beq.n	8001b32 <HAL_GPIO_Init+0x232>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a54      	ldr	r2, [pc, #336]	; (8001c3c <HAL_GPIO_Init+0x33c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d01f      	beq.n	8001b2e <HAL_GPIO_Init+0x22e>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a53      	ldr	r2, [pc, #332]	; (8001c40 <HAL_GPIO_Init+0x340>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d019      	beq.n	8001b2a <HAL_GPIO_Init+0x22a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a52      	ldr	r2, [pc, #328]	; (8001c44 <HAL_GPIO_Init+0x344>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d013      	beq.n	8001b26 <HAL_GPIO_Init+0x226>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a51      	ldr	r2, [pc, #324]	; (8001c48 <HAL_GPIO_Init+0x348>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d00d      	beq.n	8001b22 <HAL_GPIO_Init+0x222>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <HAL_GPIO_Init+0x34c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d007      	beq.n	8001b1e <HAL_GPIO_Init+0x21e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a4f      	ldr	r2, [pc, #316]	; (8001c50 <HAL_GPIO_Init+0x350>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d101      	bne.n	8001b1a <HAL_GPIO_Init+0x21a>
 8001b16:	2309      	movs	r3, #9
 8001b18:	e012      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b1a:	230a      	movs	r3, #10
 8001b1c:	e010      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b1e:	2308      	movs	r3, #8
 8001b20:	e00e      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b22:	2307      	movs	r3, #7
 8001b24:	e00c      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b26:	2306      	movs	r3, #6
 8001b28:	e00a      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	e008      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b2e:	2304      	movs	r3, #4
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b32:	2303      	movs	r3, #3
 8001b34:	e004      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e002      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_GPIO_Init+0x240>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	f002 0203 	and.w	r2, r2, #3
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	4093      	lsls	r3, r2
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b50:	4935      	ldr	r1, [pc, #212]	; (8001c28 <HAL_GPIO_Init+0x328>)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b82:	4a34      	ldr	r2, [pc, #208]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bac:	4a29      	ldr	r2, [pc, #164]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <HAL_GPIO_Init+0x354>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b0f      	cmp	r3, #15
 8001c10:	f67f ae86 	bls.w	8001920 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020c00 	.word	0x40020c00
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40021400 	.word	0x40021400
 8001c44:	40021800 	.word	0x40021800
 8001c48:	40021c00 	.word	0x40021c00
 8001c4c:	40022000 	.word	0x40022000
 8001c50:	40022400 	.word	0x40022400
 8001c54:	40013c00 	.word	0x40013c00

08001c58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	460b      	mov	r3, r1
 8001c62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	887b      	ldrh	r3, [r7, #2]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c70:	2301      	movs	r3, #1
 8001c72:	73fb      	strb	r3, [r7, #15]
 8001c74:	e001      	b.n	8001c7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ca4:	e003      	b.n	8001cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	619a      	str	r2, [r3, #24]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc8:	695a      	ldr	r2, [r3, #20]
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d006      	beq.n	8001ce0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fda2 	bl	8000824 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40013c00 	.word	0x40013c00

08001cec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40007000 	.word	0x40007000

08001d0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e291      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8087 	beq.w	8001e3e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d30:	4b96      	ldr	r3, [pc, #600]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d00c      	beq.n	8001d56 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3c:	4b93      	ldr	r3, [pc, #588]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d112      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62>
 8001d48:	4b90      	ldr	r3, [pc, #576]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d54:	d10b      	bne.n	8001d6e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d56:	4b8d      	ldr	r3, [pc, #564]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d06c      	beq.n	8001e3c <HAL_RCC_OscConfig+0x130>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d168      	bne.n	8001e3c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e26b      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x7a>
 8001d78:	4b84      	ldr	r3, [pc, #528]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a83      	ldr	r2, [pc, #524]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	e02e      	b.n	8001de4 <HAL_RCC_OscConfig+0xd8>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x9c>
 8001d8e:	4b7f      	ldr	r3, [pc, #508]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a7e      	ldr	r2, [pc, #504]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b7c      	ldr	r3, [pc, #496]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a7b      	ldr	r2, [pc, #492]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e01d      	b.n	8001de4 <HAL_RCC_OscConfig+0xd8>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0xc0>
 8001db2:	4b76      	ldr	r3, [pc, #472]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a75      	ldr	r2, [pc, #468]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	4b73      	ldr	r3, [pc, #460]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a72      	ldr	r2, [pc, #456]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0xd8>
 8001dcc:	4b6f      	ldr	r3, [pc, #444]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6e      	ldr	r2, [pc, #440]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b6c      	ldr	r3, [pc, #432]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6b      	ldr	r2, [pc, #428]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d013      	beq.n	8001e14 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff fbb4 	bl	8001558 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df4:	f7ff fbb0 	bl	8001558 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b64      	cmp	r3, #100	; 0x64
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e21f      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	4b61      	ldr	r3, [pc, #388]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0xe8>
 8001e12:	e014      	b.n	8001e3e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff fba0 	bl	8001558 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7ff fb9c 	bl	8001558 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e20b      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2e:	4b57      	ldr	r3, [pc, #348]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x110>
 8001e3a:	e000      	b.n	8001e3e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d069      	beq.n	8001f1e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4a:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e56:	4b4d      	ldr	r3, [pc, #308]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f003 030c 	and.w	r3, r3, #12
 8001e5e:	2b08      	cmp	r3, #8
 8001e60:	d11c      	bne.n	8001e9c <HAL_RCC_OscConfig+0x190>
 8001e62:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d116      	bne.n	8001e9c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e6e:	4b47      	ldr	r3, [pc, #284]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d005      	beq.n	8001e86 <HAL_RCC_OscConfig+0x17a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d001      	beq.n	8001e86 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e1df      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	493d      	ldr	r1, [pc, #244]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9a:	e040      	b.n	8001f1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d023      	beq.n	8001eec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea4:	4b39      	ldr	r3, [pc, #228]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a38      	ldr	r2, [pc, #224]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fb52 	bl	8001558 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7ff fb4e 	bl	8001558 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1bd      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed6:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4929      	ldr	r1, [pc, #164]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	600b      	str	r3, [r1, #0]
 8001eea:	e018      	b.n	8001f1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eec:	4b27      	ldr	r3, [pc, #156]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a26      	ldr	r2, [pc, #152]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001ef2:	f023 0301 	bic.w	r3, r3, #1
 8001ef6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fb2e 	bl	8001558 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff fb2a 	bl	8001558 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e199      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d038      	beq.n	8001f9c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d019      	beq.n	8001f66 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f36:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3e:	f7ff fb0b 	bl	8001558 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f46:	f7ff fb07 	bl	8001558 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e176      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x23a>
 8001f64:	e01a      	b.n	8001f9c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f66:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6a:	4a08      	ldr	r2, [pc, #32]	; (8001f8c <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f72:	f7ff faf1 	bl	8001558 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	e00a      	b.n	8001f90 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff faed 	bl	8001558 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d903      	bls.n	8001f90 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e15c      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
 8001f8c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b91      	ldr	r3, [pc, #580]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8001f92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ee      	bne.n	8001f7a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a4 	beq.w	80020f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001faa:	4b8b      	ldr	r3, [pc, #556]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10d      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb6:	4b88      	ldr	r3, [pc, #544]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a87      	ldr	r2, [pc, #540]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b85      	ldr	r3, [pc, #532]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd2:	4b82      	ldr	r3, [pc, #520]	; (80021dc <HAL_RCC_OscConfig+0x4d0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d118      	bne.n	8002010 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fde:	4b7f      	ldr	r3, [pc, #508]	; (80021dc <HAL_RCC_OscConfig+0x4d0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a7e      	ldr	r2, [pc, #504]	; (80021dc <HAL_RCC_OscConfig+0x4d0>)
 8001fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fea:	f7ff fab5 	bl	8001558 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ff2:	f7ff fab1 	bl	8001558 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b64      	cmp	r3, #100	; 0x64
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e120      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002004:	4b75      	ldr	r3, [pc, #468]	; (80021dc <HAL_RCC_OscConfig+0x4d0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x31a>
 8002018:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201c:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800201e:	f043 0301 	orr.w	r3, r3, #1
 8002022:	6713      	str	r3, [r2, #112]	; 0x70
 8002024:	e02d      	b.n	8002082 <HAL_RCC_OscConfig+0x376>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10c      	bne.n	8002048 <HAL_RCC_OscConfig+0x33c>
 800202e:	4b6a      	ldr	r3, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002032:	4a69      	ldr	r2, [pc, #420]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002034:	f023 0301 	bic.w	r3, r3, #1
 8002038:	6713      	str	r3, [r2, #112]	; 0x70
 800203a:	4b67      	ldr	r3, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	4a66      	ldr	r2, [pc, #408]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002040:	f023 0304 	bic.w	r3, r3, #4
 8002044:	6713      	str	r3, [r2, #112]	; 0x70
 8002046:	e01c      	b.n	8002082 <HAL_RCC_OscConfig+0x376>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b05      	cmp	r3, #5
 800204e:	d10c      	bne.n	800206a <HAL_RCC_OscConfig+0x35e>
 8002050:	4b61      	ldr	r3, [pc, #388]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002054:	4a60      	ldr	r2, [pc, #384]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002056:	f043 0304 	orr.w	r3, r3, #4
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
 800205c:	4b5e      	ldr	r3, [pc, #376]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002060:	4a5d      	ldr	r2, [pc, #372]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6713      	str	r3, [r2, #112]	; 0x70
 8002068:	e00b      	b.n	8002082 <HAL_RCC_OscConfig+0x376>
 800206a:	4b5b      	ldr	r3, [pc, #364]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	4a5a      	ldr	r2, [pc, #360]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6713      	str	r3, [r2, #112]	; 0x70
 8002076:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207a:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800207c:	f023 0304 	bic.w	r3, r3, #4
 8002080:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d015      	beq.n	80020b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800208a:	f7ff fa65 	bl	8001558 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002090:	e00a      	b.n	80020a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002092:	f7ff fa61 	bl	8001558 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0ce      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a8:	4b4b      	ldr	r3, [pc, #300]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d0ee      	beq.n	8002092 <HAL_RCC_OscConfig+0x386>
 80020b4:	e014      	b.n	80020e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b6:	f7ff fa4f 	bl	8001558 <HAL_GetTick>
 80020ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020be:	f7ff fa4b 	bl	8001558 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0b8      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1ee      	bne.n	80020be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d105      	bne.n	80020f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e6:	4b3c      	ldr	r3, [pc, #240]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80020ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 80a4 	beq.w	8002244 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 030c 	and.w	r3, r3, #12
 8002104:	2b08      	cmp	r3, #8
 8002106:	d06b      	beq.n	80021e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d149      	bne.n	80021a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002110:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a30      	ldr	r2, [pc, #192]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff fa1c 	bl	8001558 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff fa18 	bl	8001558 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e087      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002136:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002150:	019b      	lsls	r3, r3, #6
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	3b01      	subs	r3, #1
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	4313      	orrs	r3, r2
 8002168:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 800216a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800216e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002170:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a18      	ldr	r2, [pc, #96]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002176:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff f9ec 	bl	8001558 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff f9e8 	bl	8001558 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e057      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x478>
 80021a2:	e04f      	b.n	8002244 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a4:	4b0c      	ldr	r3, [pc, #48]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80021aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff f9d2 	bl	8001558 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff f9ce 	bl	8001558 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e03d      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	4b03      	ldr	r3, [pc, #12]	; (80021d8 <HAL_RCC_OscConfig+0x4cc>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f0      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4ac>
 80021d6:	e035      	b.n	8002244 <HAL_RCC_OscConfig+0x538>
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021e0:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x544>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d028      	beq.n	8002240 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d121      	bne.n	8002240 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d11a      	bne.n	8002240 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002210:	4013      	ands	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002216:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002218:	4293      	cmp	r3, r2
 800221a:	d111      	bne.n	8002240 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	3b01      	subs	r3, #1
 800222a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800223a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800223c:	429a      	cmp	r2, r3
 800223e:	d001      	beq.n	8002244 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800225e:	2300      	movs	r3, #0
 8002260:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e0d0      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800226c:	4b6a      	ldr	r3, [pc, #424]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 030f 	and.w	r3, r3, #15
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d910      	bls.n	800229c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b67      	ldr	r3, [pc, #412]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 020f 	bic.w	r2, r3, #15
 8002282:	4965      	ldr	r1, [pc, #404]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b8      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	494d      	ldr	r1, [pc, #308]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d040      	beq.n	8002378 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d107      	bne.n	8002326 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002316:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e073      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	4b3d      	ldr	r3, [pc, #244]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e06b      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002336:	4b39      	ldr	r3, [pc, #228]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f023 0203 	bic.w	r2, r3, #3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	4936      	ldr	r1, [pc, #216]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	4313      	orrs	r3, r2
 8002346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002348:	f7ff f906 	bl	8001558 <HAL_GetTick>
 800234c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234e:	e00a      	b.n	8002366 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002350:	f7ff f902 	bl	8001558 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f241 3288 	movw	r2, #5000	; 0x1388
 800235e:	4293      	cmp	r3, r2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e053      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 020c 	and.w	r2, r3, #12
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	429a      	cmp	r2, r3
 8002376:	d1eb      	bne.n	8002350 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d210      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 020f 	bic.w	r2, r3, #15
 800238e:	4922      	ldr	r1, [pc, #136]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_RCC_ClockConfig+0x1c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e032      	b.n	800240e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4916      	ldr	r1, [pc, #88]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	490e      	ldr	r1, [pc, #56]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023e6:	f000 f821 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x1c8>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	490a      	ldr	r1, [pc, #40]	; (8002420 <HAL_RCC_ClockConfig+0x1cc>)
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1d0>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1d4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff f862 	bl	80014d0 <HAL_InitTick>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023c00 	.word	0x40023c00
 800241c:	40023800 	.word	0x40023800
 8002420:	080053a0 	.word	0x080053a0
 8002424:	20000044 	.word	0x20000044
 8002428:	20000048 	.word	0x20000048

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002430:	b094      	sub	sp, #80	; 0x50
 8002432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002434:	2300      	movs	r3, #0
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
 8002438:	2300      	movs	r3, #0
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800243c:	2300      	movs	r3, #0
 800243e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002444:	4b79      	ldr	r3, [pc, #484]	; (800262c <HAL_RCC_GetSysClockFreq+0x200>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d00d      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x40>
 8002450:	2b08      	cmp	r3, #8
 8002452:	f200 80e1 	bhi.w	8002618 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x34>
 800245a:	2b04      	cmp	r3, #4
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x3a>
 800245e:	e0db      	b.n	8002618 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4b73      	ldr	r3, [pc, #460]	; (8002630 <HAL_RCC_GetSysClockFreq+0x204>)
 8002462:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002464:	e0db      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002466:	4b73      	ldr	r3, [pc, #460]	; (8002634 <HAL_RCC_GetSysClockFreq+0x208>)
 8002468:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800246a:	e0d8      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800246c:	4b6f      	ldr	r3, [pc, #444]	; (800262c <HAL_RCC_GetSysClockFreq+0x200>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002474:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002476:	4b6d      	ldr	r3, [pc, #436]	; (800262c <HAL_RCC_GetSysClockFreq+0x200>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d063      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002482:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_GetSysClockFreq+0x200>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	2200      	movs	r2, #0
 800248a:	63bb      	str	r3, [r7, #56]	; 0x38
 800248c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002494:	633b      	str	r3, [r7, #48]	; 0x30
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
 800249a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800249e:	4622      	mov	r2, r4
 80024a0:	462b      	mov	r3, r5
 80024a2:	f04f 0000 	mov.w	r0, #0
 80024a6:	f04f 0100 	mov.w	r1, #0
 80024aa:	0159      	lsls	r1, r3, #5
 80024ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024b0:	0150      	lsls	r0, r2, #5
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4621      	mov	r1, r4
 80024b8:	1a51      	subs	r1, r2, r1
 80024ba:	6139      	str	r1, [r7, #16]
 80024bc:	4629      	mov	r1, r5
 80024be:	eb63 0301 	sbc.w	r3, r3, r1
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024d0:	4659      	mov	r1, fp
 80024d2:	018b      	lsls	r3, r1, #6
 80024d4:	4651      	mov	r1, sl
 80024d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024da:	4651      	mov	r1, sl
 80024dc:	018a      	lsls	r2, r1, #6
 80024de:	4651      	mov	r1, sl
 80024e0:	ebb2 0801 	subs.w	r8, r2, r1
 80024e4:	4659      	mov	r1, fp
 80024e6:	eb63 0901 	sbc.w	r9, r3, r1
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	f04f 0300 	mov.w	r3, #0
 80024f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024fe:	4690      	mov	r8, r2
 8002500:	4699      	mov	r9, r3
 8002502:	4623      	mov	r3, r4
 8002504:	eb18 0303 	adds.w	r3, r8, r3
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	462b      	mov	r3, r5
 800250c:	eb49 0303 	adc.w	r3, r9, r3
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	f04f 0200 	mov.w	r2, #0
 8002516:	f04f 0300 	mov.w	r3, #0
 800251a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800251e:	4629      	mov	r1, r5
 8002520:	024b      	lsls	r3, r1, #9
 8002522:	4621      	mov	r1, r4
 8002524:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002528:	4621      	mov	r1, r4
 800252a:	024a      	lsls	r2, r1, #9
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002532:	2200      	movs	r2, #0
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
 8002536:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800253c:	f7fd fe6c 	bl	8000218 <__aeabi_uldivmod>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4613      	mov	r3, r2
 8002546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002548:	e058      	b.n	80025fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800254a:	4b38      	ldr	r3, [pc, #224]	; (800262c <HAL_RCC_GetSysClockFreq+0x200>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	099b      	lsrs	r3, r3, #6
 8002550:	2200      	movs	r2, #0
 8002552:	4618      	mov	r0, r3
 8002554:	4611      	mov	r1, r2
 8002556:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800255a:	623b      	str	r3, [r7, #32]
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
 8002560:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002564:	4642      	mov	r2, r8
 8002566:	464b      	mov	r3, r9
 8002568:	f04f 0000 	mov.w	r0, #0
 800256c:	f04f 0100 	mov.w	r1, #0
 8002570:	0159      	lsls	r1, r3, #5
 8002572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002576:	0150      	lsls	r0, r2, #5
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4641      	mov	r1, r8
 800257e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002582:	4649      	mov	r1, r9
 8002584:	eb63 0b01 	sbc.w	fp, r3, r1
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	f04f 0300 	mov.w	r3, #0
 8002590:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002594:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002598:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800259c:	ebb2 040a 	subs.w	r4, r2, sl
 80025a0:	eb63 050b 	sbc.w	r5, r3, fp
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	00eb      	lsls	r3, r5, #3
 80025ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025b2:	00e2      	lsls	r2, r4, #3
 80025b4:	4614      	mov	r4, r2
 80025b6:	461d      	mov	r5, r3
 80025b8:	4643      	mov	r3, r8
 80025ba:	18e3      	adds	r3, r4, r3
 80025bc:	603b      	str	r3, [r7, #0]
 80025be:	464b      	mov	r3, r9
 80025c0:	eb45 0303 	adc.w	r3, r5, r3
 80025c4:	607b      	str	r3, [r7, #4]
 80025c6:	f04f 0200 	mov.w	r2, #0
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025d2:	4629      	mov	r1, r5
 80025d4:	028b      	lsls	r3, r1, #10
 80025d6:	4621      	mov	r1, r4
 80025d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025dc:	4621      	mov	r1, r4
 80025de:	028a      	lsls	r2, r1, #10
 80025e0:	4610      	mov	r0, r2
 80025e2:	4619      	mov	r1, r3
 80025e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e6:	2200      	movs	r2, #0
 80025e8:	61bb      	str	r3, [r7, #24]
 80025ea:	61fa      	str	r2, [r7, #28]
 80025ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025f0:	f7fd fe12 	bl	8000218 <__aeabi_uldivmod>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4613      	mov	r3, r2
 80025fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <HAL_RCC_GetSysClockFreq+0x200>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	3301      	adds	r3, #1
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800260c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800260e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002610:	fbb2 f3f3 	udiv	r3, r2, r3
 8002614:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002616:	e002      	b.n	800261e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_GetSysClockFreq+0x204>)
 800261a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800261c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800261e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002620:	4618      	mov	r0, r3
 8002622:	3750      	adds	r7, #80	; 0x50
 8002624:	46bd      	mov	sp, r7
 8002626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	00f42400 	.word	0x00f42400
 8002634:	007a1200 	.word	0x007a1200

08002638 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_RCC_GetHCLKFreq+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000044 	.word	0x20000044

08002650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002654:	f7ff fff0 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b05      	ldr	r3, [pc, #20]	; (8002670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	0a9b      	lsrs	r3, r3, #10
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4903      	ldr	r1, [pc, #12]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40023800 	.word	0x40023800
 8002674:	080053b0 	.word	0x080053b0

08002678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800267c:	f7ff ffdc 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002680:	4602      	mov	r2, r0
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	0b5b      	lsrs	r3, r3, #13
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	4903      	ldr	r1, [pc, #12]	; (800269c <HAL_RCC_GetPCLK2Freq+0x24>)
 800268e:	5ccb      	ldrb	r3, [r1, r3]
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002694:	4618      	mov	r0, r3
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40023800 	.word	0x40023800
 800269c:	080053b0 	.word	0x080053b0

080026a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80026b8:	2300      	movs	r3, #0
 80026ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d012      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026c8:	4b69      	ldr	r3, [pc, #420]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	4a68      	ldr	r2, [pc, #416]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80026d2:	6093      	str	r3, [r2, #8]
 80026d4:	4b66      	ldr	r3, [pc, #408]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026dc:	4964      	ldr	r1, [pc, #400]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80026ea:	2301      	movs	r3, #1
 80026ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d017      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026fa:	4b5d      	ldr	r3, [pc, #372]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002700:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002708:	4959      	ldr	r1, [pc, #356]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002718:	d101      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002726:	2301      	movs	r3, #1
 8002728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d017      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002736:	4b4e      	ldr	r3, [pc, #312]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800273c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	494a      	ldr	r1, [pc, #296]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002754:	d101      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002756:	2301      	movs	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0320 	and.w	r3, r3, #32
 800277e:	2b00      	cmp	r3, #0
 8002780:	f000 808b 	beq.w	800289a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002784:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	4a39      	ldr	r2, [pc, #228]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278e:	6413      	str	r3, [r2, #64]	; 0x40
 8002790:	4b37      	ldr	r3, [pc, #220]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800279c:	4b35      	ldr	r3, [pc, #212]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a34      	ldr	r2, [pc, #208]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a8:	f7fe fed6 	bl	8001558 <HAL_GetTick>
 80027ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b0:	f7fe fed2 	bl	8001558 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	; 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e357      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027c2:	4b2c      	ldr	r3, [pc, #176]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ce:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d035      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d02e      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ec:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027f6:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a1d      	ldr	r2, [pc, #116]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a1a      	ldr	r2, [pc, #104]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800280e:	4a18      	ldr	r2, [pc, #96]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d114      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7fe fe9a 	bl	8001558 <HAL_GetTick>
 8002824:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	e00a      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe fe96 	bl	8001558 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	; 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e319      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283e:	4b0c      	ldr	r3, [pc, #48]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ee      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002856:	d111      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002864:	4b04      	ldr	r3, [pc, #16]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002866:	400b      	ands	r3, r1
 8002868:	4901      	ldr	r1, [pc, #4]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
 800286e:	e00b      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002870:	40023800 	.word	0x40023800
 8002874:	40007000 	.word	0x40007000
 8002878:	0ffffcff 	.word	0x0ffffcff
 800287c:	4baa      	ldr	r3, [pc, #680]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4aa9      	ldr	r2, [pc, #676]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002882:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002886:	6093      	str	r3, [r2, #8]
 8002888:	4ba7      	ldr	r3, [pc, #668]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800288a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002894:	49a4      	ldr	r1, [pc, #656]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002896:	4313      	orrs	r3, r2
 8002898:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80028a6:	4ba0      	ldr	r3, [pc, #640]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ac:	4a9e      	ldr	r2, [pc, #632]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028b6:	4b9c      	ldr	r3, [pc, #624]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	4999      	ldr	r1, [pc, #612]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028d4:	4b94      	ldr	r3, [pc, #592]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028e2:	4991      	ldr	r1, [pc, #580]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00a      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028f6:	4b8c      	ldr	r3, [pc, #560]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002904:	4988      	ldr	r1, [pc, #544]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002906:	4313      	orrs	r3, r2
 8002908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002918:	4b83      	ldr	r3, [pc, #524]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002926:	4980      	ldr	r1, [pc, #512]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00a      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800293a:	4b7b      	ldr	r3, [pc, #492]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002948:	4977      	ldr	r1, [pc, #476]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800294a:	4313      	orrs	r3, r2
 800294c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800295c:	4b72      	ldr	r3, [pc, #456]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800295e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002962:	f023 0203 	bic.w	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	496f      	ldr	r1, [pc, #444]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800297e:	4b6a      	ldr	r3, [pc, #424]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f023 020c 	bic.w	r2, r3, #12
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800298c:	4966      	ldr	r1, [pc, #408]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029a0:	4b61      	ldr	r3, [pc, #388]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ae:	495e      	ldr	r1, [pc, #376]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029c2:	4b59      	ldr	r3, [pc, #356]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	4955      	ldr	r1, [pc, #340]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029e4:	4b50      	ldr	r3, [pc, #320]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f2:	494d      	ldr	r1, [pc, #308]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a06:	4b48      	ldr	r3, [pc, #288]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a14:	4944      	ldr	r1, [pc, #272]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002a28:	4b3f      	ldr	r3, [pc, #252]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	493c      	ldr	r1, [pc, #240]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002a4a:	4b37      	ldr	r3, [pc, #220]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a58:	4933      	ldr	r1, [pc, #204]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a7a:	492b      	ldr	r1, [pc, #172]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d011      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a8e:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a9c:	4922      	ldr	r1, [pc, #136]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ace:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002adc:	4912      	ldr	r1, [pc, #72]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00b      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b00:	4909      	ldr	r1, [pc, #36]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d006      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80d9 	beq.w	8002cce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b1c:	4b02      	ldr	r3, [pc, #8]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a01      	ldr	r2, [pc, #4]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002b22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b26:	e001      	b.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2e:	f7fe fd13 	bl	8001558 <HAL_GetTick>
 8002b32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b36:	f7fe fd0f 	bl	8001558 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b64      	cmp	r3, #100	; 0x64
 8002b42:	d901      	bls.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e194      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b48:	4b6c      	ldr	r3, [pc, #432]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d021      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d11d      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b68:	4b64      	ldr	r3, [pc, #400]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b6e:	0c1b      	lsrs	r3, r3, #16
 8002b70:	f003 0303 	and.w	r3, r3, #3
 8002b74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b76:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7c:	0e1b      	lsrs	r3, r3, #24
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	019a      	lsls	r2, r3, #6
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	041b      	lsls	r3, r3, #16
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	061b      	lsls	r3, r3, #24
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	071b      	lsls	r3, r3, #28
 8002b9c:	4957      	ldr	r1, [pc, #348]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d004      	beq.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bb8:	d00a      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d02e      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bce:	d129      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bd0:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd6:	0c1b      	lsrs	r3, r3, #16
 8002bd8:	f003 0303 	and.w	r3, r3, #3
 8002bdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bde:	4b47      	ldr	r3, [pc, #284]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be4:	0f1b      	lsrs	r3, r3, #28
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	019a      	lsls	r2, r3, #6
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	041b      	lsls	r3, r3, #16
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	071b      	lsls	r3, r3, #28
 8002c04:	493d      	ldr	r1, [pc, #244]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c12:	f023 021f 	bic.w	r2, r3, #31
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	4937      	ldr	r1, [pc, #220]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d01d      	beq.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c30:	4b32      	ldr	r3, [pc, #200]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c36:	0e1b      	lsrs	r3, r3, #24
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c3e:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c44:	0f1b      	lsrs	r3, r3, #28
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	019a      	lsls	r2, r3, #6
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	041b      	lsls	r3, r3, #16
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	071b      	lsls	r3, r3, #28
 8002c64:	4925      	ldr	r1, [pc, #148]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d011      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	019a      	lsls	r2, r3, #6
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	041b      	lsls	r3, r3, #16
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	061b      	lsls	r3, r3, #24
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	071b      	lsls	r3, r3, #28
 8002c94:	4919      	ldr	r1, [pc, #100]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c9c:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ca2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca8:	f7fe fc56 	bl	8001558 <HAL_GetTick>
 8002cac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cb0:	f7fe fc52 	bl	8001558 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	; 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e0d7      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cc2:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	f040 80cd 	bne.w	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a08      	ldr	r2, [pc, #32]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce2:	f7fe fc39 	bl	8001558 <HAL_GetTick>
 8002ce6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ce8:	e00a      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cea:	f7fe fc35 	bl	8001558 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b64      	cmp	r3, #100	; 0x64
 8002cf6:	d903      	bls.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0ba      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002cfc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d00:	4b5e      	ldr	r3, [pc, #376]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d0c:	d0ed      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d003      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d02e      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d12a      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d36:	4b51      	ldr	r3, [pc, #324]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	0c1b      	lsrs	r3, r3, #16
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d44:	4b4d      	ldr	r3, [pc, #308]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4a:	0f1b      	lsrs	r3, r3, #28
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	019a      	lsls	r2, r3, #6
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	041b      	lsls	r3, r3, #16
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	061b      	lsls	r3, r3, #24
 8002d64:	431a      	orrs	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	071b      	lsls	r3, r3, #28
 8002d6a:	4944      	ldr	r1, [pc, #272]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d72:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d78:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	3b01      	subs	r3, #1
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	493d      	ldr	r1, [pc, #244]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d022      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da0:	d11d      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002da2:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da8:	0e1b      	lsrs	r3, r3, #24
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002db0:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	0f1b      	lsrs	r3, r3, #28
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	019a      	lsls	r2, r3, #6
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	061b      	lsls	r3, r3, #24
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	071b      	lsls	r3, r3, #28
 8002dd6:	4929      	ldr	r1, [pc, #164]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d028      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df0:	0e1b      	lsrs	r3, r3, #24
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002df8:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	0c1b      	lsrs	r3, r3, #16
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	019a      	lsls	r2, r3, #6
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	431a      	orrs	r2, r3
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	061b      	lsls	r3, r3, #24
 8002e16:	431a      	orrs	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	071b      	lsls	r3, r3, #28
 8002e1e:	4917      	ldr	r1, [pc, #92]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	4911      	ldr	r1, [pc, #68]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e48:	f7fe fb86 	bl	8001558 <HAL_GetTick>
 8002e4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e50:	f7fe fb82 	bl	8001558 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b64      	cmp	r3, #100	; 0x64
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e007      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e6e:	d1ef      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	40023800 	.word	0x40023800

08002e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e049      	b.n	8002f26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fe f9b6 	bl	8001218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2202      	movs	r2, #2
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4610      	mov	r0, r2
 8002ec0:	f000 fd5e 	bl	8003980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3708      	adds	r7, #8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d001      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e054      	b.n	8002ff2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a26      	ldr	r2, [pc, #152]	; (8003000 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d022      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x80>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d01d      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x80>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d018      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x80>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a21      	ldr	r2, [pc, #132]	; (8003008 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x80>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	; (800300c <HAL_TIM_Base_Start_IT+0xdc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00e      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x80>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_TIM_Base_Start_IT+0xe0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d009      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x80>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_TIM_Base_Start_IT+0xe4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d004      	beq.n	8002fb0 <HAL_TIM_Base_Start_IT+0x80>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <HAL_TIM_Base_Start_IT+0xe8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d115      	bne.n	8002fdc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	689a      	ldr	r2, [r3, #8]
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_TIM_Base_Start_IT+0xec>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b06      	cmp	r3, #6
 8002fc0:	d015      	beq.n	8002fee <HAL_TIM_Base_Start_IT+0xbe>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fc8:	d011      	beq.n	8002fee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0201 	orr.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fda:	e008      	b.n	8002fee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e000      	b.n	8002ff0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40010000 	.word	0x40010000
 8003004:	40000400 	.word	0x40000400
 8003008:	40000800 	.word	0x40000800
 800300c:	40000c00 	.word	0x40000c00
 8003010:	40010400 	.word	0x40010400
 8003014:	40014000 	.word	0x40014000
 8003018:	40001800 	.word	0x40001800
 800301c:	00010007 	.word	0x00010007

08003020 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 0201 	bic.w	r2, r2, #1
 8003036:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a1a      	ldr	r2, [r3, #32]
 800303e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003042:	4013      	ands	r3, r2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10f      	bne.n	8003068 <HAL_TIM_Base_Stop_IT+0x48>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	f240 4344 	movw	r3, #1092	; 0x444
 8003052:	4013      	ands	r3, r2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d107      	bne.n	8003068 <HAL_TIM_Base_Stop_IT+0x48>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e049      	b.n	8003124 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003096:	b2db      	uxtb	r3, r3
 8003098:	2b00      	cmp	r3, #0
 800309a:	d106      	bne.n	80030aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f841 	bl	800312c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3304      	adds	r3, #4
 80030ba:	4619      	mov	r1, r3
 80030bc:	4610      	mov	r0, r2
 80030be:	f000 fc5f 	bl	8003980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2201      	movs	r2, #1
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2201      	movs	r2, #1
 80030ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2201      	movs	r2, #1
 8003116:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3708      	adds	r7, #8
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d109      	bne.n	8003164 <HAL_TIM_PWM_Start+0x24>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b01      	cmp	r3, #1
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	e03c      	b.n	80031de <HAL_TIM_PWM_Start+0x9e>
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b04      	cmp	r3, #4
 8003168:	d109      	bne.n	800317e <HAL_TIM_PWM_Start+0x3e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b01      	cmp	r3, #1
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	e02f      	b.n	80031de <HAL_TIM_PWM_Start+0x9e>
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b08      	cmp	r3, #8
 8003182:	d109      	bne.n	8003198 <HAL_TIM_PWM_Start+0x58>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	bf14      	ite	ne
 8003190:	2301      	movne	r3, #1
 8003192:	2300      	moveq	r3, #0
 8003194:	b2db      	uxtb	r3, r3
 8003196:	e022      	b.n	80031de <HAL_TIM_PWM_Start+0x9e>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d109      	bne.n	80031b2 <HAL_TIM_PWM_Start+0x72>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	bf14      	ite	ne
 80031aa:	2301      	movne	r3, #1
 80031ac:	2300      	moveq	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	e015      	b.n	80031de <HAL_TIM_PWM_Start+0x9e>
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d109      	bne.n	80031cc <HAL_TIM_PWM_Start+0x8c>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	bf14      	ite	ne
 80031c4:	2301      	movne	r3, #1
 80031c6:	2300      	moveq	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e008      	b.n	80031de <HAL_TIM_PWM_Start+0x9e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e092      	b.n	800330c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <HAL_TIM_PWM_Start+0xb6>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031f4:	e023      	b.n	800323e <HAL_TIM_PWM_Start+0xfe>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d104      	bne.n	8003206 <HAL_TIM_PWM_Start+0xc6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003204:	e01b      	b.n	800323e <HAL_TIM_PWM_Start+0xfe>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d104      	bne.n	8003216 <HAL_TIM_PWM_Start+0xd6>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003214:	e013      	b.n	800323e <HAL_TIM_PWM_Start+0xfe>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b0c      	cmp	r3, #12
 800321a:	d104      	bne.n	8003226 <HAL_TIM_PWM_Start+0xe6>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003224:	e00b      	b.n	800323e <HAL_TIM_PWM_Start+0xfe>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b10      	cmp	r3, #16
 800322a:	d104      	bne.n	8003236 <HAL_TIM_PWM_Start+0xf6>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003234:	e003      	b.n	800323e <HAL_TIM_PWM_Start+0xfe>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2201      	movs	r2, #1
 8003244:	6839      	ldr	r1, [r7, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 ff32 	bl	80040b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a30      	ldr	r2, [pc, #192]	; (8003314 <HAL_TIM_PWM_Start+0x1d4>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d004      	beq.n	8003260 <HAL_TIM_PWM_Start+0x120>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2f      	ldr	r2, [pc, #188]	; (8003318 <HAL_TIM_PWM_Start+0x1d8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_TIM_PWM_Start+0x124>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_TIM_PWM_Start+0x126>
 8003264:	2300      	movs	r3, #0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003278:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a25      	ldr	r2, [pc, #148]	; (8003314 <HAL_TIM_PWM_Start+0x1d4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d022      	beq.n	80032ca <HAL_TIM_PWM_Start+0x18a>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328c:	d01d      	beq.n	80032ca <HAL_TIM_PWM_Start+0x18a>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a22      	ldr	r2, [pc, #136]	; (800331c <HAL_TIM_PWM_Start+0x1dc>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d018      	beq.n	80032ca <HAL_TIM_PWM_Start+0x18a>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a20      	ldr	r2, [pc, #128]	; (8003320 <HAL_TIM_PWM_Start+0x1e0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_TIM_PWM_Start+0x18a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <HAL_TIM_PWM_Start+0x1e4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00e      	beq.n	80032ca <HAL_TIM_PWM_Start+0x18a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <HAL_TIM_PWM_Start+0x1d8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d009      	beq.n	80032ca <HAL_TIM_PWM_Start+0x18a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_TIM_PWM_Start+0x1e8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d004      	beq.n	80032ca <HAL_TIM_PWM_Start+0x18a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a19      	ldr	r2, [pc, #100]	; (800332c <HAL_TIM_PWM_Start+0x1ec>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d115      	bne.n	80032f6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	4b17      	ldr	r3, [pc, #92]	; (8003330 <HAL_TIM_PWM_Start+0x1f0>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d015      	beq.n	8003308 <HAL_TIM_PWM_Start+0x1c8>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d011      	beq.n	8003308 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	e008      	b.n	8003308 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e000      	b.n	800330a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003308:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40010000 	.word	0x40010000
 8003318:	40010400 	.word	0x40010400
 800331c:	40000400 	.word	0x40000400
 8003320:	40000800 	.word	0x40000800
 8003324:	40000c00 	.word	0x40000c00
 8003328:	40014000 	.word	0x40014000
 800332c:	40001800 	.word	0x40001800
 8003330:	00010007 	.word	0x00010007

08003334 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b02      	cmp	r3, #2
 8003348:	d122      	bne.n	8003390 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b02      	cmp	r3, #2
 8003356:	d11b      	bne.n	8003390 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0202 	mvn.w	r2, #2
 8003360:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 fae4 	bl	8003944 <HAL_TIM_IC_CaptureCallback>
 800337c:	e005      	b.n	800338a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 fad6 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 fae7 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b04      	cmp	r3, #4
 800339c:	d122      	bne.n	80033e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d11b      	bne.n	80033e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0204 	mvn.w	r2, #4
 80033b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2202      	movs	r2, #2
 80033ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 faba 	bl	8003944 <HAL_TIM_IC_CaptureCallback>
 80033d0:	e005      	b.n	80033de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 faac 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 fabd 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d122      	bne.n	8003438 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d11b      	bne.n	8003438 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0208 	mvn.w	r2, #8
 8003408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2204      	movs	r2, #4
 800340e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fa90 	bl	8003944 <HAL_TIM_IC_CaptureCallback>
 8003424:	e005      	b.n	8003432 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 fa82 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 fa93 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	2b10      	cmp	r3, #16
 8003444:	d122      	bne.n	800348c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	f003 0310 	and.w	r3, r3, #16
 8003450:	2b10      	cmp	r3, #16
 8003452:	d11b      	bne.n	800348c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0210 	mvn.w	r2, #16
 800345c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2208      	movs	r2, #8
 8003462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fa66 	bl	8003944 <HAL_TIM_IC_CaptureCallback>
 8003478:	e005      	b.n	8003486 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 fa58 	bl	8003930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fa69 	bl	8003958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d10e      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d107      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f06f 0201 	mvn.w	r2, #1
 80034b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fd f9dc 	bl	8000870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c2:	2b80      	cmp	r3, #128	; 0x80
 80034c4:	d10e      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b80      	cmp	r3, #128	; 0x80
 80034d2:	d107      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fea4 	bl	800422c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f2:	d10e      	bne.n	8003512 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fe:	2b80      	cmp	r3, #128	; 0x80
 8003500:	d107      	bne.n	8003512 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800350a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 fe97 	bl	8004240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351c:	2b40      	cmp	r3, #64	; 0x40
 800351e:	d10e      	bne.n	800353e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	2b40      	cmp	r3, #64	; 0x40
 800352c:	d107      	bne.n	800353e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fa17 	bl	800396c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b20      	cmp	r3, #32
 800354a:	d10e      	bne.n	800356a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b20      	cmp	r3, #32
 8003558:	d107      	bne.n	800356a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f06f 0220 	mvn.w	r2, #32
 8003562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fe57 	bl	8004218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
	...

08003574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800358e:	2302      	movs	r3, #2
 8003590:	e0ff      	b.n	8003792 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b14      	cmp	r3, #20
 800359e:	f200 80f0 	bhi.w	8003782 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035a2:	a201      	add	r2, pc, #4	; (adr r2, 80035a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a8:	080035fd 	.word	0x080035fd
 80035ac:	08003783 	.word	0x08003783
 80035b0:	08003783 	.word	0x08003783
 80035b4:	08003783 	.word	0x08003783
 80035b8:	0800363d 	.word	0x0800363d
 80035bc:	08003783 	.word	0x08003783
 80035c0:	08003783 	.word	0x08003783
 80035c4:	08003783 	.word	0x08003783
 80035c8:	0800367f 	.word	0x0800367f
 80035cc:	08003783 	.word	0x08003783
 80035d0:	08003783 	.word	0x08003783
 80035d4:	08003783 	.word	0x08003783
 80035d8:	080036bf 	.word	0x080036bf
 80035dc:	08003783 	.word	0x08003783
 80035e0:	08003783 	.word	0x08003783
 80035e4:	08003783 	.word	0x08003783
 80035e8:	08003701 	.word	0x08003701
 80035ec:	08003783 	.word	0x08003783
 80035f0:	08003783 	.word	0x08003783
 80035f4:	08003783 	.word	0x08003783
 80035f8:	08003741 	.word	0x08003741
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68b9      	ldr	r1, [r7, #8]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fa5c 	bl	8003ac0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0208 	orr.w	r2, r2, #8
 8003616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0204 	bic.w	r2, r2, #4
 8003626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6999      	ldr	r1, [r3, #24]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	619a      	str	r2, [r3, #24]
      break;
 800363a:	e0a5      	b.n	8003788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 faae 	bl	8003ba4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699a      	ldr	r2, [r3, #24]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6999      	ldr	r1, [r3, #24]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	021a      	lsls	r2, r3, #8
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	619a      	str	r2, [r3, #24]
      break;
 800367c:	e084      	b.n	8003788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	4618      	mov	r0, r3
 8003686:	f000 fb05 	bl	8003c94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f042 0208 	orr.w	r2, r2, #8
 8003698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0204 	bic.w	r2, r2, #4
 80036a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	69d9      	ldr	r1, [r3, #28]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	61da      	str	r2, [r3, #28]
      break;
 80036bc:	e064      	b.n	8003788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68b9      	ldr	r1, [r7, #8]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 fb5b 	bl	8003d80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	69d9      	ldr	r1, [r3, #28]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	021a      	lsls	r2, r3, #8
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	61da      	str	r2, [r3, #28]
      break;
 80036fe:	e043      	b.n	8003788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	4618      	mov	r0, r3
 8003708:	f000 fb92 	bl	8003e30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f042 0208 	orr.w	r2, r2, #8
 800371a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0204 	bic.w	r2, r2, #4
 800372a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800373e:	e023      	b.n	8003788 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	4618      	mov	r0, r3
 8003748:	f000 fbc4 	bl	8003ed4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800375a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800376a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	021a      	lsls	r2, r3, #8
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003780:	e002      	b.n	8003788 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
      break;
 8003786:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003790:	7dfb      	ldrb	r3, [r7, #23]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop

0800379c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_TIM_ConfigClockSource+0x1c>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e0b4      	b.n	8003922 <HAL_TIM_ConfigClockSource+0x186>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2202      	movs	r2, #2
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	4b56      	ldr	r3, [pc, #344]	; (800392c <HAL_TIM_ConfigClockSource+0x190>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f0:	d03e      	beq.n	8003870 <HAL_TIM_ConfigClockSource+0xd4>
 80037f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037f6:	f200 8087 	bhi.w	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 80037fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037fe:	f000 8086 	beq.w	800390e <HAL_TIM_ConfigClockSource+0x172>
 8003802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003806:	d87f      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003808:	2b70      	cmp	r3, #112	; 0x70
 800380a:	d01a      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0xa6>
 800380c:	2b70      	cmp	r3, #112	; 0x70
 800380e:	d87b      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b60      	cmp	r3, #96	; 0x60
 8003812:	d050      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003814:	2b60      	cmp	r3, #96	; 0x60
 8003816:	d877      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003818:	2b50      	cmp	r3, #80	; 0x50
 800381a:	d03c      	beq.n	8003896 <HAL_TIM_ConfigClockSource+0xfa>
 800381c:	2b50      	cmp	r3, #80	; 0x50
 800381e:	d873      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b40      	cmp	r3, #64	; 0x40
 8003822:	d058      	beq.n	80038d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003824:	2b40      	cmp	r3, #64	; 0x40
 8003826:	d86f      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b30      	cmp	r3, #48	; 0x30
 800382a:	d064      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 800382c:	2b30      	cmp	r3, #48	; 0x30
 800382e:	d86b      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b20      	cmp	r3, #32
 8003832:	d060      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003834:	2b20      	cmp	r3, #32
 8003836:	d867      	bhi.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d05c      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 800383c:	2b10      	cmp	r3, #16
 800383e:	d05a      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003840:	e062      	b.n	8003908 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003852:	f000 fc0d 	bl	8004070 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	609a      	str	r2, [r3, #8]
      break;
 800386e:	e04f      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003880:	f000 fbf6 	bl	8004070 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003892:	609a      	str	r2, [r3, #8]
      break;
 8003894:	e03c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	461a      	mov	r2, r3
 80038a4:	f000 fb6a 	bl	8003f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2150      	movs	r1, #80	; 0x50
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fbc3 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 80038b4:	e02c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c2:	461a      	mov	r2, r3
 80038c4:	f000 fb89 	bl	8003fda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2160      	movs	r1, #96	; 0x60
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fbb3 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 80038d4:	e01c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e2:	461a      	mov	r2, r3
 80038e4:	f000 fb4a 	bl	8003f7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2140      	movs	r1, #64	; 0x40
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fba3 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 80038f4:	e00c      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	4610      	mov	r0, r2
 8003902:	f000 fb9a 	bl	800403a <TIM_ITRx_SetConfig>
      break;
 8003906:	e003      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	73fb      	strb	r3, [r7, #15]
      break;
 800390c:	e000      	b.n	8003910 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800390e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	fffeff88 	.word	0xfffeff88

08003930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a40      	ldr	r2, [pc, #256]	; (8003a94 <TIM_Base_SetConfig+0x114>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800399e:	d00f      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a3d      	ldr	r2, [pc, #244]	; (8003a98 <TIM_Base_SetConfig+0x118>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d00b      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a3c      	ldr	r2, [pc, #240]	; (8003a9c <TIM_Base_SetConfig+0x11c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3b      	ldr	r2, [pc, #236]	; (8003aa0 <TIM_Base_SetConfig+0x120>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_Base_SetConfig+0x40>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <TIM_Base_SetConfig+0x124>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	68fa      	ldr	r2, [r7, #12]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2f      	ldr	r2, [pc, #188]	; (8003a94 <TIM_Base_SetConfig+0x114>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d02b      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039e0:	d027      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2c      	ldr	r2, [pc, #176]	; (8003a98 <TIM_Base_SetConfig+0x118>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d023      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <TIM_Base_SetConfig+0x11c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01f      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2a      	ldr	r2, [pc, #168]	; (8003aa0 <TIM_Base_SetConfig+0x120>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d01b      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <TIM_Base_SetConfig+0x124>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d017      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a28      	ldr	r2, [pc, #160]	; (8003aa8 <TIM_Base_SetConfig+0x128>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d013      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a27      	ldr	r2, [pc, #156]	; (8003aac <TIM_Base_SetConfig+0x12c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00f      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a26      	ldr	r2, [pc, #152]	; (8003ab0 <TIM_Base_SetConfig+0x130>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00b      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a25      	ldr	r2, [pc, #148]	; (8003ab4 <TIM_Base_SetConfig+0x134>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d007      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a24      	ldr	r2, [pc, #144]	; (8003ab8 <TIM_Base_SetConfig+0x138>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d003      	beq.n	8003a32 <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a23      	ldr	r2, [pc, #140]	; (8003abc <TIM_Base_SetConfig+0x13c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d108      	bne.n	8003a44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <TIM_Base_SetConfig+0x114>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d003      	beq.n	8003a78 <TIM_Base_SetConfig+0xf8>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <TIM_Base_SetConfig+0x124>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d103      	bne.n	8003a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	615a      	str	r2, [r3, #20]
}
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40010000 	.word	0x40010000
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800
 8003aa0:	40000c00 	.word	0x40000c00
 8003aa4:	40010400 	.word	0x40010400
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40014400 	.word	0x40014400
 8003ab0:	40014800 	.word	0x40014800
 8003ab4:	40001800 	.word	0x40001800
 8003ab8:	40001c00 	.word	0x40001c00
 8003abc:	40002000 	.word	0x40002000

08003ac0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b087      	sub	sp, #28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f023 0201 	bic.w	r2, r3, #1
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <TIM_OC1_SetConfig+0xd8>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0303 	bic.w	r3, r3, #3
 8003af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f023 0302 	bic.w	r3, r3, #2
 8003b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a21      	ldr	r2, [pc, #132]	; (8003b9c <TIM_OC1_SetConfig+0xdc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_OC1_SetConfig+0x64>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a20      	ldr	r2, [pc, #128]	; (8003ba0 <TIM_OC1_SetConfig+0xe0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d10c      	bne.n	8003b3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0308 	bic.w	r3, r3, #8
 8003b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a16      	ldr	r2, [pc, #88]	; (8003b9c <TIM_OC1_SetConfig+0xdc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d003      	beq.n	8003b4e <TIM_OC1_SetConfig+0x8e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a15      	ldr	r2, [pc, #84]	; (8003ba0 <TIM_OC1_SetConfig+0xe0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d111      	bne.n	8003b72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	621a      	str	r2, [r3, #32]
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	fffeff8f 	.word	0xfffeff8f
 8003b9c:	40010000 	.word	0x40010000
 8003ba0:	40010400 	.word	0x40010400

08003ba4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	f023 0210 	bic.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4b2e      	ldr	r3, [pc, #184]	; (8003c88 <TIM_OC2_SetConfig+0xe4>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	021b      	lsls	r3, r3, #8
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f023 0320 	bic.w	r3, r3, #32
 8003bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <TIM_OC2_SetConfig+0xe8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <TIM_OC2_SetConfig+0x68>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a22      	ldr	r2, [pc, #136]	; (8003c90 <TIM_OC2_SetConfig+0xec>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d10d      	bne.n	8003c28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a18      	ldr	r2, [pc, #96]	; (8003c8c <TIM_OC2_SetConfig+0xe8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_OC2_SetConfig+0x94>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <TIM_OC2_SetConfig+0xec>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d113      	bne.n	8003c60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	621a      	str	r2, [r3, #32]
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	feff8fff 	.word	0xfeff8fff
 8003c8c:	40010000 	.word	0x40010000
 8003c90:	40010400 	.word	0x40010400

08003c94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4b2d      	ldr	r3, [pc, #180]	; (8003d74 <TIM_OC3_SetConfig+0xe0>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0303 	bic.w	r3, r3, #3
 8003cca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <TIM_OC3_SetConfig+0xe4>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_OC3_SetConfig+0x66>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <TIM_OC3_SetConfig+0xe8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10d      	bne.n	8003d16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a17      	ldr	r2, [pc, #92]	; (8003d78 <TIM_OC3_SetConfig+0xe4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_OC3_SetConfig+0x92>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <TIM_OC3_SetConfig+0xe8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d113      	bne.n	8003d4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	011b      	lsls	r3, r3, #4
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	621a      	str	r2, [r3, #32]
}
 8003d68:	bf00      	nop
 8003d6a:	371c      	adds	r7, #28
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	fffeff8f 	.word	0xfffeff8f
 8003d78:	40010000 	.word	0x40010000
 8003d7c:	40010400 	.word	0x40010400

08003d80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6a1b      	ldr	r3, [r3, #32]
 8003d9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <TIM_OC4_SetConfig+0xa4>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	021b      	lsls	r3, r3, #8
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	031b      	lsls	r3, r3, #12
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <TIM_OC4_SetConfig+0xa8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d003      	beq.n	8003de8 <TIM_OC4_SetConfig+0x68>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <TIM_OC4_SetConfig+0xac>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d109      	bne.n	8003dfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	019b      	lsls	r3, r3, #6
 8003df6:	697a      	ldr	r2, [r7, #20]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	697a      	ldr	r2, [r7, #20]
 8003e00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	621a      	str	r2, [r3, #32]
}
 8003e16:	bf00      	nop
 8003e18:	371c      	adds	r7, #28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	feff8fff 	.word	0xfeff8fff
 8003e28:	40010000 	.word	0x40010000
 8003e2c:	40010400 	.word	0x40010400

08003e30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4b1b      	ldr	r3, [pc, #108]	; (8003ec8 <TIM_OC5_SetConfig+0x98>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	041b      	lsls	r3, r3, #16
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <TIM_OC5_SetConfig+0x9c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d003      	beq.n	8003e8e <TIM_OC5_SetConfig+0x5e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a11      	ldr	r2, [pc, #68]	; (8003ed0 <TIM_OC5_SetConfig+0xa0>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d109      	bne.n	8003ea2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	021b      	lsls	r3, r3, #8
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	fffeff8f 	.word	0xfffeff8f
 8003ecc:	40010000 	.word	0x40010000
 8003ed0:	40010400 	.word	0x40010400

08003ed4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4b1c      	ldr	r3, [pc, #112]	; (8003f70 <TIM_OC6_SetConfig+0x9c>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	021b      	lsls	r3, r3, #8
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	051b      	lsls	r3, r3, #20
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a13      	ldr	r2, [pc, #76]	; (8003f74 <TIM_OC6_SetConfig+0xa0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_OC6_SetConfig+0x60>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a12      	ldr	r2, [pc, #72]	; (8003f78 <TIM_OC6_SetConfig+0xa4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d109      	bne.n	8003f48 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	029b      	lsls	r3, r3, #10
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	621a      	str	r2, [r3, #32]
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	feff8fff 	.word	0xfeff8fff
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40010400 	.word	0x40010400

08003f7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f023 0201 	bic.w	r2, r3, #1
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	011b      	lsls	r3, r3, #4
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f023 030a 	bic.w	r3, r3, #10
 8003fb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	621a      	str	r2, [r3, #32]
}
 8003fce:	bf00      	nop
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr

08003fda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b087      	sub	sp, #28
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f023 0210 	bic.w	r2, r3, #16
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004004:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	031b      	lsls	r3, r3, #12
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004016:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	4313      	orrs	r3, r2
 8004020:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004050:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	f043 0307 	orr.w	r3, r3, #7
 800405c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	609a      	str	r2, [r3, #8]
}
 8004064:	bf00      	nop
 8004066:	3714      	adds	r7, #20
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800408a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	021a      	lsls	r2, r3, #8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	431a      	orrs	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	4313      	orrs	r3, r2
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bf00      	nop
 80040a6:	371c      	adds	r7, #28
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2201      	movs	r2, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6a1a      	ldr	r2, [r3, #32]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	401a      	ands	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6a1a      	ldr	r2, [r3, #32]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 031f 	and.w	r3, r3, #31
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	fa01 f303 	lsl.w	r3, r1, r3
 80040e8:	431a      	orrs	r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	621a      	str	r2, [r3, #32]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004110:	2302      	movs	r3, #2
 8004112:	e06d      	b.n	80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a30      	ldr	r2, [pc, #192]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d004      	beq.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800414e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004160:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a20      	ldr	r2, [pc, #128]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d022      	beq.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004186:	d01d      	beq.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d018      	beq.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a1c      	ldr	r2, [pc, #112]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d013      	beq.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1a      	ldr	r2, [pc, #104]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d00e      	beq.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a15      	ldr	r2, [pc, #84]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d009      	beq.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a16      	ldr	r2, [pc, #88]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d004      	beq.n	80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a15      	ldr	r2, [pc, #84]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d10c      	bne.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	40010000 	.word	0x40010000
 8004200:	40010400 	.word	0x40010400
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40014000 	.word	0x40014000
 8004214:	40001800 	.word	0x40001800

08004218 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e040      	b.n	80042e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd f88c 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0201 	bic.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 fba2 	bl	80049dc <UART_SetConfig>
 8004298:	4603      	mov	r3, r0
 800429a:	2b01      	cmp	r3, #1
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e022      	b.n	80042e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 fdfa 	bl	8004ea4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f042 0201 	orr.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fe81 	bl	8004fe8 <UART_CheckIdleState>
 80042e6:	4603      	mov	r3, r0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004304:	2b20      	cmp	r3, #32
 8004306:	d171      	bne.n	80043ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <HAL_UART_Transmit+0x24>
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e06a      	b.n	80043ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2221      	movs	r2, #33	; 0x21
 8004324:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004326:	f7fd f917 	bl	8001558 <HAL_GetTick>
 800432a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004344:	d108      	bne.n	8004358 <HAL_UART_Transmit+0x68>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d104      	bne.n	8004358 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800434e:	2300      	movs	r3, #0
 8004350:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	61bb      	str	r3, [r7, #24]
 8004356:	e003      	b.n	8004360 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004360:	e02c      	b.n	80043bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	2180      	movs	r1, #128	; 0x80
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fe72 	bl	8005056 <UART_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e038      	b.n	80043ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d10b      	bne.n	800439a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004390:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	3302      	adds	r3, #2
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	e007      	b.n	80043aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	781a      	ldrb	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	3301      	adds	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1cc      	bne.n	8004362 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2200      	movs	r2, #0
 80043d0:	2140      	movs	r1, #64	; 0x40
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fe3f 	bl	8005056 <UART_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e005      	b.n	80043ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	e000      	b.n	80043ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80043ec:	2302      	movs	r3, #2
  }
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b0ba      	sub	sp, #232	; 0xe8
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	69db      	ldr	r3, [r3, #28]
 8004406:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800441e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004422:	f640 030f 	movw	r3, #2063	; 0x80f
 8004426:	4013      	ands	r3, r2
 8004428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800442c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d115      	bne.n	8004460 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004438:	f003 0320 	and.w	r3, r3, #32
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00f      	beq.n	8004460 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8297 	beq.w	8004984 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
      }
      return;
 800445e:	e291      	b.n	8004984 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004460:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004464:	2b00      	cmp	r3, #0
 8004466:	f000 8117 	beq.w	8004698 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800446a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004476:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800447a:	4b85      	ldr	r3, [pc, #532]	; (8004690 <HAL_UART_IRQHandler+0x298>)
 800447c:	4013      	ands	r3, r2
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 810a 	beq.w	8004698 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004488:	f003 0301 	and.w	r3, r3, #1
 800448c:	2b00      	cmp	r3, #0
 800448e:	d011      	beq.n	80044b4 <HAL_UART_IRQHandler+0xbc>
 8004490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2201      	movs	r2, #1
 80044a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d011      	beq.n	80044e4 <HAL_UART_IRQHandler+0xec>
 80044c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00b      	beq.n	80044e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2202      	movs	r2, #2
 80044d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044da:	f043 0204 	orr.w	r2, r3, #4
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d011      	beq.n	8004514 <HAL_UART_IRQHandler+0x11c>
 80044f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00b      	beq.n	8004514 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2204      	movs	r2, #4
 8004502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450a:	f043 0202 	orr.w	r2, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004514:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004518:	f003 0308 	and.w	r3, r3, #8
 800451c:	2b00      	cmp	r3, #0
 800451e:	d017      	beq.n	8004550 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004520:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800452c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004530:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00b      	beq.n	8004550 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2208      	movs	r2, #8
 800453e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004546:	f043 0208 	orr.w	r2, r3, #8
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004558:	2b00      	cmp	r3, #0
 800455a:	d012      	beq.n	8004582 <HAL_UART_IRQHandler+0x18a>
 800455c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004560:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00c      	beq.n	8004582 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004570:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004578:	f043 0220 	orr.w	r2, r3, #32
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 81fd 	beq.w	8004988 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800458e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800459a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d007      	beq.n	80045b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ca:	2b40      	cmp	r3, #64	; 0x40
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80045d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d04f      	beq.n	800467a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fe01 	bl	80051e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b40      	cmp	r3, #64	; 0x40
 80045ec:	d141      	bne.n	8004672 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	3308      	adds	r3, #8
 80045f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004604:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800460c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	3308      	adds	r3, #8
 8004616:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800461a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800461e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004622:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004626:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800462a:	e841 2300 	strex	r3, r2, [r1]
 800462e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004632:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1d9      	bne.n	80045ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800463e:	2b00      	cmp	r3, #0
 8004640:	d013      	beq.n	800466a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004646:	4a13      	ldr	r2, [pc, #76]	; (8004694 <HAL_UART_IRQHandler+0x29c>)
 8004648:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd f933 	bl	80018ba <HAL_DMA_Abort_IT>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d017      	beq.n	800468a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800465e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004664:	4610      	mov	r0, r2
 8004666:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004668:	e00f      	b.n	800468a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 f9a0 	bl	80049b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	e00b      	b.n	800468a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f99c 	bl	80049b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004678:	e007      	b.n	800468a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f998 	bl	80049b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004688:	e17e      	b.n	8004988 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800468a:	bf00      	nop
    return;
 800468c:	e17c      	b.n	8004988 <HAL_UART_IRQHandler+0x590>
 800468e:	bf00      	nop
 8004690:	04000120 	.word	0x04000120
 8004694:	080052ab 	.word	0x080052ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469c:	2b01      	cmp	r3, #1
 800469e:	f040 814c 	bne.w	800493a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	f000 8145 	beq.w	800493a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	f000 813e 	beq.w	800493a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2210      	movs	r2, #16
 80046c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d0:	2b40      	cmp	r3, #64	; 0x40
 80046d2:	f040 80b6 	bne.w	8004842 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 8150 	beq.w	800498c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046f6:	429a      	cmp	r2, r3
 80046f8:	f080 8148 	bcs.w	800498c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004702:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800470a:	69db      	ldr	r3, [r3, #28]
 800470c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004710:	f000 8086 	beq.w	8004820 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800472c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004730:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800473e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004742:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800474a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1da      	bne.n	8004714 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3308      	adds	r3, #8
 8004764:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800476e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3308      	adds	r3, #8
 800477e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004782:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004786:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800478a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004794:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e1      	bne.n	800475e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3308      	adds	r3, #8
 80047a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3308      	adds	r3, #8
 80047ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80047c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80047cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e3      	bne.n	800479a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f0:	f023 0310 	bic.w	r3, r3, #16
 80047f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004802:	65bb      	str	r3, [r7, #88]	; 0x58
 8004804:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004808:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e4      	bne.n	80047e0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc ffdd 	bl	80017da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004832:	b29b      	uxth	r3, r3
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	b29b      	uxth	r3, r3
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f8c2 	bl	80049c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004840:	e0a4      	b.n	800498c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800484e:	b29b      	uxth	r3, r3
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8096 	beq.w	8004990 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004864:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 8091 	beq.w	8004990 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004876:	e853 3f00 	ldrex	r3, [r3]
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800487c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004882:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	461a      	mov	r2, r3
 800488c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004890:	647b      	str	r3, [r7, #68]	; 0x44
 8004892:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004896:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800489e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e4      	bne.n	800486e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3308      	adds	r3, #8
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	623b      	str	r3, [r7, #32]
   return(result);
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	3308      	adds	r3, #8
 80048c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80048c8:	633a      	str	r2, [r7, #48]	; 0x30
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e3      	bne.n	80048a4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	e853 3f00 	ldrex	r3, [r3]
 80048fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f023 0310 	bic.w	r3, r3, #16
 8004904:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	461a      	mov	r2, r3
 800490e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004912:	61fb      	str	r3, [r7, #28]
 8004914:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004916:	69b9      	ldr	r1, [r7, #24]
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	e841 2300 	strex	r3, r2, [r1]
 800491e:	617b      	str	r3, [r7, #20]
   return(result);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e4      	bne.n	80048f0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800492c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004930:	4619      	mov	r1, r3
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f846 	bl	80049c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004938:	e02a      	b.n	8004990 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00e      	beq.n	8004964 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01c      	beq.n	8004994 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
    }
    return;
 8004962:	e017      	b.n	8004994 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d012      	beq.n	8004996 <HAL_UART_IRQHandler+0x59e>
 8004970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00c      	beq.n	8004996 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fcaa 	bl	80052d6 <UART_EndTransmit_IT>
    return;
 8004982:	e008      	b.n	8004996 <HAL_UART_IRQHandler+0x59e>
      return;
 8004984:	bf00      	nop
 8004986:	e006      	b.n	8004996 <HAL_UART_IRQHandler+0x59e>
    return;
 8004988:	bf00      	nop
 800498a:	e004      	b.n	8004996 <HAL_UART_IRQHandler+0x59e>
      return;
 800498c:	bf00      	nop
 800498e:	e002      	b.n	8004996 <HAL_UART_IRQHandler+0x59e>
      return;
 8004990:	bf00      	nop
 8004992:	e000      	b.n	8004996 <HAL_UART_IRQHandler+0x59e>
    return;
 8004994:	bf00      	nop
  }

}
 8004996:	37e8      	adds	r7, #232	; 0xe8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689a      	ldr	r2, [r3, #8]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4ba6      	ldr	r3, [pc, #664]	; (8004ca0 <UART_SetConfig+0x2c4>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	6979      	ldr	r1, [r7, #20]
 8004a10:	430b      	orrs	r3, r1
 8004a12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a94      	ldr	r2, [pc, #592]	; (8004ca4 <UART_SetConfig+0x2c8>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d120      	bne.n	8004a9a <UART_SetConfig+0xbe>
 8004a58:	4b93      	ldr	r3, [pc, #588]	; (8004ca8 <UART_SetConfig+0x2cc>)
 8004a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d816      	bhi.n	8004a94 <UART_SetConfig+0xb8>
 8004a66:	a201      	add	r2, pc, #4	; (adr r2, 8004a6c <UART_SetConfig+0x90>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a7d 	.word	0x08004a7d
 8004a70:	08004a89 	.word	0x08004a89
 8004a74:	08004a83 	.word	0x08004a83
 8004a78:	08004a8f 	.word	0x08004a8f
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e150      	b.n	8004d24 <UART_SetConfig+0x348>
 8004a82:	2302      	movs	r3, #2
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e14d      	b.n	8004d24 <UART_SetConfig+0x348>
 8004a88:	2304      	movs	r3, #4
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	e14a      	b.n	8004d24 <UART_SetConfig+0x348>
 8004a8e:	2308      	movs	r3, #8
 8004a90:	77fb      	strb	r3, [r7, #31]
 8004a92:	e147      	b.n	8004d24 <UART_SetConfig+0x348>
 8004a94:	2310      	movs	r3, #16
 8004a96:	77fb      	strb	r3, [r7, #31]
 8004a98:	e144      	b.n	8004d24 <UART_SetConfig+0x348>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a83      	ldr	r2, [pc, #524]	; (8004cac <UART_SetConfig+0x2d0>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d132      	bne.n	8004b0a <UART_SetConfig+0x12e>
 8004aa4:	4b80      	ldr	r3, [pc, #512]	; (8004ca8 <UART_SetConfig+0x2cc>)
 8004aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d828      	bhi.n	8004b04 <UART_SetConfig+0x128>
 8004ab2:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <UART_SetConfig+0xdc>)
 8004ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab8:	08004aed 	.word	0x08004aed
 8004abc:	08004b05 	.word	0x08004b05
 8004ac0:	08004b05 	.word	0x08004b05
 8004ac4:	08004b05 	.word	0x08004b05
 8004ac8:	08004af9 	.word	0x08004af9
 8004acc:	08004b05 	.word	0x08004b05
 8004ad0:	08004b05 	.word	0x08004b05
 8004ad4:	08004b05 	.word	0x08004b05
 8004ad8:	08004af3 	.word	0x08004af3
 8004adc:	08004b05 	.word	0x08004b05
 8004ae0:	08004b05 	.word	0x08004b05
 8004ae4:	08004b05 	.word	0x08004b05
 8004ae8:	08004aff 	.word	0x08004aff
 8004aec:	2300      	movs	r3, #0
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e118      	b.n	8004d24 <UART_SetConfig+0x348>
 8004af2:	2302      	movs	r3, #2
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e115      	b.n	8004d24 <UART_SetConfig+0x348>
 8004af8:	2304      	movs	r3, #4
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e112      	b.n	8004d24 <UART_SetConfig+0x348>
 8004afe:	2308      	movs	r3, #8
 8004b00:	77fb      	strb	r3, [r7, #31]
 8004b02:	e10f      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b04:	2310      	movs	r3, #16
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e10c      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a68      	ldr	r2, [pc, #416]	; (8004cb0 <UART_SetConfig+0x2d4>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d120      	bne.n	8004b56 <UART_SetConfig+0x17a>
 8004b14:	4b64      	ldr	r3, [pc, #400]	; (8004ca8 <UART_SetConfig+0x2cc>)
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b1e:	2b30      	cmp	r3, #48	; 0x30
 8004b20:	d013      	beq.n	8004b4a <UART_SetConfig+0x16e>
 8004b22:	2b30      	cmp	r3, #48	; 0x30
 8004b24:	d814      	bhi.n	8004b50 <UART_SetConfig+0x174>
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d009      	beq.n	8004b3e <UART_SetConfig+0x162>
 8004b2a:	2b20      	cmp	r3, #32
 8004b2c:	d810      	bhi.n	8004b50 <UART_SetConfig+0x174>
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <UART_SetConfig+0x15c>
 8004b32:	2b10      	cmp	r3, #16
 8004b34:	d006      	beq.n	8004b44 <UART_SetConfig+0x168>
 8004b36:	e00b      	b.n	8004b50 <UART_SetConfig+0x174>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e0f2      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e0ef      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b44:	2304      	movs	r3, #4
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e0ec      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e0e9      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b50:	2310      	movs	r3, #16
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e0e6      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a56      	ldr	r2, [pc, #344]	; (8004cb4 <UART_SetConfig+0x2d8>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d120      	bne.n	8004ba2 <UART_SetConfig+0x1c6>
 8004b60:	4b51      	ldr	r3, [pc, #324]	; (8004ca8 <UART_SetConfig+0x2cc>)
 8004b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004b6c:	d013      	beq.n	8004b96 <UART_SetConfig+0x1ba>
 8004b6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004b70:	d814      	bhi.n	8004b9c <UART_SetConfig+0x1c0>
 8004b72:	2b80      	cmp	r3, #128	; 0x80
 8004b74:	d009      	beq.n	8004b8a <UART_SetConfig+0x1ae>
 8004b76:	2b80      	cmp	r3, #128	; 0x80
 8004b78:	d810      	bhi.n	8004b9c <UART_SetConfig+0x1c0>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <UART_SetConfig+0x1a8>
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d006      	beq.n	8004b90 <UART_SetConfig+0x1b4>
 8004b82:	e00b      	b.n	8004b9c <UART_SetConfig+0x1c0>
 8004b84:	2300      	movs	r3, #0
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e0cc      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e0c9      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b90:	2304      	movs	r3, #4
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e0c6      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b96:	2308      	movs	r3, #8
 8004b98:	77fb      	strb	r3, [r7, #31]
 8004b9a:	e0c3      	b.n	8004d24 <UART_SetConfig+0x348>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	77fb      	strb	r3, [r7, #31]
 8004ba0:	e0c0      	b.n	8004d24 <UART_SetConfig+0x348>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a44      	ldr	r2, [pc, #272]	; (8004cb8 <UART_SetConfig+0x2dc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d125      	bne.n	8004bf8 <UART_SetConfig+0x21c>
 8004bac:	4b3e      	ldr	r3, [pc, #248]	; (8004ca8 <UART_SetConfig+0x2cc>)
 8004bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bba:	d017      	beq.n	8004bec <UART_SetConfig+0x210>
 8004bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bc0:	d817      	bhi.n	8004bf2 <UART_SetConfig+0x216>
 8004bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc6:	d00b      	beq.n	8004be0 <UART_SetConfig+0x204>
 8004bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bcc:	d811      	bhi.n	8004bf2 <UART_SetConfig+0x216>
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <UART_SetConfig+0x1fe>
 8004bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bd6:	d006      	beq.n	8004be6 <UART_SetConfig+0x20a>
 8004bd8:	e00b      	b.n	8004bf2 <UART_SetConfig+0x216>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	77fb      	strb	r3, [r7, #31]
 8004bde:	e0a1      	b.n	8004d24 <UART_SetConfig+0x348>
 8004be0:	2302      	movs	r3, #2
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e09e      	b.n	8004d24 <UART_SetConfig+0x348>
 8004be6:	2304      	movs	r3, #4
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e09b      	b.n	8004d24 <UART_SetConfig+0x348>
 8004bec:	2308      	movs	r3, #8
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e098      	b.n	8004d24 <UART_SetConfig+0x348>
 8004bf2:	2310      	movs	r3, #16
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e095      	b.n	8004d24 <UART_SetConfig+0x348>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2f      	ldr	r2, [pc, #188]	; (8004cbc <UART_SetConfig+0x2e0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d125      	bne.n	8004c4e <UART_SetConfig+0x272>
 8004c02:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <UART_SetConfig+0x2cc>)
 8004c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c10:	d017      	beq.n	8004c42 <UART_SetConfig+0x266>
 8004c12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c16:	d817      	bhi.n	8004c48 <UART_SetConfig+0x26c>
 8004c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c1c:	d00b      	beq.n	8004c36 <UART_SetConfig+0x25a>
 8004c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c22:	d811      	bhi.n	8004c48 <UART_SetConfig+0x26c>
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d003      	beq.n	8004c30 <UART_SetConfig+0x254>
 8004c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c2c:	d006      	beq.n	8004c3c <UART_SetConfig+0x260>
 8004c2e:	e00b      	b.n	8004c48 <UART_SetConfig+0x26c>
 8004c30:	2301      	movs	r3, #1
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e076      	b.n	8004d24 <UART_SetConfig+0x348>
 8004c36:	2302      	movs	r3, #2
 8004c38:	77fb      	strb	r3, [r7, #31]
 8004c3a:	e073      	b.n	8004d24 <UART_SetConfig+0x348>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	77fb      	strb	r3, [r7, #31]
 8004c40:	e070      	b.n	8004d24 <UART_SetConfig+0x348>
 8004c42:	2308      	movs	r3, #8
 8004c44:	77fb      	strb	r3, [r7, #31]
 8004c46:	e06d      	b.n	8004d24 <UART_SetConfig+0x348>
 8004c48:	2310      	movs	r3, #16
 8004c4a:	77fb      	strb	r3, [r7, #31]
 8004c4c:	e06a      	b.n	8004d24 <UART_SetConfig+0x348>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <UART_SetConfig+0x2e4>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d138      	bne.n	8004cca <UART_SetConfig+0x2ee>
 8004c58:	4b13      	ldr	r3, [pc, #76]	; (8004ca8 <UART_SetConfig+0x2cc>)
 8004c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004c62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c66:	d017      	beq.n	8004c98 <UART_SetConfig+0x2bc>
 8004c68:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004c6c:	d82a      	bhi.n	8004cc4 <UART_SetConfig+0x2e8>
 8004c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c72:	d00b      	beq.n	8004c8c <UART_SetConfig+0x2b0>
 8004c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c78:	d824      	bhi.n	8004cc4 <UART_SetConfig+0x2e8>
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <UART_SetConfig+0x2aa>
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c82:	d006      	beq.n	8004c92 <UART_SetConfig+0x2b6>
 8004c84:	e01e      	b.n	8004cc4 <UART_SetConfig+0x2e8>
 8004c86:	2300      	movs	r3, #0
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e04b      	b.n	8004d24 <UART_SetConfig+0x348>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e048      	b.n	8004d24 <UART_SetConfig+0x348>
 8004c92:	2304      	movs	r3, #4
 8004c94:	77fb      	strb	r3, [r7, #31]
 8004c96:	e045      	b.n	8004d24 <UART_SetConfig+0x348>
 8004c98:	2308      	movs	r3, #8
 8004c9a:	77fb      	strb	r3, [r7, #31]
 8004c9c:	e042      	b.n	8004d24 <UART_SetConfig+0x348>
 8004c9e:	bf00      	nop
 8004ca0:	efff69f3 	.word	0xefff69f3
 8004ca4:	40011000 	.word	0x40011000
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40004400 	.word	0x40004400
 8004cb0:	40004800 	.word	0x40004800
 8004cb4:	40004c00 	.word	0x40004c00
 8004cb8:	40005000 	.word	0x40005000
 8004cbc:	40011400 	.word	0x40011400
 8004cc0:	40007800 	.word	0x40007800
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e02c      	b.n	8004d24 <UART_SetConfig+0x348>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a72      	ldr	r2, [pc, #456]	; (8004e98 <UART_SetConfig+0x4bc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d125      	bne.n	8004d20 <UART_SetConfig+0x344>
 8004cd4:	4b71      	ldr	r3, [pc, #452]	; (8004e9c <UART_SetConfig+0x4c0>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004cde:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ce2:	d017      	beq.n	8004d14 <UART_SetConfig+0x338>
 8004ce4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ce8:	d817      	bhi.n	8004d1a <UART_SetConfig+0x33e>
 8004cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cee:	d00b      	beq.n	8004d08 <UART_SetConfig+0x32c>
 8004cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cf4:	d811      	bhi.n	8004d1a <UART_SetConfig+0x33e>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <UART_SetConfig+0x326>
 8004cfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cfe:	d006      	beq.n	8004d0e <UART_SetConfig+0x332>
 8004d00:	e00b      	b.n	8004d1a <UART_SetConfig+0x33e>
 8004d02:	2300      	movs	r3, #0
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	e00d      	b.n	8004d24 <UART_SetConfig+0x348>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e00a      	b.n	8004d24 <UART_SetConfig+0x348>
 8004d0e:	2304      	movs	r3, #4
 8004d10:	77fb      	strb	r3, [r7, #31]
 8004d12:	e007      	b.n	8004d24 <UART_SetConfig+0x348>
 8004d14:	2308      	movs	r3, #8
 8004d16:	77fb      	strb	r3, [r7, #31]
 8004d18:	e004      	b.n	8004d24 <UART_SetConfig+0x348>
 8004d1a:	2310      	movs	r3, #16
 8004d1c:	77fb      	strb	r3, [r7, #31]
 8004d1e:	e001      	b.n	8004d24 <UART_SetConfig+0x348>
 8004d20:	2310      	movs	r3, #16
 8004d22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d2c:	d15b      	bne.n	8004de6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004d2e:	7ffb      	ldrb	r3, [r7, #31]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d828      	bhi.n	8004d86 <UART_SetConfig+0x3aa>
 8004d34:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <UART_SetConfig+0x360>)
 8004d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3a:	bf00      	nop
 8004d3c:	08004d61 	.word	0x08004d61
 8004d40:	08004d69 	.word	0x08004d69
 8004d44:	08004d71 	.word	0x08004d71
 8004d48:	08004d87 	.word	0x08004d87
 8004d4c:	08004d77 	.word	0x08004d77
 8004d50:	08004d87 	.word	0x08004d87
 8004d54:	08004d87 	.word	0x08004d87
 8004d58:	08004d87 	.word	0x08004d87
 8004d5c:	08004d7f 	.word	0x08004d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d60:	f7fd fc76 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 8004d64:	61b8      	str	r0, [r7, #24]
        break;
 8004d66:	e013      	b.n	8004d90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d68:	f7fd fc86 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8004d6c:	61b8      	str	r0, [r7, #24]
        break;
 8004d6e:	e00f      	b.n	8004d90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d70:	4b4b      	ldr	r3, [pc, #300]	; (8004ea0 <UART_SetConfig+0x4c4>)
 8004d72:	61bb      	str	r3, [r7, #24]
        break;
 8004d74:	e00c      	b.n	8004d90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d76:	f7fd fb59 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8004d7a:	61b8      	str	r0, [r7, #24]
        break;
 8004d7c:	e008      	b.n	8004d90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d82:	61bb      	str	r3, [r7, #24]
        break;
 8004d84:	e004      	b.n	8004d90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	77bb      	strb	r3, [r7, #30]
        break;
 8004d8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d074      	beq.n	8004e80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	005a      	lsls	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	085b      	lsrs	r3, r3, #1
 8004da0:	441a      	add	r2, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004daa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b0f      	cmp	r3, #15
 8004db0:	d916      	bls.n	8004de0 <UART_SetConfig+0x404>
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db8:	d212      	bcs.n	8004de0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f023 030f 	bic.w	r3, r3, #15
 8004dc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	89fb      	ldrh	r3, [r7, #14]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	89fa      	ldrh	r2, [r7, #14]
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	e04f      	b.n	8004e80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	77bb      	strb	r3, [r7, #30]
 8004de4:	e04c      	b.n	8004e80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004de6:	7ffb      	ldrb	r3, [r7, #31]
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	d828      	bhi.n	8004e3e <UART_SetConfig+0x462>
 8004dec:	a201      	add	r2, pc, #4	; (adr r2, 8004df4 <UART_SetConfig+0x418>)
 8004dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df2:	bf00      	nop
 8004df4:	08004e19 	.word	0x08004e19
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e29 	.word	0x08004e29
 8004e00:	08004e3f 	.word	0x08004e3f
 8004e04:	08004e2f 	.word	0x08004e2f
 8004e08:	08004e3f 	.word	0x08004e3f
 8004e0c:	08004e3f 	.word	0x08004e3f
 8004e10:	08004e3f 	.word	0x08004e3f
 8004e14:	08004e37 	.word	0x08004e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e18:	f7fd fc1a 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 8004e1c:	61b8      	str	r0, [r7, #24]
        break;
 8004e1e:	e013      	b.n	8004e48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e20:	f7fd fc2a 	bl	8002678 <HAL_RCC_GetPCLK2Freq>
 8004e24:	61b8      	str	r0, [r7, #24]
        break;
 8004e26:	e00f      	b.n	8004e48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e28:	4b1d      	ldr	r3, [pc, #116]	; (8004ea0 <UART_SetConfig+0x4c4>)
 8004e2a:	61bb      	str	r3, [r7, #24]
        break;
 8004e2c:	e00c      	b.n	8004e48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e2e:	f7fd fafd 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8004e32:	61b8      	str	r0, [r7, #24]
        break;
 8004e34:	e008      	b.n	8004e48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e3a:	61bb      	str	r3, [r7, #24]
        break;
 8004e3c:	e004      	b.n	8004e48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	77bb      	strb	r3, [r7, #30]
        break;
 8004e46:	bf00      	nop
    }

    if (pclk != 0U)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d018      	beq.n	8004e80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	085a      	lsrs	r2, r3, #1
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	441a      	add	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	2b0f      	cmp	r3, #15
 8004e66:	d909      	bls.n	8004e7c <UART_SetConfig+0x4a0>
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6e:	d205      	bcs.n	8004e7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	60da      	str	r2, [r3, #12]
 8004e7a:	e001      	b.n	8004e80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004e8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40007c00 	.word	0x40007c00
 8004e9c:	40023800 	.word	0x40023800
 8004ea0:	00f42400 	.word	0x00f42400

08004ea4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	f003 0301 	and.w	r3, r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d00a      	beq.n	8004ece <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00a      	beq.n	8004ef0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00a      	beq.n	8004f12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d00a      	beq.n	8004f34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01a      	beq.n	8004fba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fa2:	d10a      	bne.n	8004fba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	605a      	str	r2, [r3, #4]
  }
}
 8004fdc:	bf00      	nop
 8004fde:	370c      	adds	r7, #12
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ff8:	f7fc faae 	bl	8001558 <HAL_GetTick>
 8004ffc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b08      	cmp	r3, #8
 800500a:	d10e      	bne.n	800502a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800500c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f81b 	bl	8005056 <UART_WaitOnFlagUntilTimeout>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d001      	beq.n	800502a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e011      	b.n	800504e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2220      	movs	r2, #32
 800502e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b09c      	sub	sp, #112	; 0x70
 800505a:	af00      	add	r7, sp, #0
 800505c:	60f8      	str	r0, [r7, #12]
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	603b      	str	r3, [r7, #0]
 8005062:	4613      	mov	r3, r2
 8005064:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005066:	e0a7      	b.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	f000 80a3 	beq.w	80051b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005072:	f7fc fa71 	bl	8001558 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800507e:	429a      	cmp	r2, r3
 8005080:	d302      	bcc.n	8005088 <UART_WaitOnFlagUntilTimeout+0x32>
 8005082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005084:	2b00      	cmp	r3, #0
 8005086:	d13f      	bne.n	8005108 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800509c:	667b      	str	r3, [r7, #100]	; 0x64
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e6      	bne.n	8005088 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	3308      	adds	r3, #8
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c4:	e853 3f00 	ldrex	r3, [r3]
 80050c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050cc:	f023 0301 	bic.w	r3, r3, #1
 80050d0:	663b      	str	r3, [r7, #96]	; 0x60
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050da:	64ba      	str	r2, [r7, #72]	; 0x48
 80050dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80050e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050e2:	e841 2300 	strex	r3, r2, [r1]
 80050e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80050e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1e5      	bne.n	80050ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2220      	movs	r2, #32
 80050f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e068      	b.n	80051da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d050      	beq.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005124:	d148      	bne.n	80051b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800512e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	461a      	mov	r2, r3
 800514c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
 8005150:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005152:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005154:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005156:	e841 2300 	strex	r3, r2, [r1]
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1e6      	bne.n	8005130 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	3308      	adds	r3, #8
 8005168:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	613b      	str	r3, [r7, #16]
   return(result);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	66bb      	str	r3, [r7, #104]	; 0x68
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3308      	adds	r3, #8
 8005180:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005182:	623a      	str	r2, [r7, #32]
 8005184:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	69f9      	ldr	r1, [r7, #28]
 8005188:	6a3a      	ldr	r2, [r7, #32]
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e5      	bne.n	8005162 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2220      	movs	r2, #32
 800519a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2220      	movs	r2, #32
 80051a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e010      	b.n	80051da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69da      	ldr	r2, [r3, #28]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	4013      	ands	r3, r2
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	bf0c      	ite	eq
 80051c8:	2301      	moveq	r3, #1
 80051ca:	2300      	movne	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	461a      	mov	r2, r3
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	f43f af48 	beq.w	8005068 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3770      	adds	r7, #112	; 0x70
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b095      	sub	sp, #84	; 0x54
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80051f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	461a      	mov	r2, r3
 8005206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005208:	643b      	str	r3, [r7, #64]	; 0x40
 800520a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800520e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e6      	bne.n	80051ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3308      	adds	r3, #8
 8005222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	e853 3f00 	ldrex	r3, [r3]
 800522a:	61fb      	str	r3, [r7, #28]
   return(result);
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	f023 0301 	bic.w	r3, r3, #1
 8005232:	64bb      	str	r3, [r7, #72]	; 0x48
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3308      	adds	r3, #8
 800523a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800523c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005244:	e841 2300 	strex	r3, r2, [r1]
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800524a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e5      	bne.n	800521c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005254:	2b01      	cmp	r3, #1
 8005256:	d118      	bne.n	800528a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	e853 3f00 	ldrex	r3, [r3]
 8005264:	60bb      	str	r3, [r7, #8]
   return(result);
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	f023 0310 	bic.w	r3, r3, #16
 800526c:	647b      	str	r3, [r7, #68]	; 0x44
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6979      	ldr	r1, [r7, #20]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	613b      	str	r3, [r7, #16]
   return(result);
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e6      	bne.n	8005258 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2220      	movs	r2, #32
 800528e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800529e:	bf00      	nop
 80052a0:	3754      	adds	r7, #84	; 0x54
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr

080052aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b084      	sub	sp, #16
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7ff fb71 	bl	80049b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052ce:	bf00      	nop
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b088      	sub	sp, #32
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6979      	ldr	r1, [r7, #20]
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	613b      	str	r3, [r7, #16]
   return(result);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e6      	bne.n	80052de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2220      	movs	r2, #32
 8005314:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fb3d 	bl	800499c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005322:	bf00      	nop
 8005324:	3720      	adds	r7, #32
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <memset>:
 800532a:	4402      	add	r2, r0
 800532c:	4603      	mov	r3, r0
 800532e:	4293      	cmp	r3, r2
 8005330:	d100      	bne.n	8005334 <memset+0xa>
 8005332:	4770      	bx	lr
 8005334:	f803 1b01 	strb.w	r1, [r3], #1
 8005338:	e7f9      	b.n	800532e <memset+0x4>
	...

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4d0d      	ldr	r5, [pc, #52]	; (8005374 <__libc_init_array+0x38>)
 8005340:	4c0d      	ldr	r4, [pc, #52]	; (8005378 <__libc_init_array+0x3c>)
 8005342:	1b64      	subs	r4, r4, r5
 8005344:	10a4      	asrs	r4, r4, #2
 8005346:	2600      	movs	r6, #0
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	4d0b      	ldr	r5, [pc, #44]	; (800537c <__libc_init_array+0x40>)
 800534e:	4c0c      	ldr	r4, [pc, #48]	; (8005380 <__libc_init_array+0x44>)
 8005350:	f000 f818 	bl	8005384 <_init>
 8005354:	1b64      	subs	r4, r4, r5
 8005356:	10a4      	asrs	r4, r4, #2
 8005358:	2600      	movs	r6, #0
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	f855 3b04 	ldr.w	r3, [r5], #4
 8005364:	4798      	blx	r3
 8005366:	3601      	adds	r6, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	f855 3b04 	ldr.w	r3, [r5], #4
 800536e:	4798      	blx	r3
 8005370:	3601      	adds	r6, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	080053c0 	.word	0x080053c0
 8005378:	080053c0 	.word	0x080053c0
 800537c:	080053c0 	.word	0x080053c0
 8005380:	080053c4 	.word	0x080053c4

08005384 <_init>:
 8005384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005386:	bf00      	nop
 8005388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800538a:	bc08      	pop	{r3}
 800538c:	469e      	mov	lr, r3
 800538e:	4770      	bx	lr

08005390 <_fini>:
 8005390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005392:	bf00      	nop
 8005394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005396:	bc08      	pop	{r3}
 8005398:	469e      	mov	lr, r3
 800539a:	4770      	bx	lr
