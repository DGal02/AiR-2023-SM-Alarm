
LabyMikroprocki.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f88  08005f88  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f90  08005f90  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000034  08005fcc  00020034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000d4  0800606c  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000748  20000174  0800610c  00020174  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200008bc  0800610c  000208bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000201a4  2**0
                  CONTENTS, READONLY
 15 .debug_info   000179be  00000000  00000000  000201e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000032a8  00000000  00000000  00037ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001350  00000000  00000000  0003ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000f04  00000000  00000000  0003c1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002850a  00000000  00000000  0003d0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00018d13  00000000  00000000  000655ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f88ba  00000000  00000000  0007e2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00005138  00000000  00000000  00176b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  0017bcb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000174 	.word	0x20000174
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005f54 	.word	0x08005f54

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000178 	.word	0x20000178
 8000204:	08005f54 	.word	0x08005f54

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <MX_ETH_Init+0x84>)
 800051a:	4a20      	ldr	r2, [pc, #128]	; (800059c <MX_ETH_Init+0x88>)
 800051c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800051e:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <MX_ETH_Init+0x8c>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000524:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <MX_ETH_Init+0x8c>)
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800052a:	4b1d      	ldr	r3, [pc, #116]	; (80005a0 <MX_ETH_Init+0x8c>)
 800052c:	22e1      	movs	r2, #225	; 0xe1
 800052e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000530:	4b1b      	ldr	r3, [pc, #108]	; (80005a0 <MX_ETH_Init+0x8c>)
 8000532:	2200      	movs	r2, #0
 8000534:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000536:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <MX_ETH_Init+0x8c>)
 8000538:	2200      	movs	r2, #0
 800053a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800053c:	4b18      	ldr	r3, [pc, #96]	; (80005a0 <MX_ETH_Init+0x8c>)
 800053e:	2200      	movs	r2, #0
 8000540:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000542:	4b15      	ldr	r3, [pc, #84]	; (8000598 <MX_ETH_Init+0x84>)
 8000544:	4a16      	ldr	r2, [pc, #88]	; (80005a0 <MX_ETH_Init+0x8c>)
 8000546:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000548:	4b13      	ldr	r3, [pc, #76]	; (8000598 <MX_ETH_Init+0x84>)
 800054a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800054e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_ETH_Init+0x84>)
 8000552:	4a14      	ldr	r2, [pc, #80]	; (80005a4 <MX_ETH_Init+0x90>)
 8000554:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000556:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MX_ETH_Init+0x84>)
 8000558:	4a13      	ldr	r2, [pc, #76]	; (80005a8 <MX_ETH_Init+0x94>)
 800055a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800055c:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_ETH_Init+0x84>)
 800055e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000562:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <MX_ETH_Init+0x84>)
 8000566:	f001 fa0f 	bl	8001988 <HAL_ETH_Init>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000570:	f000 fc9a 	bl	8000ea8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000574:	2238      	movs	r2, #56	; 0x38
 8000576:	2100      	movs	r1, #0
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <MX_ETH_Init+0x98>)
 800057a:	f005 fcbf 	bl	8005efc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <MX_ETH_Init+0x98>)
 8000580:	2221      	movs	r2, #33	; 0x21
 8000582:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <MX_ETH_Init+0x98>)
 8000586:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800058a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <MX_ETH_Init+0x98>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200001c8 	.word	0x200001c8
 800059c:	40028000 	.word	0x40028000
 80005a0:	20000278 	.word	0x20000278
 80005a4:	200000d4 	.word	0x200000d4
 80005a8:	20000034 	.word	0x20000034
 80005ac:	20000190 	.word	0x20000190

080005b0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08e      	sub	sp, #56	; 0x38
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a4e      	ldr	r2, [pc, #312]	; (8000708 <HAL_ETH_MspInit+0x158>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	f040 8096 	bne.w	8000700 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005d4:	4b4d      	ldr	r3, [pc, #308]	; (800070c <HAL_ETH_MspInit+0x15c>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d8:	4a4c      	ldr	r2, [pc, #304]	; (800070c <HAL_ETH_MspInit+0x15c>)
 80005da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005de:	6313      	str	r3, [r2, #48]	; 0x30
 80005e0:	4b4a      	ldr	r3, [pc, #296]	; (800070c <HAL_ETH_MspInit+0x15c>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005e8:	623b      	str	r3, [r7, #32]
 80005ea:	6a3b      	ldr	r3, [r7, #32]
 80005ec:	4b47      	ldr	r3, [pc, #284]	; (800070c <HAL_ETH_MspInit+0x15c>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4a46      	ldr	r2, [pc, #280]	; (800070c <HAL_ETH_MspInit+0x15c>)
 80005f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30
 80005f8:	4b44      	ldr	r3, [pc, #272]	; (800070c <HAL_ETH_MspInit+0x15c>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000600:	61fb      	str	r3, [r7, #28]
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	4b41      	ldr	r3, [pc, #260]	; (800070c <HAL_ETH_MspInit+0x15c>)
 8000606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000608:	4a40      	ldr	r2, [pc, #256]	; (800070c <HAL_ETH_MspInit+0x15c>)
 800060a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800060e:	6313      	str	r3, [r2, #48]	; 0x30
 8000610:	4b3e      	ldr	r3, [pc, #248]	; (800070c <HAL_ETH_MspInit+0x15c>)
 8000612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000618:	61bb      	str	r3, [r7, #24]
 800061a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800061c:	4b3b      	ldr	r3, [pc, #236]	; (800070c <HAL_ETH_MspInit+0x15c>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	4a3a      	ldr	r2, [pc, #232]	; (800070c <HAL_ETH_MspInit+0x15c>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6313      	str	r3, [r2, #48]	; 0x30
 8000628:	4b38      	ldr	r3, [pc, #224]	; (800070c <HAL_ETH_MspInit+0x15c>)
 800062a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000634:	4b35      	ldr	r3, [pc, #212]	; (800070c <HAL_ETH_MspInit+0x15c>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	4a34      	ldr	r2, [pc, #208]	; (800070c <HAL_ETH_MspInit+0x15c>)
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	6313      	str	r3, [r2, #48]	; 0x30
 8000640:	4b32      	ldr	r3, [pc, #200]	; (800070c <HAL_ETH_MspInit+0x15c>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064c:	4b2f      	ldr	r3, [pc, #188]	; (800070c <HAL_ETH_MspInit+0x15c>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	4a2e      	ldr	r2, [pc, #184]	; (800070c <HAL_ETH_MspInit+0x15c>)
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	6313      	str	r3, [r2, #48]	; 0x30
 8000658:	4b2c      	ldr	r3, [pc, #176]	; (800070c <HAL_ETH_MspInit+0x15c>)
 800065a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065c:	f003 0302 	and.w	r3, r3, #2
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <HAL_ETH_MspInit+0x15c>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000668:	4a28      	ldr	r2, [pc, #160]	; (800070c <HAL_ETH_MspInit+0x15c>)
 800066a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800066e:	6313      	str	r3, [r2, #48]	; 0x30
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <HAL_ETH_MspInit+0x15c>)
 8000672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800067c:	2332      	movs	r3, #50	; 0x32
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800068c:	230b      	movs	r3, #11
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000694:	4619      	mov	r1, r3
 8000696:	481e      	ldr	r0, [pc, #120]	; (8000710 <HAL_ETH_MspInit+0x160>)
 8000698:	f001 fc9c 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800069c:	2386      	movs	r3, #134	; 0x86
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a0:	2302      	movs	r3, #2
 80006a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	2303      	movs	r3, #3
 80006aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ac:	230b      	movs	r3, #11
 80006ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	4817      	ldr	r0, [pc, #92]	; (8000714 <HAL_ETH_MspInit+0x164>)
 80006b8:	f001 fc8c 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c2:	2302      	movs	r3, #2
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ca:	2303      	movs	r3, #3
 80006cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ce:	230b      	movs	r3, #11
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d6:	4619      	mov	r1, r3
 80006d8:	480f      	ldr	r0, [pc, #60]	; (8000718 <HAL_ETH_MspInit+0x168>)
 80006da:	f001 fc7b 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e4:	2302      	movs	r3, #2
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ec:	2303      	movs	r3, #3
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006f0:	230b      	movs	r3, #11
 80006f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f8:	4619      	mov	r1, r3
 80006fa:	4808      	ldr	r0, [pc, #32]	; (800071c <HAL_ETH_MspInit+0x16c>)
 80006fc:	f001 fc6a 	bl	8001fd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000700:	bf00      	nop
 8000702:	3738      	adds	r7, #56	; 0x38
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40028000 	.word	0x40028000
 800070c:	40023800 	.word	0x40023800
 8000710:	40020800 	.word	0x40020800
 8000714:	40020000 	.word	0x40020000
 8000718:	40020400 	.word	0x40020400
 800071c:	40021800 	.word	0x40021800

08000720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b85      	ldr	r3, [pc, #532]	; (800094c <MX_GPIO_Init+0x22c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a84      	ldr	r2, [pc, #528]	; (800094c <MX_GPIO_Init+0x22c>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b82      	ldr	r3, [pc, #520]	; (800094c <MX_GPIO_Init+0x22c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800074e:	4b7f      	ldr	r3, [pc, #508]	; (800094c <MX_GPIO_Init+0x22c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a7e      	ldr	r2, [pc, #504]	; (800094c <MX_GPIO_Init+0x22c>)
 8000754:	f043 0320 	orr.w	r3, r3, #32
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b7c      	ldr	r3, [pc, #496]	; (800094c <MX_GPIO_Init+0x22c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0320 	and.w	r3, r3, #32
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	4b79      	ldr	r3, [pc, #484]	; (800094c <MX_GPIO_Init+0x22c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a78      	ldr	r2, [pc, #480]	; (800094c <MX_GPIO_Init+0x22c>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b76      	ldr	r3, [pc, #472]	; (800094c <MX_GPIO_Init+0x22c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b73      	ldr	r3, [pc, #460]	; (800094c <MX_GPIO_Init+0x22c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a72      	ldr	r2, [pc, #456]	; (800094c <MX_GPIO_Init+0x22c>)
 8000784:	f043 0301 	orr.w	r3, r3, #1
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b70      	ldr	r3, [pc, #448]	; (800094c <MX_GPIO_Init+0x22c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0301 	and.w	r3, r3, #1
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	4b6d      	ldr	r3, [pc, #436]	; (800094c <MX_GPIO_Init+0x22c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a6c      	ldr	r2, [pc, #432]	; (800094c <MX_GPIO_Init+0x22c>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b6a      	ldr	r3, [pc, #424]	; (800094c <MX_GPIO_Init+0x22c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	4b67      	ldr	r3, [pc, #412]	; (800094c <MX_GPIO_Init+0x22c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a66      	ldr	r2, [pc, #408]	; (800094c <MX_GPIO_Init+0x22c>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b64      	ldr	r3, [pc, #400]	; (800094c <MX_GPIO_Init+0x22c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0308 	and.w	r3, r3, #8
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007c6:	4b61      	ldr	r3, [pc, #388]	; (800094c <MX_GPIO_Init+0x22c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a60      	ldr	r2, [pc, #384]	; (800094c <MX_GPIO_Init+0x22c>)
 80007cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b5e      	ldr	r3, [pc, #376]	; (800094c <MX_GPIO_Init+0x22c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	485b      	ldr	r0, [pc, #364]	; (8000950 <MX_GPIO_Init+0x230>)
 80007e4:	f001 fdba 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Row2_Pin|Row3_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2109      	movs	r1, #9
 80007ec:	4859      	ldr	r0, [pc, #356]	; (8000954 <MX_GPIO_Init+0x234>)
 80007ee:	f001 fdb5 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	4858      	ldr	r0, [pc, #352]	; (8000958 <MX_GPIO_Init+0x238>)
 80007f8:	f001 fdb0 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f244 0181 	movw	r1, #16513	; 0x4081
 8000802:	4856      	ldr	r0, [pc, #344]	; (800095c <MX_GPIO_Init+0x23c>)
 8000804:	f001 fdaa 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2140      	movs	r1, #64	; 0x40
 800080c:	4854      	ldr	r0, [pc, #336]	; (8000960 <MX_GPIO_Init+0x240>)
 800080e:	f001 fda5 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000818:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	4619      	mov	r1, r3
 8000828:	484a      	ldr	r0, [pc, #296]	; (8000954 <MX_GPIO_Init+0x234>)
 800082a:	f001 fbd3 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Row4_Pin;
 800082e:	2308      	movs	r3, #8
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Row4_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4842      	ldr	r0, [pc, #264]	; (8000950 <MX_GPIO_Init+0x230>)
 8000846:	f001 fbc5 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Guzik_Pin;
 800084a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000850:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Guzik_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	483b      	ldr	r0, [pc, #236]	; (8000950 <MX_GPIO_Init+0x230>)
 8000862:	f001 fbb7 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Row2_Pin|Row3_Pin;
 8000866:	2309      	movs	r3, #9
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4835      	ldr	r0, [pc, #212]	; (8000954 <MX_GPIO_Init+0x234>)
 800087e:	f001 fba9 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Row1_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	482f      	ldr	r0, [pc, #188]	; (8000958 <MX_GPIO_Init+0x238>)
 800089a:	f001 fb9b 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800089e:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4829      	ldr	r0, [pc, #164]	; (800095c <MX_GPIO_Init+0x23c>)
 80008b8:	f001 fb8c 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008bc:	2340      	movs	r3, #64	; 0x40
 80008be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2301      	movs	r3, #1
 80008c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4823      	ldr	r0, [pc, #140]	; (8000960 <MX_GPIO_Init+0x240>)
 80008d4:	f001 fb7e 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	481d      	ldr	r0, [pc, #116]	; (8000960 <MX_GPIO_Init+0x240>)
 80008ec:	f001 fb72 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = moveSensor_Pin;
 80008f0:	2310      	movs	r3, #16
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(moveSensor_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4817      	ldr	r0, [pc, #92]	; (8000964 <MX_GPIO_Init+0x244>)
 8000906:	f001 fb65 	bl	8001fd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Col3_Pin|Col2_Pin|Col1_Pin;
 800090a:	23e0      	movs	r3, #224	; 0xe0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_GPIO_Init+0x244>)
 800091e:	f001 fb59 	bl	8001fd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	200a      	movs	r0, #10
 8000928:	f000 ff65 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800092c:	200a      	movs	r0, #10
 800092e:	f000 ff7e 	bl	800182e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2028      	movs	r0, #40	; 0x28
 8000938:	f000 ff5d 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800093c:	2028      	movs	r0, #40	; 0x28
 800093e:	f000 ff76 	bl	800182e <HAL_NVIC_EnableIRQ>

}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	; 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40021400 	.word	0x40021400
 8000954:	40020800 	.word	0x40020800
 8000958:	40020000 	.word	0x40020000
 800095c:	40020400 	.word	0x40020400
 8000960:	40021800 	.word	0x40021800
 8000964:	40020c00 	.word	0x40020c00

08000968 <HAL_GPIO_EXTI_Callback>:
uint8_t codeSetIndex = 0;
uint8_t codeUser[4];
uint8_t codeUserIndex = 0;
uint8_t phase = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == moveSensor_Pin) {
 8000972:	88fb      	ldrh	r3, [r7, #6]
 8000974:	2b10      	cmp	r3, #16
 8000976:	d10a      	bne.n	800098e <HAL_GPIO_EXTI_Callback+0x26>
		HAL_UART_Transmit(&huart3, (uint8_t *) moveDetectedMessage, strlen(moveDetectedMessage), 1000);
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <HAL_GPIO_EXTI_Callback+0x30>)
 800097a:	f7ff fc45 	bl	8000208 <strlen>
 800097e:	4603      	mov	r3, r0
 8000980:	b29a      	uxth	r2, r3
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	4904      	ldr	r1, [pc, #16]	; (8000998 <HAL_GPIO_EXTI_Callback+0x30>)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <HAL_GPIO_EXTI_Callback+0x34>)
 800098a:	f003 ffa5 	bl	80048d8 <HAL_UART_Transmit>
	}
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000000 	.word	0x20000000
 800099c:	20000328 	.word	0x20000328

080009a0 <readKeypad>:

char readKeypad(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET); //Pull the R1 low
 80009a4:	2200      	movs	r2, #0
 80009a6:	2108      	movs	r1, #8
 80009a8:	488d      	ldr	r0, [pc, #564]	; (8000be0 <readKeypad+0x240>)
 80009aa:	f001 fcd7 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET); // Pull the R2 High
 80009ae:	2201      	movs	r2, #1
 80009b0:	2101      	movs	r1, #1
 80009b2:	488c      	ldr	r0, [pc, #560]	; (8000be4 <readKeypad+0x244>)
 80009b4:	f001 fcd2 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET); // Pull the R3 High
 80009b8:	2201      	movs	r2, #1
 80009ba:	2108      	movs	r1, #8
 80009bc:	4889      	ldr	r0, [pc, #548]	; (8000be4 <readKeypad+0x244>)
 80009be:	f001 fccd 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET); // Pull the R4 High
 80009c2:	2201      	movs	r2, #1
 80009c4:	2108      	movs	r1, #8
 80009c6:	4888      	ldr	r0, [pc, #544]	; (8000be8 <readKeypad+0x248>)
 80009c8:	f001 fcc8 	bl	800235c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	4887      	ldr	r0, [pc, #540]	; (8000bec <readKeypad+0x24c>)
 80009d0:	f001 fcac 	bl	800232c <HAL_GPIO_ReadPin>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d109      	bne.n	80009ee <readKeypad+0x4e>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 80009da:	bf00      	nop
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	4883      	ldr	r0, [pc, #524]	; (8000bec <readKeypad+0x24c>)
 80009e0:	f001 fca4 	bl	800232c <HAL_GPIO_ReadPin>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f8      	beq.n	80009dc <readKeypad+0x3c>
			;   // wait till the button is pressed
		return '1';
 80009ea:	2331      	movs	r3, #49	; 0x31
 80009ec:	e0f6      	b.n	8000bdc <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 80009ee:	2140      	movs	r1, #64	; 0x40
 80009f0:	487e      	ldr	r0, [pc, #504]	; (8000bec <readKeypad+0x24c>)
 80009f2:	f001 fc9b 	bl	800232c <HAL_GPIO_ReadPin>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d109      	bne.n	8000a10 <readKeypad+0x70>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 80009fc:	bf00      	nop
 80009fe:	2140      	movs	r1, #64	; 0x40
 8000a00:	487a      	ldr	r0, [pc, #488]	; (8000bec <readKeypad+0x24c>)
 8000a02:	f001 fc93 	bl	800232c <HAL_GPIO_ReadPin>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f8      	beq.n	80009fe <readKeypad+0x5e>
			;   // wait till the button is pressed
		return '2';
 8000a0c:	2332      	movs	r3, #50	; 0x32
 8000a0e:	e0e5      	b.n	8000bdc <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000a10:	2120      	movs	r1, #32
 8000a12:	4876      	ldr	r0, [pc, #472]	; (8000bec <readKeypad+0x24c>)
 8000a14:	f001 fc8a 	bl	800232c <HAL_GPIO_ReadPin>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d109      	bne.n	8000a32 <readKeypad+0x92>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 8000a1e:	bf00      	nop
 8000a20:	2120      	movs	r1, #32
 8000a22:	4872      	ldr	r0, [pc, #456]	; (8000bec <readKeypad+0x24c>)
 8000a24:	f001 fc82 	bl	800232c <HAL_GPIO_ReadPin>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f8      	beq.n	8000a20 <readKeypad+0x80>
			;   // wait till the button is pressed
		return '3';
 8000a2e:	2333      	movs	r3, #51	; 0x33
 8000a30:	e0d4      	b.n	8000bdc <readKeypad+0x23c>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET); //Pull the R1 low
 8000a32:	2201      	movs	r2, #1
 8000a34:	2108      	movs	r1, #8
 8000a36:	486a      	ldr	r0, [pc, #424]	; (8000be0 <readKeypad+0x240>)
 8000a38:	f001 fc90 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET); // Pull the R2 High
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2101      	movs	r1, #1
 8000a40:	4868      	ldr	r0, [pc, #416]	; (8000be4 <readKeypad+0x244>)
 8000a42:	f001 fc8b 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET); // Pull the R3 High
 8000a46:	2201      	movs	r2, #1
 8000a48:	2108      	movs	r1, #8
 8000a4a:	4866      	ldr	r0, [pc, #408]	; (8000be4 <readKeypad+0x244>)
 8000a4c:	f001 fc86 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET); // Pull the R4 High
 8000a50:	2201      	movs	r2, #1
 8000a52:	2108      	movs	r1, #8
 8000a54:	4864      	ldr	r0, [pc, #400]	; (8000be8 <readKeypad+0x248>)
 8000a56:	f001 fc81 	bl	800235c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000a5a:	2180      	movs	r1, #128	; 0x80
 8000a5c:	4863      	ldr	r0, [pc, #396]	; (8000bec <readKeypad+0x24c>)
 8000a5e:	f001 fc65 	bl	800232c <HAL_GPIO_ReadPin>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d109      	bne.n	8000a7c <readKeypad+0xdc>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 8000a68:	bf00      	nop
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	485f      	ldr	r0, [pc, #380]	; (8000bec <readKeypad+0x24c>)
 8000a6e:	f001 fc5d 	bl	800232c <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f8      	beq.n	8000a6a <readKeypad+0xca>
			;   // wait till the button is pressed
		return '4';
 8000a78:	2334      	movs	r3, #52	; 0x34
 8000a7a:	e0af      	b.n	8000bdc <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	485b      	ldr	r0, [pc, #364]	; (8000bec <readKeypad+0x24c>)
 8000a80:	f001 fc54 	bl	800232c <HAL_GPIO_ReadPin>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d109      	bne.n	8000a9e <readKeypad+0xfe>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000a8a:	bf00      	nop
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	4857      	ldr	r0, [pc, #348]	; (8000bec <readKeypad+0x24c>)
 8000a90:	f001 fc4c 	bl	800232c <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0f8      	beq.n	8000a8c <readKeypad+0xec>
			;   // wait till the button is pressed
		return '5';
 8000a9a:	2335      	movs	r3, #53	; 0x35
 8000a9c:	e09e      	b.n	8000bdc <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000a9e:	2120      	movs	r1, #32
 8000aa0:	4852      	ldr	r0, [pc, #328]	; (8000bec <readKeypad+0x24c>)
 8000aa2:	f001 fc43 	bl	800232c <HAL_GPIO_ReadPin>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d109      	bne.n	8000ac0 <readKeypad+0x120>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 8000aac:	bf00      	nop
 8000aae:	2120      	movs	r1, #32
 8000ab0:	484e      	ldr	r0, [pc, #312]	; (8000bec <readKeypad+0x24c>)
 8000ab2:	f001 fc3b 	bl	800232c <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0f8      	beq.n	8000aae <readKeypad+0x10e>
			;   // wait till the button is pressed
		return '6';
 8000abc:	2336      	movs	r3, #54	; 0x36
 8000abe:	e08d      	b.n	8000bdc <readKeypad+0x23c>
	}

	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET); //Pull the R1 low
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4846      	ldr	r0, [pc, #280]	; (8000be0 <readKeypad+0x240>)
 8000ac6:	f001 fc49 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000aca:	2201      	movs	r2, #1
 8000acc:	2101      	movs	r1, #1
 8000ace:	4845      	ldr	r0, [pc, #276]	; (8000be4 <readKeypad+0x244>)
 8000ad0:	f001 fc44 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET); // Pull the R3 High
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2108      	movs	r1, #8
 8000ad8:	4842      	ldr	r0, [pc, #264]	; (8000be4 <readKeypad+0x244>)
 8000ada:	f001 fc3f 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET); // Pull the R4 High
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	4841      	ldr	r0, [pc, #260]	; (8000be8 <readKeypad+0x248>)
 8000ae4:	f001 fc3a 	bl	800235c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000ae8:	2180      	movs	r1, #128	; 0x80
 8000aea:	4840      	ldr	r0, [pc, #256]	; (8000bec <readKeypad+0x24c>)
 8000aec:	f001 fc1e 	bl	800232c <HAL_GPIO_ReadPin>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d109      	bne.n	8000b0a <readKeypad+0x16a>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 8000af6:	bf00      	nop
 8000af8:	2180      	movs	r1, #128	; 0x80
 8000afa:	483c      	ldr	r0, [pc, #240]	; (8000bec <readKeypad+0x24c>)
 8000afc:	f001 fc16 	bl	800232c <HAL_GPIO_ReadPin>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d0f8      	beq.n	8000af8 <readKeypad+0x158>
			;   // wait till the button is pressed
		return '7';
 8000b06:	2337      	movs	r3, #55	; 0x37
 8000b08:	e068      	b.n	8000bdc <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000b0a:	2140      	movs	r1, #64	; 0x40
 8000b0c:	4837      	ldr	r0, [pc, #220]	; (8000bec <readKeypad+0x24c>)
 8000b0e:	f001 fc0d 	bl	800232c <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d109      	bne.n	8000b2c <readKeypad+0x18c>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000b18:	bf00      	nop
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	4833      	ldr	r0, [pc, #204]	; (8000bec <readKeypad+0x24c>)
 8000b1e:	f001 fc05 	bl	800232c <HAL_GPIO_ReadPin>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f8      	beq.n	8000b1a <readKeypad+0x17a>
			;   // wait till the button is pressed
		return '8';
 8000b28:	2338      	movs	r3, #56	; 0x38
 8000b2a:	e057      	b.n	8000bdc <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000b2c:	2120      	movs	r1, #32
 8000b2e:	482f      	ldr	r0, [pc, #188]	; (8000bec <readKeypad+0x24c>)
 8000b30:	f001 fbfc 	bl	800232c <HAL_GPIO_ReadPin>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d109      	bne.n	8000b4e <readKeypad+0x1ae>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 8000b3a:	bf00      	nop
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	482b      	ldr	r0, [pc, #172]	; (8000bec <readKeypad+0x24c>)
 8000b40:	f001 fbf4 	bl	800232c <HAL_GPIO_ReadPin>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0f8      	beq.n	8000b3c <readKeypad+0x19c>
			;   // wait till the button is pressed
		return '9';
 8000b4a:	2339      	movs	r3, #57	; 0x39
 8000b4c:	e046      	b.n	8000bdc <readKeypad+0x23c>
	}

	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET); //Pull the R1 low
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2108      	movs	r1, #8
 8000b52:	4823      	ldr	r0, [pc, #140]	; (8000be0 <readKeypad+0x240>)
 8000b54:	f001 fc02 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000b58:	2201      	movs	r2, #1
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4821      	ldr	r0, [pc, #132]	; (8000be4 <readKeypad+0x244>)
 8000b5e:	f001 fbfd 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET); // Pull the R3 High
 8000b62:	2201      	movs	r2, #1
 8000b64:	2108      	movs	r1, #8
 8000b66:	481f      	ldr	r0, [pc, #124]	; (8000be4 <readKeypad+0x244>)
 8000b68:	f001 fbf8 	bl	800235c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET); // Pull the R4 High
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2108      	movs	r1, #8
 8000b70:	481d      	ldr	r0, [pc, #116]	; (8000be8 <readKeypad+0x248>)
 8000b72:	f001 fbf3 	bl	800235c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000b76:	2180      	movs	r1, #128	; 0x80
 8000b78:	481c      	ldr	r0, [pc, #112]	; (8000bec <readKeypad+0x24c>)
 8000b7a:	f001 fbd7 	bl	800232c <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d109      	bne.n	8000b98 <readKeypad+0x1f8>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 8000b84:	bf00      	nop
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	4818      	ldr	r0, [pc, #96]	; (8000bec <readKeypad+0x24c>)
 8000b8a:	f001 fbcf 	bl	800232c <HAL_GPIO_ReadPin>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0f8      	beq.n	8000b86 <readKeypad+0x1e6>
			;   // wait till the button is pressed
		return '*';
 8000b94:	232a      	movs	r3, #42	; 0x2a
 8000b96:	e021      	b.n	8000bdc <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000b98:	2140      	movs	r1, #64	; 0x40
 8000b9a:	4814      	ldr	r0, [pc, #80]	; (8000bec <readKeypad+0x24c>)
 8000b9c:	f001 fbc6 	bl	800232c <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d109      	bne.n	8000bba <readKeypad+0x21a>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000ba6:	bf00      	nop
 8000ba8:	2140      	movs	r1, #64	; 0x40
 8000baa:	4810      	ldr	r0, [pc, #64]	; (8000bec <readKeypad+0x24c>)
 8000bac:	f001 fbbe 	bl	800232c <HAL_GPIO_ReadPin>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0f8      	beq.n	8000ba8 <readKeypad+0x208>
			;   // wait till the button is pressed
		return '0';
 8000bb6:	2330      	movs	r3, #48	; 0x30
 8000bb8:	e010      	b.n	8000bdc <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000bba:	2120      	movs	r1, #32
 8000bbc:	480b      	ldr	r0, [pc, #44]	; (8000bec <readKeypad+0x24c>)
 8000bbe:	f001 fbb5 	bl	800232c <HAL_GPIO_ReadPin>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d109      	bne.n	8000bdc <readKeypad+0x23c>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 8000bc8:	bf00      	nop
 8000bca:	2120      	movs	r1, #32
 8000bcc:	4807      	ldr	r0, [pc, #28]	; (8000bec <readKeypad+0x24c>)
 8000bce:	f001 fbad 	bl	800232c <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f8      	beq.n	8000bca <readKeypad+0x22a>
			;   // wait till the button is pressed
		return '#';
 8000bd8:	2323      	movs	r3, #35	; 0x23
 8000bda:	e7ff      	b.n	8000bdc <readKeypad+0x23c>
	}
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020800 	.word	0x40020800
 8000be8:	40021400 	.word	0x40021400
 8000bec:	40020c00 	.word	0x40020c00

08000bf0 <handleBadPin>:

void handleBadPin(void) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) badPinMessage, strlen(badPinMessage), 1000);
 8000bf4:	480a      	ldr	r0, [pc, #40]	; (8000c20 <handleBadPin+0x30>)
 8000bf6:	f7ff fb07 	bl	8000208 <strlen>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	b29a      	uxth	r2, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c02:	4907      	ldr	r1, [pc, #28]	; (8000c20 <handleBadPin+0x30>)
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <handleBadPin+0x34>)
 8000c06:	f003 fe67 	bl	80048d8 <HAL_UART_Transmit>
	memset(&codeUser[0], '\0', 4);
 8000c0a:	2204      	movs	r2, #4
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	4806      	ldr	r0, [pc, #24]	; (8000c28 <handleBadPin+0x38>)
 8000c10:	f005 f974 	bl	8005efc <memset>
	codeUserIndex = 0;
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <handleBadPin+0x3c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000010 	.word	0x20000010
 8000c24:	20000328 	.word	0x20000328
 8000c28:	20000288 	.word	0x20000288
 8000c2c:	2000028c 	.word	0x2000028c

08000c30 <handleGoodPin>:

void handleGoodPin(void) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t *) goodPinMessage, strlen(goodPinMessage), 1000);
 8000c34:	480f      	ldr	r0, [pc, #60]	; (8000c74 <handleGoodPin+0x44>)
 8000c36:	f7ff fae7 	bl	8000208 <strlen>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c42:	490c      	ldr	r1, [pc, #48]	; (8000c74 <handleGoodPin+0x44>)
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <handleGoodPin+0x48>)
 8000c46:	f003 fe47 	bl	80048d8 <HAL_UART_Transmit>
	memset(&codeSet[0], '\0', 4);
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	480b      	ldr	r0, [pc, #44]	; (8000c7c <handleGoodPin+0x4c>)
 8000c50:	f005 f954 	bl	8005efc <memset>
	memset(&codeUser[0], '\0', 4);
 8000c54:	2204      	movs	r2, #4
 8000c56:	2100      	movs	r1, #0
 8000c58:	4809      	ldr	r0, [pc, #36]	; (8000c80 <handleGoodPin+0x50>)
 8000c5a:	f005 f94f 	bl	8005efc <memset>
	codeSetIndex = 0;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <handleGoodPin+0x54>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
	codeUserIndex = 0;
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <handleGoodPin+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	701a      	strb	r2, [r3, #0]
	phase = 0;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <handleGoodPin+0x5c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000001c 	.word	0x2000001c
 8000c78:	20000328 	.word	0x20000328
 8000c7c:	20000280 	.word	0x20000280
 8000c80:	20000288 	.word	0x20000288
 8000c84:	20000284 	.word	0x20000284
 8000c88:	2000028c 	.word	0x2000028c
 8000c8c:	2000028d 	.word	0x2000028d

08000c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c94:	f000 fc53 	bl	800153e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c98:	f000 f89e 	bl	8000dd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c9c:	f7ff fd40 	bl	8000720 <MX_GPIO_Init>
  MX_ETH_Init();
 8000ca0:	f7ff fc38 	bl	8000514 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ca4:	f000 fae2 	bl	800126c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ca8:	f000 fb78 	bl	800139c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000cac:	f000 f9a0 	bl	8000ff0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cb0:	f000 f9ec 	bl	800108c <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
// HAL_GPIO_ReadPin(moveSensor_GPIO_Port, moveSensor_Pin) == 1
		if (phase == 0) {
 8000cb4:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <main+0x128>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d12e      	bne.n	8000d1a <main+0x8a>
			keyboard = readKeypad();
 8000cbc:	f7ff fe70 	bl	80009a0 <readKeypad>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <main+0x12c>)
 8000cc6:	701a      	strb	r2, [r3, #0]
			if (keyboard != 0x01) {
 8000cc8:	4b3c      	ldr	r3, [pc, #240]	; (8000dbc <main+0x12c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d021      	beq.n	8000d14 <main+0x84>
				codeSet[codeSetIndex] = keyboard;
 8000cd0:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <main+0x130>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b39      	ldr	r3, [pc, #228]	; (8000dbc <main+0x12c>)
 8000cd8:	7819      	ldrb	r1, [r3, #0]
 8000cda:	4b3a      	ldr	r3, [pc, #232]	; (8000dc4 <main+0x134>)
 8000cdc:	5499      	strb	r1, [r3, r2]
				codeSetIndex++;
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <main+0x130>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b36      	ldr	r3, [pc, #216]	; (8000dc0 <main+0x130>)
 8000ce8:	701a      	strb	r2, [r3, #0]
				if (codeSetIndex >= 4) {
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <main+0x130>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	d902      	bls.n	8000cf8 <main+0x68>
					phase = 1;
 8000cf2:	4b31      	ldr	r3, [pc, #196]	; (8000db8 <main+0x128>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
				}

				HAL_UART_Transmit(&huart3, &keyboard, 1, 1000);
 8000cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	492f      	ldr	r1, [pc, #188]	; (8000dbc <main+0x12c>)
 8000d00:	4831      	ldr	r0, [pc, #196]	; (8000dc8 <main+0x138>)
 8000d02:	f003 fde9 	bl	80048d8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t *) "\n", 1, 1000);
 8000d06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	492f      	ldr	r1, [pc, #188]	; (8000dcc <main+0x13c>)
 8000d0e:	482e      	ldr	r0, [pc, #184]	; (8000dc8 <main+0x138>)
 8000d10:	f003 fde2 	bl	80048d8 <HAL_UART_Transmit>
			}

			HAL_Delay(200);
 8000d14:	20c8      	movs	r0, #200	; 0xc8
 8000d16:	f000 fc6f 	bl	80015f8 <HAL_Delay>
		}

		if (phase == 1) {
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <main+0x128>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d1c8      	bne.n	8000cb4 <main+0x24>
			keyboard = readKeypad();
 8000d22:	f7ff fe3d 	bl	80009a0 <readKeypad>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b24      	ldr	r3, [pc, #144]	; (8000dbc <main+0x12c>)
 8000d2c:	701a      	strb	r2, [r3, #0]
			if (keyboard != 0x01) {
 8000d2e:	4b23      	ldr	r3, [pc, #140]	; (8000dbc <main+0x12c>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d03b      	beq.n	8000dae <main+0x11e>
				codeUser[codeUserIndex] = keyboard;
 8000d36:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <main+0x140>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <main+0x12c>)
 8000d3e:	7819      	ldrb	r1, [r3, #0]
 8000d40:	4b24      	ldr	r3, [pc, #144]	; (8000dd4 <main+0x144>)
 8000d42:	5499      	strb	r1, [r3, r2]
				codeUserIndex++;
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <main+0x140>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <main+0x140>)
 8000d4e:	701a      	strb	r2, [r3, #0]
				if (codeUserIndex >= 4) {
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <main+0x140>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d91c      	bls.n	8000d92 <main+0x102>
					if (codeUser[0] == codeSet[0] && codeUser[1] == codeSet[1] && codeUser[2] == codeSet[2] && codeUser[3] == codeSet[3]){
 8000d58:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <main+0x144>)
 8000d5a:	781a      	ldrb	r2, [r3, #0]
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <main+0x134>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d114      	bne.n	8000d8e <main+0xfe>
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <main+0x144>)
 8000d66:	785a      	ldrb	r2, [r3, #1]
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <main+0x134>)
 8000d6a:	785b      	ldrb	r3, [r3, #1]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d10e      	bne.n	8000d8e <main+0xfe>
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <main+0x144>)
 8000d72:	789a      	ldrb	r2, [r3, #2]
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <main+0x134>)
 8000d76:	789b      	ldrb	r3, [r3, #2]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d108      	bne.n	8000d8e <main+0xfe>
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <main+0x144>)
 8000d7e:	78da      	ldrb	r2, [r3, #3]
 8000d80:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <main+0x134>)
 8000d82:	78db      	ldrb	r3, [r3, #3]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d102      	bne.n	8000d8e <main+0xfe>
						handleGoodPin();
 8000d88:	f7ff ff52 	bl	8000c30 <handleGoodPin>
 8000d8c:	e001      	b.n	8000d92 <main+0x102>
					} else {
						handleBadPin();
 8000d8e:	f7ff ff2f 	bl	8000bf0 <handleBadPin>
					}
				}

				HAL_UART_Transmit(&huart3, &keyboard, 1, 1000);
 8000d92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d96:	2201      	movs	r2, #1
 8000d98:	4908      	ldr	r1, [pc, #32]	; (8000dbc <main+0x12c>)
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <main+0x138>)
 8000d9c:	f003 fd9c 	bl	80048d8 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t *) "\n", 1, 1000);
 8000da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da4:	2201      	movs	r2, #1
 8000da6:	4909      	ldr	r1, [pc, #36]	; (8000dcc <main+0x13c>)
 8000da8:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <main+0x138>)
 8000daa:	f003 fd95 	bl	80048d8 <HAL_UART_Transmit>
			}

			HAL_Delay(200);
 8000dae:	20c8      	movs	r0, #200	; 0xc8
 8000db0:	f000 fc22 	bl	80015f8 <HAL_Delay>
		if (phase == 0) {
 8000db4:	e77e      	b.n	8000cb4 <main+0x24>
 8000db6:	bf00      	nop
 8000db8:	2000028d 	.word	0x2000028d
 8000dbc:	2000027e 	.word	0x2000027e
 8000dc0:	20000284 	.word	0x20000284
 8000dc4:	20000280 	.word	0x20000280
 8000dc8:	20000328 	.word	0x20000328
 8000dcc:	08005f6c 	.word	0x08005f6c
 8000dd0:	2000028c 	.word	0x2000028c
 8000dd4:	20000288 	.word	0x20000288

08000dd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b094      	sub	sp, #80	; 0x50
 8000ddc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2230      	movs	r2, #48	; 0x30
 8000de4:	2100      	movs	r1, #0
 8000de6:	4618      	mov	r0, r3
 8000de8:	f005 f888 	bl	8005efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000dfc:	f001 fc28 	bl	8002650 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <SystemClock_Config+0xc8>)
 8000e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e04:	4a26      	ldr	r2, [pc, #152]	; (8000ea0 <SystemClock_Config+0xc8>)
 8000e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <SystemClock_Config+0xc8>)
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	60bb      	str	r3, [r7, #8]
 8000e16:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e20:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e26:	6013      	str	r3, [r2, #0]
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <SystemClock_Config+0xcc>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e34:	2301      	movs	r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e38:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000e4c:	2348      	movs	r3, #72	; 0x48
 8000e4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e54:	2303      	movs	r3, #3
 8000e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	f107 0320 	add.w	r3, r7, #32
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f001 fc07 	bl	8002670 <HAL_RCC_OscConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e68:	f000 f81e 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e70:	2302      	movs	r3, #2
 8000e72:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	2102      	movs	r1, #2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f001 fe95 	bl	8002bb8 <HAL_RCC_ClockConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e94:	f000 f808 	bl	8000ea8 <Error_Handler>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3750      	adds	r7, #80	; 0x50
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <HAL_MspInit+0x50>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a11      	ldr	r2, [pc, #68]	; (8000f04 <HAL_MspInit+0x50>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	; (8000f04 <HAL_MspInit+0x50>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <HAL_MspInit+0x50>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <HAL_MspInit+0x50>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_MspInit+0x50>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f000 fc81 	bl	80017f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000ef4:	2005      	movs	r0, #5
 8000ef6:	f000 fc9a 	bl	800182e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <NMI_Handler+0x4>

08000f0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <HardFault_Handler+0x4>

08000f14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <MemManage_Handler+0x4>

08000f1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f54:	f000 fb30 	bl	80015b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(moveSensor_Pin);
 8000f6e:	2010      	movs	r0, #16
 8000f70:	f001 fa0e 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <TIM2_IRQHandler+0x10>)
 8000f7e:	f002 fce9 	bl	8003954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000290 	.word	0x20000290

08000f8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <TIM3_IRQHandler+0x10>)
 8000f92:	f002 fcdf 	bl	8003954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200002dc 	.word	0x200002dc

08000fa0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <USART3_IRQHandler+0x10>)
 8000fa6:	f003 fd1b 	bl	80049e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000328 	.word	0x20000328

08000fb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Guzik_Pin);
 8000fb8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fbc:	f001 f9e8 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000fc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fc4:	f001 f9e4 	bl	8002390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <SystemInit+0x20>)
 8000fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fd6:	4a05      	ldr	r2, [pc, #20]	; (8000fec <SystemInit+0x20>)
 8000fd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ff6:	f107 0310 	add.w	r3, r7, #16
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	1d3b      	adds	r3, r7, #4
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800100e:	4b1d      	ldr	r3, [pc, #116]	; (8001084 <MX_TIM2_Init+0x94>)
 8001010:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001014:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_TIM2_Init+0x94>)
 8001018:	2200      	movs	r2, #0
 800101a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101c:	4b19      	ldr	r3, [pc, #100]	; (8001084 <MX_TIM2_Init+0x94>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 359999;
 8001022:	4b18      	ldr	r3, [pc, #96]	; (8001084 <MX_TIM2_Init+0x94>)
 8001024:	4a18      	ldr	r2, [pc, #96]	; (8001088 <MX_TIM2_Init+0x98>)
 8001026:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b16      	ldr	r3, [pc, #88]	; (8001084 <MX_TIM2_Init+0x94>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <MX_TIM2_Init+0x94>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <MX_TIM2_Init+0x94>)
 8001036:	f002 fbd5 	bl	80037e4 <HAL_TIM_Base_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001040:	f7ff ff32 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001048:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800104a:	f107 0310 	add.w	r3, r7, #16
 800104e:	4619      	mov	r1, r3
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <MX_TIM2_Init+0x94>)
 8001052:	f002 feb3 	bl	8003dbc <HAL_TIM_ConfigClockSource>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800105c:	f7ff ff24 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	4619      	mov	r1, r3
 800106c:	4805      	ldr	r0, [pc, #20]	; (8001084 <MX_TIM2_Init+0x94>)
 800106e:	f003 fb39 	bl	80046e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001078:	f7ff ff16 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	3720      	adds	r7, #32
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000290 	.word	0x20000290
 8001088:	00057e3f 	.word	0x00057e3f

0800108c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08e      	sub	sp, #56	; 0x38
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ac:	463b      	mov	r3, r7
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]
 80010ba:	615a      	str	r2, [r3, #20]
 80010bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <MX_TIM3_Init+0xe8>)
 80010c0:	4a2d      	ldr	r2, [pc, #180]	; (8001178 <MX_TIM3_Init+0xec>)
 80010c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <MX_TIM3_Init+0xe8>)
 80010c6:	2247      	movs	r2, #71	; 0x47
 80010c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <MX_TIM3_Init+0xe8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <MX_TIM3_Init+0xe8>)
 80010d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d8:	4b26      	ldr	r3, [pc, #152]	; (8001174 <MX_TIM3_Init+0xe8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b25      	ldr	r3, [pc, #148]	; (8001174 <MX_TIM3_Init+0xe8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010e4:	4823      	ldr	r0, [pc, #140]	; (8001174 <MX_TIM3_Init+0xe8>)
 80010e6:	f002 fb7d 	bl	80037e4 <HAL_TIM_Base_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80010f0:	f7ff feda 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	4619      	mov	r1, r3
 8001100:	481c      	ldr	r0, [pc, #112]	; (8001174 <MX_TIM3_Init+0xe8>)
 8001102:	f002 fe5b 	bl	8003dbc <HAL_TIM_ConfigClockSource>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800110c:	f7ff fecc 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <MX_TIM3_Init+0xe8>)
 8001112:	f002 fbbe 	bl	8003892 <HAL_TIM_PWM_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800111c:	f7ff fec4 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <MX_TIM3_Init+0xe8>)
 8001130:	f003 fad8 	bl	80046e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800113a:	f7ff feb5 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113e:	2360      	movs	r3, #96	; 0x60
 8001140:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8001142:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001146:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001150:	463b      	mov	r3, r7
 8001152:	2208      	movs	r2, #8
 8001154:	4619      	mov	r1, r3
 8001156:	4807      	ldr	r0, [pc, #28]	; (8001174 <MX_TIM3_Init+0xe8>)
 8001158:	f002 fd1c 	bl	8003b94 <HAL_TIM_PWM_ConfigChannel>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001162:	f7ff fea1 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <MX_TIM3_Init+0xe8>)
 8001168:	f000 f848 	bl	80011fc <HAL_TIM_MspPostInit>

}
 800116c:	bf00      	nop
 800116e:	3738      	adds	r7, #56	; 0x38
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200002dc 	.word	0x200002dc
 8001178:	40000400 	.word	0x40000400

0800117c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118c:	d114      	bne.n	80011b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	201c      	movs	r0, #28
 80011ac:	f000 fb23 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011b0:	201c      	movs	r0, #28
 80011b2:	f000 fb3c 	bl	800182e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011b6:	e018      	b.n	80011ea <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_TIM_Base_MspInit+0x7c>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d113      	bne.n	80011ea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_TIM_Base_MspInit+0x78>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	201d      	movs	r0, #29
 80011e0:	f000 fb09 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011e4:	201d      	movs	r0, #29
 80011e6:	f000 fb22 	bl	800182e <HAL_NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40000400 	.word	0x40000400

080011fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b088      	sub	sp, #32
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a11      	ldr	r2, [pc, #68]	; (8001260 <HAL_TIM_MspPostInit+0x64>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d11c      	bne.n	8001258 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_TIM_MspPostInit+0x68>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <HAL_TIM_MspPostInit+0x68>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_TIM_MspPostInit+0x68>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001236:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001248:	2302      	movs	r3, #2
 800124a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	f107 030c 	add.w	r3, r7, #12
 8001250:	4619      	mov	r1, r3
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_TIM_MspPostInit+0x6c>)
 8001254:	f000 febe 	bl	8001fd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001258:	bf00      	nop
 800125a:	3720      	adds	r7, #32
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40000400 	.word	0x40000400
 8001264:	40023800 	.word	0x40023800
 8001268:	40020800 	.word	0x40020800

0800126c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <MX_USART3_UART_Init+0x5c>)
 8001274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 8001278:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800127c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_USART3_UART_Init+0x58>)
 80012b0:	f003 fac4 	bl	800483c <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012ba:	f7ff fdf5 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000328 	.word	0x20000328
 80012c8:	40004800 	.word	0x40004800

080012cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b0aa      	sub	sp, #168	; 0xa8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012e4:	f107 0310 	add.w	r3, r7, #16
 80012e8:	2284      	movs	r2, #132	; 0x84
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f004 fe05 	bl	8005efc <memset>
  if(uartHandle->Instance==USART3)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a26      	ldr	r2, [pc, #152]	; (8001390 <HAL_UART_MspInit+0xc4>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d144      	bne.n	8001386 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001300:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001302:	2300      	movs	r3, #0
 8001304:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4618      	mov	r0, r3
 800130c:	f001 fe7a 	bl	8003004 <HAL_RCCEx_PeriphCLKConfig>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001316:	f7ff fdc7 	bl	8000ea8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800131a:	4b1e      	ldr	r3, [pc, #120]	; (8001394 <HAL_UART_MspInit+0xc8>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a1d      	ldr	r2, [pc, #116]	; (8001394 <HAL_UART_MspInit+0xc8>)
 8001320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <HAL_UART_MspInit+0xc8>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_UART_MspInit+0xc8>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a17      	ldr	r2, [pc, #92]	; (8001394 <HAL_UART_MspInit+0xc8>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_UART_MspInit+0xc8>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0308 	and.w	r3, r3, #8
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800134a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800134e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001358:	2301      	movs	r3, #1
 800135a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001364:	2307      	movs	r3, #7
 8001366:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800136e:	4619      	mov	r1, r3
 8001370:	4809      	ldr	r0, [pc, #36]	; (8001398 <HAL_UART_MspInit+0xcc>)
 8001372:	f000 fe2f 	bl	8001fd4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2027      	movs	r0, #39	; 0x27
 800137c:	f000 fa3b 	bl	80017f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001380:	2027      	movs	r0, #39	; 0x27
 8001382:	f000 fa54 	bl	800182e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001386:	bf00      	nop
 8001388:	37a8      	adds	r7, #168	; 0xa8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40004800 	.word	0x40004800
 8001394:	40023800 	.word	0x40023800
 8001398:	40020c00 	.word	0x40020c00

0800139c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013aa:	2206      	movs	r2, #6
 80013ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b0:	2202      	movs	r2, #2
 80013b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013bc:	2202      	movs	r2, #2
 80013be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013da:	2200      	movs	r2, #0
 80013dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80013e0:	f000 ffee 	bl	80023c0 <HAL_PCD_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80013ea:	f7ff fd5d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200003b0 	.word	0x200003b0

080013f8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0ac      	sub	sp, #176	; 0xb0
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	2284      	movs	r2, #132	; 0x84
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f004 fd6f 	bl	8005efc <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001426:	d159      	bne.n	80014dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001428:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800142c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001434:	f107 0318 	add.w	r3, r7, #24
 8001438:	4618      	mov	r0, r3
 800143a:	f001 fde3 	bl	8003004 <HAL_RCCEx_PeriphCLKConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001444:	f7ff fd30 	bl	8000ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_PCD_MspInit+0xec>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a25      	ldr	r2, [pc, #148]	; (80014e4 <HAL_PCD_MspInit+0xec>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_PCD_MspInit+0xec>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001460:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001464:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800147a:	230a      	movs	r3, #10
 800147c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001484:	4619      	mov	r1, r3
 8001486:	4818      	ldr	r0, [pc, #96]	; (80014e8 <HAL_PCD_MspInit+0xf0>)
 8001488:	f000 fda4 	bl	8001fd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800148c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014a4:	4619      	mov	r1, r3
 80014a6:	4810      	ldr	r0, [pc, #64]	; (80014e8 <HAL_PCD_MspInit+0xf0>)
 80014a8:	f000 fd94 	bl	8001fd4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_PCD_MspInit+0xec>)
 80014ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b0:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <HAL_PCD_MspInit+0xec>)
 80014b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b6:	6353      	str	r3, [r2, #52]	; 0x34
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <HAL_PCD_MspInit+0xec>)
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_PCD_MspInit+0xec>)
 80014c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c8:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <HAL_PCD_MspInit+0xec>)
 80014ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ce:	6453      	str	r3, [r2, #68]	; 0x44
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <HAL_PCD_MspInit+0xec>)
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80014dc:	bf00      	nop
 80014de:	37b0      	adds	r7, #176	; 0xb0
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f0:	480d      	ldr	r0, [pc, #52]	; (8001528 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014f2:	490e      	ldr	r1, [pc, #56]	; (800152c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014f4:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001508:	4c0b      	ldr	r4, [pc, #44]	; (8001538 <LoopFillZerobss+0x26>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001516:	f7ff fd59 	bl	8000fcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800151a:	f004 fcf7 	bl	8005f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff fbb7 	bl	8000c90 <main>
  bx  lr    
 8001522:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001524:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001530:	08005f98 	.word	0x08005f98
  ldr r2, =_sbss
 8001534:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001538:	200008bc 	.word	0x200008bc

0800153c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC_IRQHandler>

0800153e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001542:	2003      	movs	r0, #3
 8001544:	f000 f94c 	bl	80017e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001548:	2000      	movs	r0, #0
 800154a:	f000 f805 	bl	8001558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800154e:	f7ff fcb1 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_InitTick+0x54>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_InitTick+0x58>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	4619      	mov	r1, r3
 800156a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800156e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001572:	fbb2 f3f3 	udiv	r3, r2, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f967 	bl	800184a <HAL_SYSTICK_Config>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e00e      	b.n	80015a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0f      	cmp	r3, #15
 800158a:	d80a      	bhi.n	80015a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158c:	2200      	movs	r2, #0
 800158e:	6879      	ldr	r1, [r7, #4]
 8001590:	f04f 30ff 	mov.w	r0, #4294967295
 8001594:	f000 f92f 	bl	80017f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001598:	4a06      	ldr	r2, [pc, #24]	; (80015b4 <HAL_InitTick+0x5c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000028 	.word	0x20000028
 80015b0:	20000030 	.word	0x20000030
 80015b4:	2000002c 	.word	0x2000002c

080015b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_IncTick+0x20>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <HAL_IncTick+0x24>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4413      	add	r3, r2
 80015c8:	4a04      	ldr	r2, [pc, #16]	; (80015dc <HAL_IncTick+0x24>)
 80015ca:	6013      	str	r3, [r2, #0]
}
 80015cc:	bf00      	nop
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	20000030 	.word	0x20000030
 80015dc:	200008b8 	.word	0x200008b8

080015e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return uwTick;
 80015e4:	4b03      	ldr	r3, [pc, #12]	; (80015f4 <HAL_GetTick+0x14>)
 80015e6:	681b      	ldr	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	200008b8 	.word	0x200008b8

080015f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001600:	f7ff ffee 	bl	80015e0 <HAL_GetTick>
 8001604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001610:	d005      	beq.n	800161e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_Delay+0x44>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	4413      	add	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800161e:	bf00      	nop
 8001620:	f7ff ffde 	bl	80015e0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	429a      	cmp	r2, r3
 800162e:	d8f7      	bhi.n	8001620 <HAL_Delay+0x28>
  {
  }
}
 8001630:	bf00      	nop
 8001632:	bf00      	nop
 8001634:	3710      	adds	r7, #16
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000030 	.word	0x20000030

08001640 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <__NVIC_SetPriorityGrouping+0x40>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800165c:	4013      	ands	r3, r2
 800165e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	4313      	orrs	r3, r2
 800166c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166e:	4a04      	ldr	r2, [pc, #16]	; (8001680 <__NVIC_SetPriorityGrouping+0x40>)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	60d3      	str	r3, [r2, #12]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00
 8001684:	05fa0000 	.word	0x05fa0000

08001688 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <__NVIC_GetPriorityGrouping+0x18>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	0a1b      	lsrs	r3, r3, #8
 8001692:	f003 0307 	and.w	r3, r3, #7
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	db0b      	blt.n	80016ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f003 021f 	and.w	r2, r3, #31
 80016bc:	4907      	ldr	r1, [pc, #28]	; (80016dc <__NVIC_EnableIRQ+0x38>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	095b      	lsrs	r3, r3, #5
 80016c4:	2001      	movs	r0, #1
 80016c6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000e100 	.word	0xe000e100

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ac:	d301      	bcc.n	80017b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ae:	2301      	movs	r3, #1
 80017b0:	e00f      	b.n	80017d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <SysTick_Config+0x40>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ba:	210f      	movs	r1, #15
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f7ff ff8e 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c4:	4b05      	ldr	r3, [pc, #20]	; (80017dc <SysTick_Config+0x40>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <SysTick_Config+0x40>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	e000e010 	.word	0xe000e010

080017e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ff29 	bl	8001640 <__NVIC_SetPriorityGrouping>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	4603      	mov	r3, r0
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001808:	f7ff ff3e 	bl	8001688 <__NVIC_GetPriorityGrouping>
 800180c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	68b9      	ldr	r1, [r7, #8]
 8001812:	6978      	ldr	r0, [r7, #20]
 8001814:	f7ff ff8e 	bl	8001734 <NVIC_EncodePriority>
 8001818:	4602      	mov	r2, r0
 800181a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181e:	4611      	mov	r1, r2
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff5d 	bl	80016e0 <__NVIC_SetPriority>
}
 8001826:	bf00      	nop
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b082      	sub	sp, #8
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff31 	bl	80016a4 <__NVIC_EnableIRQ>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7ff ffa2 	bl	800179c <SysTick_Config>
 8001858:	4603      	mov	r3, r0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001870:	f7ff feb6 	bl	80015e0 <HAL_GetTick>
 8001874:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d008      	beq.n	8001894 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e052      	b.n	800193a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0216 	bic.w	r2, r2, #22
 80018a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d103      	bne.n	80018c4 <HAL_DMA_Abort+0x62>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d007      	beq.n	80018d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f022 0208 	bic.w	r2, r2, #8
 80018d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f022 0201 	bic.w	r2, r2, #1
 80018e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e4:	e013      	b.n	800190e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018e6:	f7ff fe7b 	bl	80015e0 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b05      	cmp	r3, #5
 80018f2:	d90c      	bls.n	800190e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2220      	movs	r2, #32
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2203      	movs	r2, #3
 80018fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e015      	b.n	800193a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0301 	and.w	r3, r3, #1
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e4      	bne.n	80018e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001920:	223f      	movs	r2, #63	; 0x3f
 8001922:	409a      	lsls	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001942:	b480      	push	{r7}
 8001944:	b083      	sub	sp, #12
 8001946:	af00      	add	r7, sp, #0
 8001948:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d004      	beq.n	8001960 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e00c      	b.n	800197a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2205      	movs	r2, #5
 8001964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e06a      	b.n	8001a70 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d106      	bne.n	80019b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2223      	movs	r2, #35	; 0x23
 80019a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7fe fdff 	bl	80005b0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <HAL_ETH_Init+0xf0>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	4a30      	ldr	r2, [pc, #192]	; (8001a78 <HAL_ETH_Init+0xf0>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	; 0x44
 80019be:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <HAL_ETH_Init+0xf0>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80019ca:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <HAL_ETH_Init+0xf4>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4a2b      	ldr	r2, [pc, #172]	; (8001a7c <HAL_ETH_Init+0xf4>)
 80019d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80019d6:	4b29      	ldr	r3, [pc, #164]	; (8001a7c <HAL_ETH_Init+0xf4>)
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4927      	ldr	r1, [pc, #156]	; (8001a7c <HAL_ETH_Init+0xf4>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <HAL_ETH_Init+0xf4>)
 80019e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a00:	f7ff fdee 	bl	80015e0 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a06:	e011      	b.n	8001a2c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a08:	f7ff fdea 	bl	80015e0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a16:	d909      	bls.n	8001a2c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2204      	movs	r2, #4
 8001a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	22e0      	movs	r2, #224	; 0xe0
 8001a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e021      	b.n	8001a70 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1e4      	bne.n	8001a08 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f958 	bl	8001cf4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f000 f9ff 	bl	8001e48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f000 fa55 	bl	8001efa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	461a      	mov	r2, r3
 8001a56:	2100      	movs	r1, #0
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 f9bd 	bl	8001dd8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2210      	movs	r2, #16
 8001a6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40013800 	.word	0x40013800

08001a80 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4b51      	ldr	r3, [pc, #324]	; (8001bdc <ETH_SetMACConfig+0x15c>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	7c1b      	ldrb	r3, [r3, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <ETH_SetMACConfig+0x28>
 8001aa2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001aa6:	e000      	b.n	8001aaa <ETH_SetMACConfig+0x2a>
 8001aa8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	7c5b      	ldrb	r3, [r3, #17]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <ETH_SetMACConfig+0x38>
 8001ab2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ab6:	e000      	b.n	8001aba <ETH_SetMACConfig+0x3a>
 8001ab8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001aba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ac0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	7fdb      	ldrb	r3, [r3, #31]
 8001ac6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ac8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ace:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	7f92      	ldrb	r2, [r2, #30]
 8001ad4:	2a00      	cmp	r2, #0
 8001ad6:	d102      	bne.n	8001ade <ETH_SetMACConfig+0x5e>
 8001ad8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001adc:	e000      	b.n	8001ae0 <ETH_SetMACConfig+0x60>
 8001ade:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ae0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	7f1b      	ldrb	r3, [r3, #28]
 8001ae6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ae8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001aee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	791b      	ldrb	r3, [r3, #4]
 8001af4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001af6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001afe:	2a00      	cmp	r2, #0
 8001b00:	d102      	bne.n	8001b08 <ETH_SetMACConfig+0x88>
 8001b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b06:	e000      	b.n	8001b0a <ETH_SetMACConfig+0x8a>
 8001b08:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	7bdb      	ldrb	r3, [r3, #15]
 8001b10:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b12:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b20:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b22:	4313      	orrs	r3, r2
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff fd5c 	bl	80015f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b56:	4013      	ands	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001b66:	2a00      	cmp	r2, #0
 8001b68:	d101      	bne.n	8001b6e <ETH_SetMACConfig+0xee>
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	e000      	b.n	8001b70 <ETH_SetMACConfig+0xf0>
 8001b6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001b70:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001b76:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001b7e:	2a01      	cmp	r2, #1
 8001b80:	d101      	bne.n	8001b86 <ETH_SetMACConfig+0x106>
 8001b82:	2208      	movs	r2, #8
 8001b84:	e000      	b.n	8001b88 <ETH_SetMACConfig+0x108>
 8001b86:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001b88:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001b90:	2a01      	cmp	r2, #1
 8001b92:	d101      	bne.n	8001b98 <ETH_SetMACConfig+0x118>
 8001b94:	2204      	movs	r2, #4
 8001b96:	e000      	b.n	8001b9a <ETH_SetMACConfig+0x11a>
 8001b98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001b9a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001ba2:	2a01      	cmp	r2, #1
 8001ba4:	d101      	bne.n	8001baa <ETH_SetMACConfig+0x12a>
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	e000      	b.n	8001bac <ETH_SetMACConfig+0x12c>
 8001baa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bac:	4313      	orrs	r3, r2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	f7ff fd17 	bl	80015f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	ff20810f 	.word	0xff20810f

08001be0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <ETH_SetDMAConfig+0x110>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	7b1b      	ldrb	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <ETH_SetDMAConfig+0x2c>
 8001c06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c0a:	e000      	b.n	8001c0e <ETH_SetDMAConfig+0x2e>
 8001c0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	7b5b      	ldrb	r3, [r3, #13]
 8001c12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	7f52      	ldrb	r2, [r2, #29]
 8001c1a:	2a00      	cmp	r2, #0
 8001c1c:	d102      	bne.n	8001c24 <ETH_SetDMAConfig+0x44>
 8001c1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c22:	e000      	b.n	8001c26 <ETH_SetDMAConfig+0x46>
 8001c24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	7b9b      	ldrb	r3, [r3, #14]
 8001c2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	7f1b      	ldrb	r3, [r3, #28]
 8001c3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	7f9b      	ldrb	r3, [r3, #30]
 8001c42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c54:	4313      	orrs	r3, r2
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c64:	461a      	mov	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c76:	2001      	movs	r0, #1
 8001c78:	f7ff fcbe 	bl	80015f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c84:	461a      	mov	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	791b      	ldrb	r3, [r3, #4]
 8001c8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001c94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001c9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ca0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ca8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001caa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cb2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001cb8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6812      	ldr	r2, [r2, #0]
 8001cbe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001cc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cc6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f7ff fc8f 	bl	80015f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	6013      	str	r3, [r2, #0]
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	f8de3f23 	.word	0xf8de3f23

08001cf4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0a6      	sub	sp, #152	; 0x98
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d30:	2300      	movs	r3, #0
 8001d32:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d44:	2300      	movs	r3, #0
 8001d46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d5a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff fe86 	bl	8001a80 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001d74:	2301      	movs	r3, #1
 8001d76:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001d82:	2301      	movs	r3, #1
 8001d84:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d96:	2300      	movs	r3, #0
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001da0:	2301      	movs	r3, #1
 8001da2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001da4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001da8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001daa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001dae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001db4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001db6:	2301      	movs	r3, #1
 8001db8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	4619      	mov	r1, r3
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f7ff ff08 	bl	8001be0 <ETH_SetDMAConfig>
}
 8001dd0:	bf00      	nop
 8001dd2:	3798      	adds	r7, #152	; 0x98
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	3305      	adds	r3, #5
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	3204      	adds	r2, #4
 8001df0:	7812      	ldrb	r2, [r2, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001df6:	68ba      	ldr	r2, [r7, #8]
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <ETH_MACAddressConfig+0x68>)
 8001dfa:	4413      	add	r3, r2
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	3303      	adds	r3, #3
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	061a      	lsls	r2, r3, #24
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	041b      	lsls	r3, r3, #16
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3301      	adds	r3, #1
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	7812      	ldrb	r2, [r2, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <ETH_MACAddressConfig+0x6c>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	6013      	str	r3, [r2, #0]
}
 8001e32:	bf00      	nop
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40028040 	.word	0x40028040
 8001e44:	40028044 	.word	0x40028044

08001e48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e03e      	b.n	8001ed4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68d9      	ldr	r1, [r3, #12]
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	440b      	add	r3, r1
 8001e66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2200      	movs	r2, #0
 8001e72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	3206      	adds	r2, #6
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d80c      	bhi.n	8001eb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68d9      	ldr	r1, [r3, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	1c5a      	adds	r2, r3, #1
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	e004      	b.n	8001ec2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	d9bd      	bls.n	8001e56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	68da      	ldr	r2, [r3, #12]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eec:	611a      	str	r2, [r3, #16]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	e046      	b.n	8001f96 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6919      	ldr	r1, [r3, #16]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001f4c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	3212      	adds	r2, #18
 8001f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d80c      	bhi.n	8001f86 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6919      	ldr	r1, [r3, #16]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	e004      	b.n	8001f90 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3301      	adds	r3, #1
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b03      	cmp	r3, #3
 8001f9a:	d9b5      	bls.n	8001f08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc6:	60da      	str	r2, [r3, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b089      	sub	sp, #36	; 0x24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
 8001ff2:	e175      	b.n	80022e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	429a      	cmp	r2, r3
 800200e:	f040 8164 	bne.w	80022da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b01      	cmp	r3, #1
 800201c:	d005      	beq.n	800202a <HAL_GPIO_Init+0x56>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d130      	bne.n	800208c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	2203      	movs	r2, #3
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fa02 f303 	lsl.w	r3, r2, r3
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	4313      	orrs	r3, r2
 8002052:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002060:	2201      	movs	r2, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	f003 0201 	and.w	r2, r3, #1
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4313      	orrs	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	2b03      	cmp	r3, #3
 8002096:	d017      	beq.n	80020c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	2203      	movs	r2, #3
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	2b02      	cmp	r3, #2
 80020d2:	d123      	bne.n	800211c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	08da      	lsrs	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3208      	adds	r2, #8
 80020dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	220f      	movs	r2, #15
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3208      	adds	r2, #8
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0203 	and.w	r2, r3, #3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4313      	orrs	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002158:	2b00      	cmp	r3, #0
 800215a:	f000 80be 	beq.w	80022da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800215e:	4b66      	ldr	r3, [pc, #408]	; (80022f8 <HAL_GPIO_Init+0x324>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	4a65      	ldr	r2, [pc, #404]	; (80022f8 <HAL_GPIO_Init+0x324>)
 8002164:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002168:	6453      	str	r3, [r2, #68]	; 0x44
 800216a:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <HAL_GPIO_Init+0x324>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002176:	4a61      	ldr	r2, [pc, #388]	; (80022fc <HAL_GPIO_Init+0x328>)
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	089b      	lsrs	r3, r3, #2
 800217c:	3302      	adds	r3, #2
 800217e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	220f      	movs	r2, #15
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a58      	ldr	r2, [pc, #352]	; (8002300 <HAL_GPIO_Init+0x32c>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d037      	beq.n	8002212 <HAL_GPIO_Init+0x23e>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a57      	ldr	r2, [pc, #348]	; (8002304 <HAL_GPIO_Init+0x330>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d031      	beq.n	800220e <HAL_GPIO_Init+0x23a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a56      	ldr	r2, [pc, #344]	; (8002308 <HAL_GPIO_Init+0x334>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d02b      	beq.n	800220a <HAL_GPIO_Init+0x236>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a55      	ldr	r2, [pc, #340]	; (800230c <HAL_GPIO_Init+0x338>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d025      	beq.n	8002206 <HAL_GPIO_Init+0x232>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a54      	ldr	r2, [pc, #336]	; (8002310 <HAL_GPIO_Init+0x33c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01f      	beq.n	8002202 <HAL_GPIO_Init+0x22e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a53      	ldr	r2, [pc, #332]	; (8002314 <HAL_GPIO_Init+0x340>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d019      	beq.n	80021fe <HAL_GPIO_Init+0x22a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a52      	ldr	r2, [pc, #328]	; (8002318 <HAL_GPIO_Init+0x344>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <HAL_GPIO_Init+0x226>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a51      	ldr	r2, [pc, #324]	; (800231c <HAL_GPIO_Init+0x348>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00d      	beq.n	80021f6 <HAL_GPIO_Init+0x222>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a50      	ldr	r2, [pc, #320]	; (8002320 <HAL_GPIO_Init+0x34c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d007      	beq.n	80021f2 <HAL_GPIO_Init+0x21e>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4f      	ldr	r2, [pc, #316]	; (8002324 <HAL_GPIO_Init+0x350>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x21a>
 80021ea:	2309      	movs	r3, #9
 80021ec:	e012      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021ee:	230a      	movs	r3, #10
 80021f0:	e010      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021f2:	2308      	movs	r3, #8
 80021f4:	e00e      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021f6:	2307      	movs	r3, #7
 80021f8:	e00c      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021fa:	2306      	movs	r3, #6
 80021fc:	e00a      	b.n	8002214 <HAL_GPIO_Init+0x240>
 80021fe:	2305      	movs	r3, #5
 8002200:	e008      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002202:	2304      	movs	r3, #4
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002206:	2303      	movs	r3, #3
 8002208:	e004      	b.n	8002214 <HAL_GPIO_Init+0x240>
 800220a:	2302      	movs	r3, #2
 800220c:	e002      	b.n	8002214 <HAL_GPIO_Init+0x240>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_GPIO_Init+0x240>
 8002212:	2300      	movs	r3, #0
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	f002 0203 	and.w	r2, r2, #3
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	4093      	lsls	r3, r2
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002224:	4935      	ldr	r1, [pc, #212]	; (80022fc <HAL_GPIO_Init+0x328>)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002232:	4b3d      	ldr	r3, [pc, #244]	; (8002328 <HAL_GPIO_Init+0x354>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002256:	4a34      	ldr	r2, [pc, #208]	; (8002328 <HAL_GPIO_Init+0x354>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800225c:	4b32      	ldr	r3, [pc, #200]	; (8002328 <HAL_GPIO_Init+0x354>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002280:	4a29      	ldr	r2, [pc, #164]	; (8002328 <HAL_GPIO_Init+0x354>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <HAL_GPIO_Init+0x354>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022aa:	4a1f      	ldr	r2, [pc, #124]	; (8002328 <HAL_GPIO_Init+0x354>)
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <HAL_GPIO_Init+0x354>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	43db      	mvns	r3, r3
 80022ba:	69ba      	ldr	r2, [r7, #24]
 80022bc:	4013      	ands	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d4:	4a14      	ldr	r2, [pc, #80]	; (8002328 <HAL_GPIO_Init+0x354>)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3301      	adds	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b0f      	cmp	r3, #15
 80022e4:	f67f ae86 	bls.w	8001ff4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022e8:	bf00      	nop
 80022ea:	bf00      	nop
 80022ec:	3724      	adds	r7, #36	; 0x24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40013800 	.word	0x40013800
 8002300:	40020000 	.word	0x40020000
 8002304:	40020400 	.word	0x40020400
 8002308:	40020800 	.word	0x40020800
 800230c:	40020c00 	.word	0x40020c00
 8002310:	40021000 	.word	0x40021000
 8002314:	40021400 	.word	0x40021400
 8002318:	40021800 	.word	0x40021800
 800231c:	40021c00 	.word	0x40021c00
 8002320:	40022000 	.word	0x40022000
 8002324:	40022400 	.word	0x40022400
 8002328:	40013c00 	.word	0x40013c00

0800232c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
 8002348:	e001      	b.n	800234e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800234e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002378:	e003      	b.n	8002382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800239a:	4b08      	ldr	r3, [pc, #32]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	88fb      	ldrh	r3, [r7, #6]
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d006      	beq.n	80023b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023a6:	4a05      	ldr	r2, [pc, #20]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7fe fada 	bl	8000968 <HAL_GPIO_EXTI_Callback>
  }
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40013c00 	.word	0x40013c00

080023c0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023c2:	b08f      	sub	sp, #60	; 0x3c
 80023c4:	af0a      	add	r7, sp, #40	; 0x28
 80023c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e116      	b.n	8002600 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff f803 	bl	80013f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2203      	movs	r2, #3
 80023f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d102      	bne.n	800240c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f003 fad7 	bl	80059c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	603b      	str	r3, [r7, #0]
 800241c:	687e      	ldr	r6, [r7, #4]
 800241e:	466d      	mov	r5, sp
 8002420:	f106 0410 	add.w	r4, r6, #16
 8002424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800242a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800242c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002430:	e885 0003 	stmia.w	r5, {r0, r1}
 8002434:	1d33      	adds	r3, r6, #4
 8002436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002438:	6838      	ldr	r0, [r7, #0]
 800243a:	f003 fa6b 	bl	8005914 <USB_CoreInit>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d005      	beq.n	8002450 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0d7      	b.n	8002600 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2100      	movs	r1, #0
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fac5 	bl	80059e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	e04a      	b.n	80024f8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002462:	7bfa      	ldrb	r2, [r7, #15]
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	440b      	add	r3, r1
 8002470:	333d      	adds	r3, #61	; 0x3d
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	00db      	lsls	r3, r3, #3
 800247e:	4413      	add	r3, r2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	440b      	add	r3, r1
 8002484:	333c      	adds	r3, #60	; 0x3c
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	b298      	uxth	r0, r3
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	3344      	adds	r3, #68	; 0x44
 800249e:	4602      	mov	r2, r0
 80024a0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	3340      	adds	r3, #64	; 0x40
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	4413      	add	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	3348      	adds	r3, #72	; 0x48
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	334c      	adds	r3, #76	; 0x4c
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	3354      	adds	r3, #84	; 0x54
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	3301      	adds	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	7bfa      	ldrb	r2, [r7, #15]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d3af      	bcc.n	8002462 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	e044      	b.n	8002592 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002508:	7bfa      	ldrb	r2, [r7, #15]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800251e:	7bfa      	ldrb	r2, [r7, #15]
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	4613      	mov	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	440b      	add	r3, r1
 800252c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002534:	7bfa      	ldrb	r2, [r7, #15]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800254a:	7bfa      	ldrb	r2, [r7, #15]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002560:	7bfa      	ldrb	r2, [r7, #15]
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002576:	7bfa      	ldrb	r2, [r7, #15]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3301      	adds	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	429a      	cmp	r2, r3
 800259a:	d3b5      	bcc.n	8002508 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	603b      	str	r3, [r7, #0]
 80025a2:	687e      	ldr	r6, [r7, #4]
 80025a4:	466d      	mov	r5, sp
 80025a6:	f106 0410 	add.w	r4, r6, #16
 80025aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80025ba:	1d33      	adds	r3, r6, #4
 80025bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025be:	6838      	ldr	r0, [r7, #0]
 80025c0:	f003 fa5e 	bl	8005a80 <USB_DevInit>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d005      	beq.n	80025d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2202      	movs	r2, #2
 80025ce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e014      	b.n	8002600 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f80a 	bl	8002608 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f003 fc1c 	bl	8005e36 <USB_DevDisconnect>

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002608 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002636:	4b05      	ldr	r3, [pc, #20]	; (800264c <HAL_PCDEx_ActivateLPM+0x44>)
 8002638:	4313      	orrs	r3, r2
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	10000003 	.word	0x10000003

08002650 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a04      	ldr	r2, [pc, #16]	; (800266c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800265a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265e:	6013      	str	r3, [r2, #0]
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40007000 	.word	0x40007000

08002670 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002678:	2300      	movs	r3, #0
 800267a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e291      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8087 	beq.w	80027a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002694:	4b96      	ldr	r3, [pc, #600]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b04      	cmp	r3, #4
 800269e:	d00c      	beq.n	80026ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a0:	4b93      	ldr	r3, [pc, #588]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d112      	bne.n	80026d2 <HAL_RCC_OscConfig+0x62>
 80026ac:	4b90      	ldr	r3, [pc, #576]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b8:	d10b      	bne.n	80026d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ba:	4b8d      	ldr	r3, [pc, #564]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d06c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x130>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d168      	bne.n	80027a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e26b      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x7a>
 80026dc:	4b84      	ldr	r3, [pc, #528]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a83      	ldr	r2, [pc, #524]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80026e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e02e      	b.n	8002748 <HAL_RCC_OscConfig+0xd8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10c      	bne.n	800270c <HAL_RCC_OscConfig+0x9c>
 80026f2:	4b7f      	ldr	r3, [pc, #508]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a7e      	ldr	r2, [pc, #504]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b7c      	ldr	r3, [pc, #496]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a7b      	ldr	r2, [pc, #492]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e01d      	b.n	8002748 <HAL_RCC_OscConfig+0xd8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0xc0>
 8002716:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a75      	ldr	r2, [pc, #468]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 800271c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	4b73      	ldr	r3, [pc, #460]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a72      	ldr	r2, [pc, #456]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	e00b      	b.n	8002748 <HAL_RCC_OscConfig+0xd8>
 8002730:	4b6f      	ldr	r3, [pc, #444]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a6e      	ldr	r2, [pc, #440]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b6c      	ldr	r3, [pc, #432]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a6b      	ldr	r2, [pc, #428]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d013      	beq.n	8002778 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe ff46 	bl	80015e0 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002758:	f7fe ff42 	bl	80015e0 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b64      	cmp	r3, #100	; 0x64
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e21f      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276a:	4b61      	ldr	r3, [pc, #388]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0xe8>
 8002776:	e014      	b.n	80027a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe ff32 	bl	80015e0 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002780:	f7fe ff2e 	bl	80015e0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b64      	cmp	r3, #100	; 0x64
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e20b      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002792:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x110>
 800279e:	e000      	b.n	80027a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d069      	beq.n	8002882 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80027ae:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00b      	beq.n	80027d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ba:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
 80027c2:	2b08      	cmp	r3, #8
 80027c4:	d11c      	bne.n	8002800 <HAL_RCC_OscConfig+0x190>
 80027c6:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d116      	bne.n	8002800 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d005      	beq.n	80027ea <HAL_RCC_OscConfig+0x17a>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d001      	beq.n	80027ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e1df      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	493d      	ldr	r1, [pc, #244]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	e040      	b.n	8002882 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d023      	beq.n	8002850 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002808:	4b39      	ldr	r3, [pc, #228]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a38      	ldr	r2, [pc, #224]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe fee4 	bl	80015e0 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281c:	f7fe fee0 	bl	80015e0 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e1bd      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800282e:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283a:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4929      	ldr	r1, [pc, #164]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
 800284e:	e018      	b.n	8002882 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002850:	4b27      	ldr	r3, [pc, #156]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a26      	ldr	r2, [pc, #152]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7fe fec0 	bl	80015e0 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002864:	f7fe febc 	bl	80015e0 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e199      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d038      	beq.n	8002900 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d019      	beq.n	80028ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002896:	4b16      	ldr	r3, [pc, #88]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800289a:	4a15      	ldr	r2, [pc, #84]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a2:	f7fe fe9d 	bl	80015e0 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028aa:	f7fe fe99 	bl	80015e0 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e176      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80028be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x23a>
 80028c8:	e01a      	b.n	8002900 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028ce:	4a08      	ldr	r2, [pc, #32]	; (80028f0 <HAL_RCC_OscConfig+0x280>)
 80028d0:	f023 0301 	bic.w	r3, r3, #1
 80028d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d6:	f7fe fe83 	bl	80015e0 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028de:	f7fe fe7f 	bl	80015e0 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d903      	bls.n	80028f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e15c      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
 80028f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f4:	4b91      	ldr	r3, [pc, #580]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ee      	bne.n	80028de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a4 	beq.w	8002a56 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290e:	4b8b      	ldr	r3, [pc, #556]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10d      	bne.n	8002936 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	4b88      	ldr	r3, [pc, #544]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	4a87      	ldr	r2, [pc, #540]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002924:	6413      	str	r3, [r2, #64]	; 0x40
 8002926:	4b85      	ldr	r3, [pc, #532]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002932:	2301      	movs	r3, #1
 8002934:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002936:	4b82      	ldr	r3, [pc, #520]	; (8002b40 <HAL_RCC_OscConfig+0x4d0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d118      	bne.n	8002974 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002942:	4b7f      	ldr	r3, [pc, #508]	; (8002b40 <HAL_RCC_OscConfig+0x4d0>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a7e      	ldr	r2, [pc, #504]	; (8002b40 <HAL_RCC_OscConfig+0x4d0>)
 8002948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800294e:	f7fe fe47 	bl	80015e0 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002956:	f7fe fe43 	bl	80015e0 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b64      	cmp	r3, #100	; 0x64
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e120      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002968:	4b75      	ldr	r3, [pc, #468]	; (8002b40 <HAL_RCC_OscConfig+0x4d0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x31a>
 800297c:	4b6f      	ldr	r3, [pc, #444]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002980:	4a6e      	ldr	r2, [pc, #440]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	6713      	str	r3, [r2, #112]	; 0x70
 8002988:	e02d      	b.n	80029e6 <HAL_RCC_OscConfig+0x376>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x33c>
 8002992:	4b6a      	ldr	r3, [pc, #424]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002996:	4a69      	ldr	r2, [pc, #420]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6713      	str	r3, [r2, #112]	; 0x70
 800299e:	4b67      	ldr	r3, [pc, #412]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a2:	4a66      	ldr	r2, [pc, #408]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80029a4:	f023 0304 	bic.w	r3, r3, #4
 80029a8:	6713      	str	r3, [r2, #112]	; 0x70
 80029aa:	e01c      	b.n	80029e6 <HAL_RCC_OscConfig+0x376>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d10c      	bne.n	80029ce <HAL_RCC_OscConfig+0x35e>
 80029b4:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80029b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b8:	4a60      	ldr	r2, [pc, #384]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	f043 0304 	orr.w	r3, r3, #4
 80029be:	6713      	str	r3, [r2, #112]	; 0x70
 80029c0:	4b5e      	ldr	r3, [pc, #376]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	4a5d      	ldr	r2, [pc, #372]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	6713      	str	r3, [r2, #112]	; 0x70
 80029cc:	e00b      	b.n	80029e6 <HAL_RCC_OscConfig+0x376>
 80029ce:	4b5b      	ldr	r3, [pc, #364]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a5a      	ldr	r2, [pc, #360]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	4b58      	ldr	r3, [pc, #352]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 80029e0:	f023 0304 	bic.w	r3, r3, #4
 80029e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d015      	beq.n	8002a1a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ee:	f7fe fdf7 	bl	80015e0 <HAL_GetTick>
 80029f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f4:	e00a      	b.n	8002a0c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f6:	f7fe fdf3 	bl	80015e0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e0ce      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0c:	4b4b      	ldr	r3, [pc, #300]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0ee      	beq.n	80029f6 <HAL_RCC_OscConfig+0x386>
 8002a18:	e014      	b.n	8002a44 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1a:	f7fe fde1 	bl	80015e0 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a20:	e00a      	b.n	8002a38 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fddd 	bl	80015e0 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0b8      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a38:	4b40      	ldr	r3, [pc, #256]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d1ee      	bne.n	8002a22 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4a:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4a3b      	ldr	r2, [pc, #236]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f000 80a4 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 030c 	and.w	r3, r3, #12
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d06b      	beq.n	8002b44 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d149      	bne.n	8002b08 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a74:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a30      	ldr	r2, [pc, #192]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fdae 	bl	80015e0 <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fe fdaa 	bl	80015e0 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e087      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69da      	ldr	r2, [r3, #28]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	019b      	lsls	r3, r3, #6
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	085b      	lsrs	r3, r3, #1
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	431a      	orrs	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac8:	061b      	lsls	r3, r3, #24
 8002aca:	4313      	orrs	r3, r2
 8002acc:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002ace:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002ad2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ad4:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fd7e 	bl	80015e0 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae6:	e008      	b.n	8002afa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae8:	f7fe fd7a 	bl	80015e0 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e057      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0f0      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x478>
 8002b06:	e04f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b08:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fd64 	bl	80015e0 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fd60 	bl	80015e0 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e03d      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	4b03      	ldr	r3, [pc, #12]	; (8002b3c <HAL_RCC_OscConfig+0x4cc>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x4ac>
 8002b3a:	e035      	b.n	8002ba8 <HAL_RCC_OscConfig+0x538>
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_RCC_OscConfig+0x544>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d028      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d121      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d11a      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b7a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d111      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8a:	085b      	lsrs	r3, r3, #1
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e000      	b.n	8002baa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800

08002bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0d0      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd0:	4b6a      	ldr	r3, [pc, #424]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d910      	bls.n	8002c00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bde:	4b67      	ldr	r3, [pc, #412]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 020f 	bic.w	r2, r3, #15
 8002be6:	4965      	ldr	r1, [pc, #404]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bee:	4b63      	ldr	r3, [pc, #396]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e0b8      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d020      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0304 	and.w	r3, r3, #4
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4a58      	ldr	r2, [pc, #352]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d005      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c30:	4b53      	ldr	r3, [pc, #332]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	4a52      	ldr	r2, [pc, #328]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c3c:	4b50      	ldr	r3, [pc, #320]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	494d      	ldr	r1, [pc, #308]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d040      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d107      	bne.n	8002c72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c62:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d115      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e07f      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d107      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7a:	4b41      	ldr	r3, [pc, #260]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e073      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8a:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06b      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c9a:	4b39      	ldr	r3, [pc, #228]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f023 0203 	bic.w	r2, r3, #3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4936      	ldr	r1, [pc, #216]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cac:	f7fe fc98 	bl	80015e0 <HAL_GetTick>
 8002cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb2:	e00a      	b.n	8002cca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb4:	f7fe fc94 	bl	80015e0 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e053      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 020c 	and.w	r2, r3, #12
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1eb      	bne.n	8002cb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d210      	bcs.n	8002d0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 020f 	bic.w	r2, r3, #15
 8002cf2:	4922      	ldr	r1, [pc, #136]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e032      	b.n	8002d72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d008      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d18:	4b19      	ldr	r3, [pc, #100]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	4916      	ldr	r1, [pc, #88]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	490e      	ldr	r1, [pc, #56]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d4a:	f000 f821 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_ClockConfig+0x1c8>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	490a      	ldr	r1, [pc, #40]	; (8002d84 <HAL_RCC_ClockConfig+0x1cc>)
 8002d5c:	5ccb      	ldrb	r3, [r1, r3]
 8002d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d62:	4a09      	ldr	r2, [pc, #36]	; (8002d88 <HAL_RCC_ClockConfig+0x1d0>)
 8002d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d66:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_RCC_ClockConfig+0x1d4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe fbf4 	bl	8001558 <HAL_InitTick>

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023c00 	.word	0x40023c00
 8002d80:	40023800 	.word	0x40023800
 8002d84:	08005f70 	.word	0x08005f70
 8002d88:	20000028 	.word	0x20000028
 8002d8c:	2000002c 	.word	0x2000002c

08002d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d94:	b094      	sub	sp, #80	; 0x50
 8002d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da0:	2300      	movs	r3, #0
 8002da2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002da4:	2300      	movs	r3, #0
 8002da6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002da8:	4b79      	ldr	r3, [pc, #484]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d00d      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	f200 80e1 	bhi.w	8002f7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d003      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x3a>
 8002dc2:	e0db      	b.n	8002f7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b73      	ldr	r3, [pc, #460]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dc8:	e0db      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dca:	4b73      	ldr	r3, [pc, #460]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dce:	e0d8      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd0:	4b6f      	ldr	r3, [pc, #444]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002dda:	4b6d      	ldr	r3, [pc, #436]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d063      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b6a      	ldr	r3, [pc, #424]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	2200      	movs	r2, #0
 8002dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002df0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8002dfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e02:	4622      	mov	r2, r4
 8002e04:	462b      	mov	r3, r5
 8002e06:	f04f 0000 	mov.w	r0, #0
 8002e0a:	f04f 0100 	mov.w	r1, #0
 8002e0e:	0159      	lsls	r1, r3, #5
 8002e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e14:	0150      	lsls	r0, r2, #5
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	1a51      	subs	r1, r2, r1
 8002e1e:	6139      	str	r1, [r7, #16]
 8002e20:	4629      	mov	r1, r5
 8002e22:	eb63 0301 	sbc.w	r3, r3, r1
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e34:	4659      	mov	r1, fp
 8002e36:	018b      	lsls	r3, r1, #6
 8002e38:	4651      	mov	r1, sl
 8002e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e3e:	4651      	mov	r1, sl
 8002e40:	018a      	lsls	r2, r1, #6
 8002e42:	4651      	mov	r1, sl
 8002e44:	ebb2 0801 	subs.w	r8, r2, r1
 8002e48:	4659      	mov	r1, fp
 8002e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e62:	4690      	mov	r8, r2
 8002e64:	4699      	mov	r9, r3
 8002e66:	4623      	mov	r3, r4
 8002e68:	eb18 0303 	adds.w	r3, r8, r3
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	462b      	mov	r3, r5
 8002e70:	eb49 0303 	adc.w	r3, r9, r3
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e82:	4629      	mov	r1, r5
 8002e84:	024b      	lsls	r3, r1, #9
 8002e86:	4621      	mov	r1, r4
 8002e88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	024a      	lsls	r2, r1, #9
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e96:	2200      	movs	r2, #0
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ea0:	f7fd f9ba 	bl	8000218 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002eac:	e058      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eae:	4b38      	ldr	r3, [pc, #224]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	099b      	lsrs	r3, r3, #6
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4611      	mov	r1, r2
 8002eba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ec8:	4642      	mov	r2, r8
 8002eca:	464b      	mov	r3, r9
 8002ecc:	f04f 0000 	mov.w	r0, #0
 8002ed0:	f04f 0100 	mov.w	r1, #0
 8002ed4:	0159      	lsls	r1, r3, #5
 8002ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eda:	0150      	lsls	r0, r2, #5
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4641      	mov	r1, r8
 8002ee2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ee6:	4649      	mov	r1, r9
 8002ee8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002eec:	f04f 0200 	mov.w	r2, #0
 8002ef0:	f04f 0300 	mov.w	r3, #0
 8002ef4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ef8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002efc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f00:	ebb2 040a 	subs.w	r4, r2, sl
 8002f04:	eb63 050b 	sbc.w	r5, r3, fp
 8002f08:	f04f 0200 	mov.w	r2, #0
 8002f0c:	f04f 0300 	mov.w	r3, #0
 8002f10:	00eb      	lsls	r3, r5, #3
 8002f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f16:	00e2      	lsls	r2, r4, #3
 8002f18:	4614      	mov	r4, r2
 8002f1a:	461d      	mov	r5, r3
 8002f1c:	4643      	mov	r3, r8
 8002f1e:	18e3      	adds	r3, r4, r3
 8002f20:	603b      	str	r3, [r7, #0]
 8002f22:	464b      	mov	r3, r9
 8002f24:	eb45 0303 	adc.w	r3, r5, r3
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f36:	4629      	mov	r1, r5
 8002f38:	028b      	lsls	r3, r1, #10
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f40:	4621      	mov	r1, r4
 8002f42:	028a      	lsls	r2, r1, #10
 8002f44:	4610      	mov	r0, r2
 8002f46:	4619      	mov	r1, r3
 8002f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
 8002f4e:	61fa      	str	r2, [r7, #28]
 8002f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f54:	f7fd f960 	bl	8000218 <__aeabi_uldivmod>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f7a:	e002      	b.n	8002f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f7c:	4b05      	ldr	r3, [pc, #20]	; (8002f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3750      	adds	r7, #80	; 0x50
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	007a1200 	.word	0x007a1200

08002f9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000028 	.word	0x20000028

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fb8:	f7ff fff0 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0a9b      	lsrs	r3, r3, #10
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4903      	ldr	r1, [pc, #12]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	08005f80 	.word	0x08005f80

08002fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002fe0:	f7ff ffdc 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	0b5b      	lsrs	r3, r3, #13
 8002fec:	f003 0307 	and.w	r3, r3, #7
 8002ff0:	4903      	ldr	r1, [pc, #12]	; (8003000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff2:	5ccb      	ldrb	r3, [r1, r3]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800
 8003000:	08005f80 	.word	0x08005f80

08003004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800300c:	2300      	movs	r3, #0
 800300e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003018:	2300      	movs	r3, #0
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b00      	cmp	r3, #0
 800302a:	d012      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800302c:	4b69      	ldr	r3, [pc, #420]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4a68      	ldr	r2, [pc, #416]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003032:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003036:	6093      	str	r3, [r2, #8]
 8003038:	4b66      	ldr	r3, [pc, #408]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003040:	4964      	ldr	r1, [pc, #400]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d017      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003064:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	4959      	ldr	r1, [pc, #356]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800307c:	d101      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800307e:	2301      	movs	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800308a:	2301      	movs	r3, #1
 800308c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d017      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800309a:	4b4e      	ldr	r3, [pc, #312]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800309c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	494a      	ldr	r1, [pc, #296]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030b8:	d101      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80030ba:	2301      	movs	r3, #1
 80030bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80030c6:	2301      	movs	r3, #1
 80030c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80030d6:	2301      	movs	r3, #1
 80030d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0320 	and.w	r3, r3, #32
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 808b 	beq.w	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030e8:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	4a39      	ldr	r2, [pc, #228]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f2:	6413      	str	r3, [r2, #64]	; 0x40
 80030f4:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003100:	4b35      	ldr	r3, [pc, #212]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a34      	ldr	r2, [pc, #208]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800310a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310c:	f7fe fa68 	bl	80015e0 <HAL_GetTick>
 8003110:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003114:	f7fe fa64 	bl	80015e0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	; 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e357      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003126:	4b2c      	ldr	r3, [pc, #176]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003132:	4b28      	ldr	r3, [pc, #160]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800313a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d035      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	429a      	cmp	r2, r3
 800314e:	d02e      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003150:	4b20      	ldr	r3, [pc, #128]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003158:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003164:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003166:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	4a1a      	ldr	r2, [pc, #104]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800316c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003170:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003172:	4a18      	ldr	r2, [pc, #96]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003178:	4b16      	ldr	r3, [pc, #88]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b01      	cmp	r3, #1
 8003182:	d114      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fa2c 	bl	80015e0 <HAL_GetTick>
 8003188:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe fa28 	bl	80015e0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e319      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ba:	d111      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031c8:	4b04      	ldr	r3, [pc, #16]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031ca:	400b      	ands	r3, r1
 80031cc:	4901      	ldr	r1, [pc, #4]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
 80031d2:	e00b      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80031d4:	40023800 	.word	0x40023800
 80031d8:	40007000 	.word	0x40007000
 80031dc:	0ffffcff 	.word	0x0ffffcff
 80031e0:	4baa      	ldr	r3, [pc, #680]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4aa9      	ldr	r2, [pc, #676]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031ea:	6093      	str	r3, [r2, #8]
 80031ec:	4ba7      	ldr	r3, [pc, #668]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	49a4      	ldr	r1, [pc, #656]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d010      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800320a:	4ba0      	ldr	r3, [pc, #640]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003210:	4a9e      	ldr	r2, [pc, #632]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003216:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800321a:	4b9c      	ldr	r3, [pc, #624]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800321c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	4999      	ldr	r1, [pc, #612]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003238:	4b94      	ldr	r3, [pc, #592]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003246:	4991      	ldr	r1, [pc, #580]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800325a:	4b8c      	ldr	r3, [pc, #560]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003268:	4988      	ldr	r1, [pc, #544]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800327c:	4b83      	ldr	r3, [pc, #524]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800328a:	4980      	ldr	r1, [pc, #512]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800328c:	4313      	orrs	r3, r2
 800328e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800329e:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4977      	ldr	r1, [pc, #476]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032c0:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c6:	f023 0203 	bic.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ce:	496f      	ldr	r1, [pc, #444]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032e2:	4b6a      	ldr	r3, [pc, #424]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e8:	f023 020c 	bic.w	r2, r3, #12
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f0:	4966      	ldr	r1, [pc, #408]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003304:	4b61      	ldr	r3, [pc, #388]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003312:	495e      	ldr	r1, [pc, #376]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003326:	4b59      	ldr	r3, [pc, #356]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	4955      	ldr	r1, [pc, #340]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003348:	4b50      	ldr	r3, [pc, #320]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	494d      	ldr	r1, [pc, #308]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800336a:	4b48      	ldr	r3, [pc, #288]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	4944      	ldr	r1, [pc, #272]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800338c:	4b3f      	ldr	r3, [pc, #252]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800339a:	493c      	ldr	r1, [pc, #240]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033bc:	4933      	ldr	r1, [pc, #204]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033d0:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033de:	492b      	ldr	r1, [pc, #172]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d011      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003400:	4922      	ldr	r1, [pc, #136]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800340c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003410:	d101      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003412:	2301      	movs	r3, #1
 8003414:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003422:	2301      	movs	r3, #1
 8003424:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003440:	4912      	ldr	r1, [pc, #72]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00b      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003454:	4b0d      	ldr	r3, [pc, #52]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003464:	4909      	ldr	r1, [pc, #36]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003466:	4313      	orrs	r3, r2
 8003468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d006      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 80d9 	beq.w	8003632 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003480:	4b02      	ldr	r3, [pc, #8]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a01      	ldr	r2, [pc, #4]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003486:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800348a:	e001      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800348c:	40023800 	.word	0x40023800
 8003490:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003492:	f7fe f8a5 	bl	80015e0 <HAL_GetTick>
 8003496:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003498:	e008      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800349a:	f7fe f8a1 	bl	80015e0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b64      	cmp	r3, #100	; 0x64
 80034a6:	d901      	bls.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e194      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80034ac:	4b6c      	ldr	r3, [pc, #432]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1f0      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d021      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d11d      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80034cc:	4b64      	ldr	r3, [pc, #400]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034d2:	0c1b      	lsrs	r3, r3, #16
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034da:	4b61      	ldr	r3, [pc, #388]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034e0:	0e1b      	lsrs	r3, r3, #24
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	019a      	lsls	r2, r3, #6
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	041b      	lsls	r3, r3, #16
 80034f2:	431a      	orrs	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	061b      	lsls	r3, r3, #24
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	071b      	lsls	r3, r3, #28
 8003500:	4957      	ldr	r1, [pc, #348]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d004      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800351c:	d00a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02e      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003532:	d129      	bne.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003534:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800353a:	0c1b      	lsrs	r3, r3, #16
 800353c:	f003 0303 	and.w	r3, r3, #3
 8003540:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003542:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003548:	0f1b      	lsrs	r3, r3, #28
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	019a      	lsls	r2, r3, #6
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	041b      	lsls	r3, r3, #16
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	061b      	lsls	r3, r3, #24
 8003562:	431a      	orrs	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	071b      	lsls	r3, r3, #28
 8003568:	493d      	ldr	r1, [pc, #244]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003570:	4b3b      	ldr	r3, [pc, #236]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003576:	f023 021f 	bic.w	r2, r3, #31
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357e:	3b01      	subs	r3, #1
 8003580:	4937      	ldr	r1, [pc, #220]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d01d      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003594:	4b32      	ldr	r3, [pc, #200]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800359a:	0e1b      	lsrs	r3, r3, #24
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80035a2:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a8:	0f1b      	lsrs	r3, r3, #28
 80035aa:	f003 0307 	and.w	r3, r3, #7
 80035ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	019a      	lsls	r2, r3, #6
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	041b      	lsls	r3, r3, #16
 80035bc:	431a      	orrs	r2, r3
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	061b      	lsls	r3, r3, #24
 80035c2:	431a      	orrs	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	071b      	lsls	r3, r3, #28
 80035c8:	4925      	ldr	r1, [pc, #148]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d011      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	019a      	lsls	r2, r3, #6
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	041b      	lsls	r3, r3, #16
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	061b      	lsls	r3, r3, #24
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	071b      	lsls	r3, r3, #28
 80035f8:	4919      	ldr	r1, [pc, #100]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003600:	4b17      	ldr	r3, [pc, #92]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a16      	ldr	r2, [pc, #88]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003606:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800360a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800360c:	f7fd ffe8 	bl	80015e0 <HAL_GetTick>
 8003610:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003614:	f7fd ffe4 	bl	80015e0 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	; 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e0d7      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003626:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	2b01      	cmp	r3, #1
 8003636:	f040 80cd 	bne.w	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800363a:	4b09      	ldr	r3, [pc, #36]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a08      	ldr	r2, [pc, #32]	; (8003660 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003646:	f7fd ffcb 	bl	80015e0 <HAL_GetTick>
 800364a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800364e:	f7fd ffc7 	bl	80015e0 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b64      	cmp	r3, #100	; 0x64
 800365a:	d903      	bls.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e0ba      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003660:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003664:	4b5e      	ldr	r3, [pc, #376]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800366c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003670:	d0ed      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d009      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800368e:	2b00      	cmp	r3, #0
 8003690:	d02e      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d12a      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800369a:	4b51      	ldr	r3, [pc, #324]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	0c1b      	lsrs	r3, r3, #16
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80036a8:	4b4d      	ldr	r3, [pc, #308]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ae:	0f1b      	lsrs	r3, r3, #28
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	019a      	lsls	r2, r3, #6
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	041b      	lsls	r3, r3, #16
 80036c0:	431a      	orrs	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	071b      	lsls	r3, r3, #28
 80036ce:	4944      	ldr	r1, [pc, #272]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80036d6:	4b42      	ldr	r3, [pc, #264]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	3b01      	subs	r3, #1
 80036e6:	021b      	lsls	r3, r3, #8
 80036e8:	493d      	ldr	r1, [pc, #244]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d022      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003704:	d11d      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003706:	4b36      	ldr	r3, [pc, #216]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370c:	0e1b      	lsrs	r3, r3, #24
 800370e:	f003 030f 	and.w	r3, r3, #15
 8003712:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003714:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371a:	0f1b      	lsrs	r3, r3, #28
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	019a      	lsls	r2, r3, #6
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	041b      	lsls	r3, r3, #16
 800372e:	431a      	orrs	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	061b      	lsls	r3, r3, #24
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	071b      	lsls	r3, r3, #28
 800373a:	4929      	ldr	r1, [pc, #164]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d028      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003754:	0e1b      	lsrs	r3, r3, #24
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800375c:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800375e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003762:	0c1b      	lsrs	r3, r3, #16
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	019a      	lsls	r2, r3, #6
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	041b      	lsls	r3, r3, #16
 8003774:	431a      	orrs	r2, r3
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	061b      	lsls	r3, r3, #24
 800377a:	431a      	orrs	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	071b      	lsls	r3, r3, #28
 8003782:	4917      	ldr	r1, [pc, #92]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800378c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003790:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	4911      	ldr	r1, [pc, #68]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80037a0:	4b0f      	ldr	r3, [pc, #60]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a0e      	ldr	r2, [pc, #56]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ac:	f7fd ff18 	bl	80015e0 <HAL_GetTick>
 80037b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80037b4:	f7fd ff14 	bl	80015e0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e007      	b.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037d2:	d1ef      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800

080037e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e049      	b.n	800388a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd fcb6 	bl	800117c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	4619      	mov	r1, r3
 8003822:	4610      	mov	r0, r2
 8003824:	f000 fbc6 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b082      	sub	sp, #8
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e049      	b.n	8003938 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d106      	bne.n	80038be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f841 	bl	8003940 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2202      	movs	r2, #2
 80038c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	4619      	mov	r1, r3
 80038d0:	4610      	mov	r0, r2
 80038d2:	f000 fb6f 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2201      	movs	r2, #1
 800391a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3708      	adds	r7, #8
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b02      	cmp	r3, #2
 8003968:	d122      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b02      	cmp	r3, #2
 8003976:	d11b      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f06f 0202 	mvn.w	r2, #2
 8003980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 faee 	bl	8003f78 <HAL_TIM_IC_CaptureCallback>
 800399c:	e005      	b.n	80039aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fae0 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 faf1 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d122      	bne.n	8003a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d11b      	bne.n	8003a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f06f 0204 	mvn.w	r2, #4
 80039d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2202      	movs	r2, #2
 80039da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fac4 	bl	8003f78 <HAL_TIM_IC_CaptureCallback>
 80039f0:	e005      	b.n	80039fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fab6 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f000 fac7 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d122      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d11b      	bne.n	8003a58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0208 	mvn.w	r2, #8
 8003a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69db      	ldr	r3, [r3, #28]
 8003a36:	f003 0303 	and.w	r3, r3, #3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa9a 	bl	8003f78 <HAL_TIM_IC_CaptureCallback>
 8003a44:	e005      	b.n	8003a52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 fa8c 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fa9d 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d122      	bne.n	8003aac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f003 0310 	and.w	r3, r3, #16
 8003a70:	2b10      	cmp	r3, #16
 8003a72:	d11b      	bne.n	8003aac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0210 	mvn.w	r2, #16
 8003a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2208      	movs	r2, #8
 8003a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa70 	bl	8003f78 <HAL_TIM_IC_CaptureCallback>
 8003a98:	e005      	b.n	8003aa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fa62 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fa73 	bl	8003f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d10e      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d107      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0201 	mvn.w	r2, #1
 8003ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fa3c 	bl	8003f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b80      	cmp	r3, #128	; 0x80
 8003ae4:	d10e      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	d107      	bne.n	8003b04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fe88 	bl	8004814 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b12:	d10e      	bne.n	8003b32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	2b80      	cmp	r3, #128	; 0x80
 8003b20:	d107      	bne.n	8003b32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fe7b 	bl	8004828 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3c:	2b40      	cmp	r3, #64	; 0x40
 8003b3e:	d10e      	bne.n	8003b5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b4a:	2b40      	cmp	r3, #64	; 0x40
 8003b4c:	d107      	bne.n	8003b5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fa21 	bl	8003fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0320 	and.w	r3, r3, #32
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d10e      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f003 0320 	and.w	r3, r3, #32
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d107      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f06f 0220 	mvn.w	r2, #32
 8003b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 fe3b 	bl	8004800 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b8a:	bf00      	nop
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e0ff      	b.n	8003db2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b14      	cmp	r3, #20
 8003bbe:	f200 80f0 	bhi.w	8003da2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003bc2:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc8:	08003c1d 	.word	0x08003c1d
 8003bcc:	08003da3 	.word	0x08003da3
 8003bd0:	08003da3 	.word	0x08003da3
 8003bd4:	08003da3 	.word	0x08003da3
 8003bd8:	08003c5d 	.word	0x08003c5d
 8003bdc:	08003da3 	.word	0x08003da3
 8003be0:	08003da3 	.word	0x08003da3
 8003be4:	08003da3 	.word	0x08003da3
 8003be8:	08003c9f 	.word	0x08003c9f
 8003bec:	08003da3 	.word	0x08003da3
 8003bf0:	08003da3 	.word	0x08003da3
 8003bf4:	08003da3 	.word	0x08003da3
 8003bf8:	08003cdf 	.word	0x08003cdf
 8003bfc:	08003da3 	.word	0x08003da3
 8003c00:	08003da3 	.word	0x08003da3
 8003c04:	08003da3 	.word	0x08003da3
 8003c08:	08003d21 	.word	0x08003d21
 8003c0c:	08003da3 	.word	0x08003da3
 8003c10:	08003da3 	.word	0x08003da3
 8003c14:	08003da3 	.word	0x08003da3
 8003c18:	08003d61 	.word	0x08003d61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fa66 	bl	80040f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0208 	orr.w	r2, r2, #8
 8003c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6999      	ldr	r1, [r3, #24]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	619a      	str	r2, [r3, #24]
      break;
 8003c5a:	e0a5      	b.n	8003da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fab8 	bl	80041d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6999      	ldr	r1, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	619a      	str	r2, [r3, #24]
      break;
 8003c9c:	e084      	b.n	8003da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fb0f 	bl	80042c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0208 	orr.w	r2, r2, #8
 8003cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0204 	bic.w	r2, r2, #4
 8003cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69d9      	ldr	r1, [r3, #28]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	61da      	str	r2, [r3, #28]
      break;
 8003cdc:	e064      	b.n	8003da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fb65 	bl	80043b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69d9      	ldr	r1, [r3, #28]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	021a      	lsls	r2, r3, #8
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	61da      	str	r2, [r3, #28]
      break;
 8003d1e:	e043      	b.n	8003da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fb9c 	bl	8004464 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0208 	orr.w	r2, r2, #8
 8003d3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d5e:	e023      	b.n	8003da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fbce 	bl	8004508 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	021a      	lsls	r2, r3, #8
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003da0:	e002      	b.n	8003da8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
      break;
 8003da6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003db0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop

08003dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e0b4      	b.n	8003f42 <HAL_TIM_ConfigClockSource+0x186>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <HAL_TIM_ConfigClockSource+0x190>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e10:	d03e      	beq.n	8003e90 <HAL_TIM_ConfigClockSource+0xd4>
 8003e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e16:	f200 8087 	bhi.w	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1e:	f000 8086 	beq.w	8003f2e <HAL_TIM_ConfigClockSource+0x172>
 8003e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e26:	d87f      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e28:	2b70      	cmp	r3, #112	; 0x70
 8003e2a:	d01a      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0xa6>
 8003e2c:	2b70      	cmp	r3, #112	; 0x70
 8003e2e:	d87b      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e30:	2b60      	cmp	r3, #96	; 0x60
 8003e32:	d050      	beq.n	8003ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8003e34:	2b60      	cmp	r3, #96	; 0x60
 8003e36:	d877      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e38:	2b50      	cmp	r3, #80	; 0x50
 8003e3a:	d03c      	beq.n	8003eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8003e3c:	2b50      	cmp	r3, #80	; 0x50
 8003e3e:	d873      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d058      	beq.n	8003ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8003e44:	2b40      	cmp	r3, #64	; 0x40
 8003e46:	d86f      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e48:	2b30      	cmp	r3, #48	; 0x30
 8003e4a:	d064      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x15a>
 8003e4c:	2b30      	cmp	r3, #48	; 0x30
 8003e4e:	d86b      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	d060      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x15a>
 8003e54:	2b20      	cmp	r3, #32
 8003e56:	d867      	bhi.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05c      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x15a>
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d05a      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0x15a>
 8003e60:	e062      	b.n	8003f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e72:	f000 fc17 	bl	80046a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	609a      	str	r2, [r3, #8]
      break;
 8003e8e:	e04f      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ea0:	f000 fc00 	bl	80046a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689a      	ldr	r2, [r3, #8]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eb2:	609a      	str	r2, [r3, #8]
      break;
 8003eb4:	e03c      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	f000 fb74 	bl	80045b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2150      	movs	r1, #80	; 0x50
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fbcd 	bl	800466e <TIM_ITRx_SetConfig>
      break;
 8003ed4:	e02c      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f000 fb93 	bl	800460e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2160      	movs	r1, #96	; 0x60
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fbbd 	bl	800466e <TIM_ITRx_SetConfig>
      break;
 8003ef4:	e01c      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f02:	461a      	mov	r2, r3
 8003f04:	f000 fb54 	bl	80045b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2140      	movs	r1, #64	; 0x40
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fbad 	bl	800466e <TIM_ITRx_SetConfig>
      break;
 8003f14:	e00c      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4619      	mov	r1, r3
 8003f20:	4610      	mov	r0, r2
 8003f22:	f000 fba4 	bl	800466e <TIM_ITRx_SetConfig>
      break;
 8003f26:	e003      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f2c:	e000      	b.n	8003f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	fffeff88 	.word	0xfffeff88

08003f50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a40      	ldr	r2, [pc, #256]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d013      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd2:	d00f      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3d      	ldr	r2, [pc, #244]	; (80040cc <TIM_Base_SetConfig+0x118>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00b      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3c      	ldr	r2, [pc, #240]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d007      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a3b      	ldr	r2, [pc, #236]	; (80040d4 <TIM_Base_SetConfig+0x120>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0x40>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a3a      	ldr	r2, [pc, #232]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d108      	bne.n	8004006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2f      	ldr	r2, [pc, #188]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d02b      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d027      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2c      	ldr	r2, [pc, #176]	; (80040cc <TIM_Base_SetConfig+0x118>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d023      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a2b      	ldr	r2, [pc, #172]	; (80040d0 <TIM_Base_SetConfig+0x11c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d01f      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a2a      	ldr	r2, [pc, #168]	; (80040d4 <TIM_Base_SetConfig+0x120>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d01b      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a29      	ldr	r2, [pc, #164]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d017      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a28      	ldr	r2, [pc, #160]	; (80040dc <TIM_Base_SetConfig+0x128>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <TIM_Base_SetConfig+0x12c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00f      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <TIM_Base_SetConfig+0x130>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00b      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a25      	ldr	r2, [pc, #148]	; (80040e8 <TIM_Base_SetConfig+0x134>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a24      	ldr	r2, [pc, #144]	; (80040ec <TIM_Base_SetConfig+0x138>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d003      	beq.n	8004066 <TIM_Base_SetConfig+0xb2>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a23      	ldr	r2, [pc, #140]	; (80040f0 <TIM_Base_SetConfig+0x13c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d108      	bne.n	8004078 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800406c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <TIM_Base_SetConfig+0x114>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d003      	beq.n	80040ac <TIM_Base_SetConfig+0xf8>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a0c      	ldr	r2, [pc, #48]	; (80040d8 <TIM_Base_SetConfig+0x124>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d103      	bne.n	80040b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	615a      	str	r2, [r3, #20]
}
 80040ba:	bf00      	nop
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40000400 	.word	0x40000400
 80040d0:	40000800 	.word	0x40000800
 80040d4:	40000c00 	.word	0x40000c00
 80040d8:	40010400 	.word	0x40010400
 80040dc:	40014000 	.word	0x40014000
 80040e0:	40014400 	.word	0x40014400
 80040e4:	40014800 	.word	0x40014800
 80040e8:	40001800 	.word	0x40001800
 80040ec:	40001c00 	.word	0x40001c00
 80040f0:	40002000 	.word	0x40002000

080040f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	f023 0201 	bic.w	r2, r3, #1
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <TIM_OC1_SetConfig+0xd8>)
 8004120:	4013      	ands	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0303 	bic.w	r3, r3, #3
 800412a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f023 0302 	bic.w	r3, r3, #2
 800413c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4313      	orrs	r3, r2
 8004146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <TIM_OC1_SetConfig+0xdc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_OC1_SetConfig+0x64>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a20      	ldr	r2, [pc, #128]	; (80041d4 <TIM_OC1_SetConfig+0xe0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d10c      	bne.n	8004172 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	f023 0308 	bic.w	r3, r3, #8
 800415e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	697a      	ldr	r2, [r7, #20]
 8004166:	4313      	orrs	r3, r2
 8004168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 0304 	bic.w	r3, r3, #4
 8004170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a16      	ldr	r2, [pc, #88]	; (80041d0 <TIM_OC1_SetConfig+0xdc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d003      	beq.n	8004182 <TIM_OC1_SetConfig+0x8e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <TIM_OC1_SetConfig+0xe0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d111      	bne.n	80041a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	621a      	str	r2, [r3, #32]
}
 80041c0:	bf00      	nop
 80041c2:	371c      	adds	r7, #28
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	fffeff8f 	.word	0xfffeff8f
 80041d0:	40010000 	.word	0x40010000
 80041d4:	40010400 	.word	0x40010400

080041d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	f023 0210 	bic.w	r2, r3, #16
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4b2e      	ldr	r3, [pc, #184]	; (80042bc <TIM_OC2_SetConfig+0xe4>)
 8004204:	4013      	ands	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800420e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f023 0320 	bic.w	r3, r3, #32
 8004222:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	697a      	ldr	r2, [r7, #20]
 800422c:	4313      	orrs	r3, r2
 800422e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <TIM_OC2_SetConfig+0xe8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d003      	beq.n	8004240 <TIM_OC2_SetConfig+0x68>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <TIM_OC2_SetConfig+0xec>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d10d      	bne.n	800425c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004246:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800425a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <TIM_OC2_SetConfig+0xe8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d003      	beq.n	800426c <TIM_OC2_SetConfig+0x94>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <TIM_OC2_SetConfig+0xec>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d113      	bne.n	8004294 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800427a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	feff8fff 	.word	0xfeff8fff
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40010400 	.word	0x40010400

080042c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1b      	ldr	r3, [r3, #32]
 80042e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4b2d      	ldr	r3, [pc, #180]	; (80043a8 <TIM_OC3_SetConfig+0xe0>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0303 	bic.w	r3, r3, #3
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	4313      	orrs	r3, r2
 800431c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a22      	ldr	r2, [pc, #136]	; (80043ac <TIM_OC3_SetConfig+0xe4>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_OC3_SetConfig+0x66>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a21      	ldr	r2, [pc, #132]	; (80043b0 <TIM_OC3_SetConfig+0xe8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d10d      	bne.n	800434a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a17      	ldr	r2, [pc, #92]	; (80043ac <TIM_OC3_SetConfig+0xe4>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d003      	beq.n	800435a <TIM_OC3_SetConfig+0x92>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <TIM_OC3_SetConfig+0xe8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d113      	bne.n	8004382 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4313      	orrs	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	693a      	ldr	r2, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	621a      	str	r2, [r3, #32]
}
 800439c:	bf00      	nop
 800439e:	371c      	adds	r7, #28
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	fffeff8f 	.word	0xfffeff8f
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40010400 	.word	0x40010400

080043b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <TIM_OC4_SetConfig+0xa4>)
 80043e0:	4013      	ands	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	031b      	lsls	r3, r3, #12
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a13      	ldr	r2, [pc, #76]	; (800445c <TIM_OC4_SetConfig+0xa8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_OC4_SetConfig+0x68>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <TIM_OC4_SetConfig+0xac>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d109      	bne.n	8004430 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	019b      	lsls	r3, r3, #6
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	feff8fff 	.word	0xfeff8fff
 800445c:	40010000 	.word	0x40010000
 8004460:	40010400 	.word	0x40010400

08004464 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <TIM_OC5_SetConfig+0x98>)
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80044a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a12      	ldr	r2, [pc, #72]	; (8004500 <TIM_OC5_SetConfig+0x9c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d003      	beq.n	80044c2 <TIM_OC5_SetConfig+0x5e>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a11      	ldr	r2, [pc, #68]	; (8004504 <TIM_OC5_SetConfig+0xa0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d109      	bne.n	80044d6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	697a      	ldr	r2, [r7, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	621a      	str	r2, [r3, #32]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	fffeff8f 	.word	0xfffeff8f
 8004500:	40010000 	.word	0x40010000
 8004504:	40010400 	.word	0x40010400

08004508 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	4b1c      	ldr	r3, [pc, #112]	; (80045a4 <TIM_OC6_SetConfig+0x9c>)
 8004534:	4013      	ands	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	021b      	lsls	r3, r3, #8
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800454a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	051b      	lsls	r3, r3, #20
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a13      	ldr	r2, [pc, #76]	; (80045a8 <TIM_OC6_SetConfig+0xa0>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d003      	beq.n	8004568 <TIM_OC6_SetConfig+0x60>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a12      	ldr	r2, [pc, #72]	; (80045ac <TIM_OC6_SetConfig+0xa4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d109      	bne.n	800457c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	695b      	ldr	r3, [r3, #20]
 8004574:	029b      	lsls	r3, r3, #10
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	621a      	str	r2, [r3, #32]
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	feff8fff 	.word	0xfeff8fff
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40010400 	.word	0x40010400

080045b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0201 	bic.w	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f023 030a 	bic.w	r3, r3, #10
 80045ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800460e:	b480      	push	{r7}
 8004610:	b087      	sub	sp, #28
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	f023 0210 	bic.w	r2, r3, #16
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a1b      	ldr	r3, [r3, #32]
 8004630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004638:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	031b      	lsls	r3, r3, #12
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800464a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	693a      	ldr	r2, [r7, #16]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	f043 0307 	orr.w	r3, r3, #7
 8004690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	609a      	str	r2, [r3, #8]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d101      	bne.n	80046fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046f8:	2302      	movs	r3, #2
 80046fa:	e06d      	b.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a30      	ldr	r2, [pc, #192]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a2f      	ldr	r2, [pc, #188]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d108      	bne.n	8004742 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004736:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004748:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a20      	ldr	r2, [pc, #128]	; (80047e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d022      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476e:	d01d      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1d      	ldr	r2, [pc, #116]	; (80047ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1c      	ldr	r2, [pc, #112]	; (80047f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a15      	ldr	r2, [pc, #84]	; (80047e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a15      	ldr	r2, [pc, #84]	; (80047fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d10c      	bne.n	80047c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2201      	movs	r2, #1
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3714      	adds	r7, #20
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	40010000 	.word	0x40010000
 80047e8:	40010400 	.word	0x40010400
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40014000 	.word	0x40014000
 80047fc:	40001800 	.word	0x40001800

08004800 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e040      	b.n	80048d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc fd34 	bl	80012cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2224      	movs	r2, #36	; 0x24
 8004868:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f022 0201 	bic.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fba2 	bl	8004fc4 <UART_SetConfig>
 8004880:	4603      	mov	r3, r0
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e022      	b.n	80048d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d002      	beq.n	8004898 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 fdfa 	bl	800548c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 fe81 	bl	80055d0 <UART_CheckIdleState>
 80048ce:	4603      	mov	r3, r0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d171      	bne.n	80049d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d002      	beq.n	80048fc <HAL_UART_Transmit+0x24>
 80048f6:	88fb      	ldrh	r3, [r7, #6]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e06a      	b.n	80049d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2221      	movs	r2, #33	; 0x21
 800490c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800490e:	f7fc fe67 	bl	80015e0 <HAL_GetTick>
 8004912:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	88fa      	ldrh	r2, [r7, #6]
 8004918:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	88fa      	ldrh	r2, [r7, #6]
 8004920:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492c:	d108      	bne.n	8004940 <HAL_UART_Transmit+0x68>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	e003      	b.n	8004948 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004948:	e02c      	b.n	80049a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	9300      	str	r3, [sp, #0]
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2200      	movs	r2, #0
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	f000 fe72 	bl	800563e <UART_WaitOnFlagUntilTimeout>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e038      	b.n	80049d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	881b      	ldrh	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004978:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	3302      	adds	r3, #2
 800497e:	61bb      	str	r3, [r7, #24]
 8004980:	e007      	b.n	8004992 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	781a      	ldrb	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	3301      	adds	r3, #1
 8004990:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1cc      	bne.n	800494a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	2200      	movs	r2, #0
 80049b8:	2140      	movs	r1, #64	; 0x40
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 fe3f 	bl	800563e <UART_WaitOnFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e005      	b.n	80049d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2220      	movs	r2, #32
 80049ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e000      	b.n	80049d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80049d4:	2302      	movs	r3, #2
  }
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3720      	adds	r7, #32
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b0ba      	sub	sp, #232	; 0xe8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004a06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004a0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8004a0e:	4013      	ands	r3, r2
 8004a10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d115      	bne.n	8004a48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00f      	beq.n	8004a48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8297 	beq.w	8004f6c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	4798      	blx	r3
      }
      return;
 8004a46:	e291      	b.n	8004f6c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004a48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 8117 	beq.w	8004c80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d106      	bne.n	8004a6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004a5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004a62:	4b85      	ldr	r3, [pc, #532]	; (8004c78 <HAL_UART_IRQHandler+0x298>)
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	f000 810a 	beq.w	8004c80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d011      	beq.n	8004a9c <HAL_UART_IRQHandler+0xbc>
 8004a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a92:	f043 0201 	orr.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d011      	beq.n	8004acc <HAL_UART_IRQHandler+0xec>
 8004aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2202      	movs	r2, #2
 8004aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ac2:	f043 0204 	orr.w	r2, r3, #4
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d011      	beq.n	8004afc <HAL_UART_IRQHandler+0x11c>
 8004ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00b      	beq.n	8004afc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004af2:	f043 0202 	orr.w	r2, r3, #2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d017      	beq.n	8004b38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b0c:	f003 0320 	and.w	r3, r3, #32
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004b14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00b      	beq.n	8004b38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2208      	movs	r2, #8
 8004b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b2e:	f043 0208 	orr.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d012      	beq.n	8004b6a <HAL_UART_IRQHandler+0x18a>
 8004b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00c      	beq.n	8004b6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b60:	f043 0220 	orr.w	r2, r3, #32
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 81fd 	beq.w	8004f70 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b7a:	f003 0320 	and.w	r3, r3, #32
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00d      	beq.n	8004b9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b86:	f003 0320 	and.w	r3, r3, #32
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d007      	beq.n	8004b9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d005      	beq.n	8004bc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d04f      	beq.n	8004c62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fe01 	bl	80057ca <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd2:	2b40      	cmp	r3, #64	; 0x40
 8004bd4:	d141      	bne.n	8004c5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3308      	adds	r3, #8
 8004bdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004bec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004bf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c12:	e841 2300 	strex	r3, r2, [r1]
 8004c16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1d9      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d013      	beq.n	8004c52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2e:	4a13      	ldr	r2, [pc, #76]	; (8004c7c <HAL_UART_IRQHandler+0x29c>)
 8004c30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fc fe83 	bl	8001942 <HAL_DMA_Abort_IT>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d017      	beq.n	8004c72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c50:	e00f      	b.n	8004c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f9a0 	bl	8004f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c58:	e00b      	b.n	8004c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f99c 	bl	8004f98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c60:	e007      	b.n	8004c72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f998 	bl	8004f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004c70:	e17e      	b.n	8004f70 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c72:	bf00      	nop
    return;
 8004c74:	e17c      	b.n	8004f70 <HAL_UART_IRQHandler+0x590>
 8004c76:	bf00      	nop
 8004c78:	04000120 	.word	0x04000120
 8004c7c:	08005893 	.word	0x08005893

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	f040 814c 	bne.w	8004f22 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 8145 	beq.w	8004f22 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 813e 	beq.w	8004f22 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2210      	movs	r2, #16
 8004cac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b40      	cmp	r3, #64	; 0x40
 8004cba:	f040 80b6 	bne.w	8004e2a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004cca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8150 	beq.w	8004f74 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004cda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	f080 8148 	bcs.w	8004f74 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cf8:	f000 8086 	beq.w	8004e08 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004d26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004d2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d36:	e841 2300 	strex	r3, r2, [r1]
 8004d3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1da      	bne.n	8004cfc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	3308      	adds	r3, #8
 8004d4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3308      	adds	r3, #8
 8004d66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e1      	bne.n	8004d46 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3308      	adds	r3, #8
 8004d88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3308      	adds	r3, #8
 8004da2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004da6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004da8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e3      	bne.n	8004d82 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd8:	f023 0310 	bic.w	r3, r3, #16
 8004ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004dea:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004df2:	e841 2300 	strex	r3, r2, [r1]
 8004df6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1e4      	bne.n	8004dc8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fc fd2d 	bl	8001862 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f8c2 	bl	8004fac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004e28:	e0a4      	b.n	8004f74 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8096 	beq.w	8004f78 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8091 	beq.w	8004f78 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	e853 3f00 	ldrex	r3, [r3]
 8004e62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004e78:	647b      	str	r3, [r7, #68]	; 0x44
 8004e7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e80:	e841 2300 	strex	r3, r2, [r1]
 8004e84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1e4      	bne.n	8004e56 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3308      	adds	r3, #8
 8004e92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e96:	e853 3f00 	ldrex	r3, [r3]
 8004e9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004eb0:	633a      	str	r2, [r7, #48]	; 0x30
 8004eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb8:	e841 2300 	strex	r3, r2, [r1]
 8004ebc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1e3      	bne.n	8004e8c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f023 0310 	bic.w	r3, r3, #16
 8004eec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004efa:	61fb      	str	r3, [r7, #28]
 8004efc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	69b9      	ldr	r1, [r7, #24]
 8004f00:	69fa      	ldr	r2, [r7, #28]
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	617b      	str	r3, [r7, #20]
   return(result);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e4      	bne.n	8004ed8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f846 	bl	8004fac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004f20:	e02a      	b.n	8004f78 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00e      	beq.n	8004f4c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004f2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d008      	beq.n	8004f4c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d01c      	beq.n	8004f7c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	4798      	blx	r3
    }
    return;
 8004f4a:	e017      	b.n	8004f7c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d012      	beq.n	8004f7e <HAL_UART_IRQHandler+0x59e>
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00c      	beq.n	8004f7e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fcaa 	bl	80058be <UART_EndTransmit_IT>
    return;
 8004f6a:	e008      	b.n	8004f7e <HAL_UART_IRQHandler+0x59e>
      return;
 8004f6c:	bf00      	nop
 8004f6e:	e006      	b.n	8004f7e <HAL_UART_IRQHandler+0x59e>
    return;
 8004f70:	bf00      	nop
 8004f72:	e004      	b.n	8004f7e <HAL_UART_IRQHandler+0x59e>
      return;
 8004f74:	bf00      	nop
 8004f76:	e002      	b.n	8004f7e <HAL_UART_IRQHandler+0x59e>
      return;
 8004f78:	bf00      	nop
 8004f7a:	e000      	b.n	8004f7e <HAL_UART_IRQHandler+0x59e>
    return;
 8004f7c:	bf00      	nop
  }

}
 8004f7e:	37e8      	adds	r7, #232	; 0xe8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	431a      	orrs	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4ba6      	ldr	r3, [pc, #664]	; (8005288 <UART_SetConfig+0x2c4>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	6812      	ldr	r2, [r2, #0]
 8004ff6:	6979      	ldr	r1, [r7, #20]
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68da      	ldr	r2, [r3, #12]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	430a      	orrs	r2, r1
 8005034:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a94      	ldr	r2, [pc, #592]	; (800528c <UART_SetConfig+0x2c8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d120      	bne.n	8005082 <UART_SetConfig+0xbe>
 8005040:	4b93      	ldr	r3, [pc, #588]	; (8005290 <UART_SetConfig+0x2cc>)
 8005042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	2b03      	cmp	r3, #3
 800504c:	d816      	bhi.n	800507c <UART_SetConfig+0xb8>
 800504e:	a201      	add	r2, pc, #4	; (adr r2, 8005054 <UART_SetConfig+0x90>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	08005065 	.word	0x08005065
 8005058:	08005071 	.word	0x08005071
 800505c:	0800506b 	.word	0x0800506b
 8005060:	08005077 	.word	0x08005077
 8005064:	2301      	movs	r3, #1
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e150      	b.n	800530c <UART_SetConfig+0x348>
 800506a:	2302      	movs	r3, #2
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e14d      	b.n	800530c <UART_SetConfig+0x348>
 8005070:	2304      	movs	r3, #4
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e14a      	b.n	800530c <UART_SetConfig+0x348>
 8005076:	2308      	movs	r3, #8
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e147      	b.n	800530c <UART_SetConfig+0x348>
 800507c:	2310      	movs	r3, #16
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e144      	b.n	800530c <UART_SetConfig+0x348>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a83      	ldr	r2, [pc, #524]	; (8005294 <UART_SetConfig+0x2d0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d132      	bne.n	80050f2 <UART_SetConfig+0x12e>
 800508c:	4b80      	ldr	r3, [pc, #512]	; (8005290 <UART_SetConfig+0x2cc>)
 800508e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005092:	f003 030c 	and.w	r3, r3, #12
 8005096:	2b0c      	cmp	r3, #12
 8005098:	d828      	bhi.n	80050ec <UART_SetConfig+0x128>
 800509a:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <UART_SetConfig+0xdc>)
 800509c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a0:	080050d5 	.word	0x080050d5
 80050a4:	080050ed 	.word	0x080050ed
 80050a8:	080050ed 	.word	0x080050ed
 80050ac:	080050ed 	.word	0x080050ed
 80050b0:	080050e1 	.word	0x080050e1
 80050b4:	080050ed 	.word	0x080050ed
 80050b8:	080050ed 	.word	0x080050ed
 80050bc:	080050ed 	.word	0x080050ed
 80050c0:	080050db 	.word	0x080050db
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	080050ed 	.word	0x080050ed
 80050d0:	080050e7 	.word	0x080050e7
 80050d4:	2300      	movs	r3, #0
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e118      	b.n	800530c <UART_SetConfig+0x348>
 80050da:	2302      	movs	r3, #2
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e115      	b.n	800530c <UART_SetConfig+0x348>
 80050e0:	2304      	movs	r3, #4
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e112      	b.n	800530c <UART_SetConfig+0x348>
 80050e6:	2308      	movs	r3, #8
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e10f      	b.n	800530c <UART_SetConfig+0x348>
 80050ec:	2310      	movs	r3, #16
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	e10c      	b.n	800530c <UART_SetConfig+0x348>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a68      	ldr	r2, [pc, #416]	; (8005298 <UART_SetConfig+0x2d4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d120      	bne.n	800513e <UART_SetConfig+0x17a>
 80050fc:	4b64      	ldr	r3, [pc, #400]	; (8005290 <UART_SetConfig+0x2cc>)
 80050fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005102:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005106:	2b30      	cmp	r3, #48	; 0x30
 8005108:	d013      	beq.n	8005132 <UART_SetConfig+0x16e>
 800510a:	2b30      	cmp	r3, #48	; 0x30
 800510c:	d814      	bhi.n	8005138 <UART_SetConfig+0x174>
 800510e:	2b20      	cmp	r3, #32
 8005110:	d009      	beq.n	8005126 <UART_SetConfig+0x162>
 8005112:	2b20      	cmp	r3, #32
 8005114:	d810      	bhi.n	8005138 <UART_SetConfig+0x174>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <UART_SetConfig+0x15c>
 800511a:	2b10      	cmp	r3, #16
 800511c:	d006      	beq.n	800512c <UART_SetConfig+0x168>
 800511e:	e00b      	b.n	8005138 <UART_SetConfig+0x174>
 8005120:	2300      	movs	r3, #0
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e0f2      	b.n	800530c <UART_SetConfig+0x348>
 8005126:	2302      	movs	r3, #2
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e0ef      	b.n	800530c <UART_SetConfig+0x348>
 800512c:	2304      	movs	r3, #4
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e0ec      	b.n	800530c <UART_SetConfig+0x348>
 8005132:	2308      	movs	r3, #8
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e0e9      	b.n	800530c <UART_SetConfig+0x348>
 8005138:	2310      	movs	r3, #16
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	e0e6      	b.n	800530c <UART_SetConfig+0x348>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a56      	ldr	r2, [pc, #344]	; (800529c <UART_SetConfig+0x2d8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d120      	bne.n	800518a <UART_SetConfig+0x1c6>
 8005148:	4b51      	ldr	r3, [pc, #324]	; (8005290 <UART_SetConfig+0x2cc>)
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005152:	2bc0      	cmp	r3, #192	; 0xc0
 8005154:	d013      	beq.n	800517e <UART_SetConfig+0x1ba>
 8005156:	2bc0      	cmp	r3, #192	; 0xc0
 8005158:	d814      	bhi.n	8005184 <UART_SetConfig+0x1c0>
 800515a:	2b80      	cmp	r3, #128	; 0x80
 800515c:	d009      	beq.n	8005172 <UART_SetConfig+0x1ae>
 800515e:	2b80      	cmp	r3, #128	; 0x80
 8005160:	d810      	bhi.n	8005184 <UART_SetConfig+0x1c0>
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <UART_SetConfig+0x1a8>
 8005166:	2b40      	cmp	r3, #64	; 0x40
 8005168:	d006      	beq.n	8005178 <UART_SetConfig+0x1b4>
 800516a:	e00b      	b.n	8005184 <UART_SetConfig+0x1c0>
 800516c:	2300      	movs	r3, #0
 800516e:	77fb      	strb	r3, [r7, #31]
 8005170:	e0cc      	b.n	800530c <UART_SetConfig+0x348>
 8005172:	2302      	movs	r3, #2
 8005174:	77fb      	strb	r3, [r7, #31]
 8005176:	e0c9      	b.n	800530c <UART_SetConfig+0x348>
 8005178:	2304      	movs	r3, #4
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e0c6      	b.n	800530c <UART_SetConfig+0x348>
 800517e:	2308      	movs	r3, #8
 8005180:	77fb      	strb	r3, [r7, #31]
 8005182:	e0c3      	b.n	800530c <UART_SetConfig+0x348>
 8005184:	2310      	movs	r3, #16
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	e0c0      	b.n	800530c <UART_SetConfig+0x348>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a44      	ldr	r2, [pc, #272]	; (80052a0 <UART_SetConfig+0x2dc>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d125      	bne.n	80051e0 <UART_SetConfig+0x21c>
 8005194:	4b3e      	ldr	r3, [pc, #248]	; (8005290 <UART_SetConfig+0x2cc>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a2:	d017      	beq.n	80051d4 <UART_SetConfig+0x210>
 80051a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051a8:	d817      	bhi.n	80051da <UART_SetConfig+0x216>
 80051aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051ae:	d00b      	beq.n	80051c8 <UART_SetConfig+0x204>
 80051b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b4:	d811      	bhi.n	80051da <UART_SetConfig+0x216>
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <UART_SetConfig+0x1fe>
 80051ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051be:	d006      	beq.n	80051ce <UART_SetConfig+0x20a>
 80051c0:	e00b      	b.n	80051da <UART_SetConfig+0x216>
 80051c2:	2300      	movs	r3, #0
 80051c4:	77fb      	strb	r3, [r7, #31]
 80051c6:	e0a1      	b.n	800530c <UART_SetConfig+0x348>
 80051c8:	2302      	movs	r3, #2
 80051ca:	77fb      	strb	r3, [r7, #31]
 80051cc:	e09e      	b.n	800530c <UART_SetConfig+0x348>
 80051ce:	2304      	movs	r3, #4
 80051d0:	77fb      	strb	r3, [r7, #31]
 80051d2:	e09b      	b.n	800530c <UART_SetConfig+0x348>
 80051d4:	2308      	movs	r3, #8
 80051d6:	77fb      	strb	r3, [r7, #31]
 80051d8:	e098      	b.n	800530c <UART_SetConfig+0x348>
 80051da:	2310      	movs	r3, #16
 80051dc:	77fb      	strb	r3, [r7, #31]
 80051de:	e095      	b.n	800530c <UART_SetConfig+0x348>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a2f      	ldr	r2, [pc, #188]	; (80052a4 <UART_SetConfig+0x2e0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d125      	bne.n	8005236 <UART_SetConfig+0x272>
 80051ea:	4b29      	ldr	r3, [pc, #164]	; (8005290 <UART_SetConfig+0x2cc>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051f8:	d017      	beq.n	800522a <UART_SetConfig+0x266>
 80051fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80051fe:	d817      	bhi.n	8005230 <UART_SetConfig+0x26c>
 8005200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005204:	d00b      	beq.n	800521e <UART_SetConfig+0x25a>
 8005206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520a:	d811      	bhi.n	8005230 <UART_SetConfig+0x26c>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d003      	beq.n	8005218 <UART_SetConfig+0x254>
 8005210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005214:	d006      	beq.n	8005224 <UART_SetConfig+0x260>
 8005216:	e00b      	b.n	8005230 <UART_SetConfig+0x26c>
 8005218:	2301      	movs	r3, #1
 800521a:	77fb      	strb	r3, [r7, #31]
 800521c:	e076      	b.n	800530c <UART_SetConfig+0x348>
 800521e:	2302      	movs	r3, #2
 8005220:	77fb      	strb	r3, [r7, #31]
 8005222:	e073      	b.n	800530c <UART_SetConfig+0x348>
 8005224:	2304      	movs	r3, #4
 8005226:	77fb      	strb	r3, [r7, #31]
 8005228:	e070      	b.n	800530c <UART_SetConfig+0x348>
 800522a:	2308      	movs	r3, #8
 800522c:	77fb      	strb	r3, [r7, #31]
 800522e:	e06d      	b.n	800530c <UART_SetConfig+0x348>
 8005230:	2310      	movs	r3, #16
 8005232:	77fb      	strb	r3, [r7, #31]
 8005234:	e06a      	b.n	800530c <UART_SetConfig+0x348>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <UART_SetConfig+0x2e4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d138      	bne.n	80052b2 <UART_SetConfig+0x2ee>
 8005240:	4b13      	ldr	r3, [pc, #76]	; (8005290 <UART_SetConfig+0x2cc>)
 8005242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005246:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800524a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800524e:	d017      	beq.n	8005280 <UART_SetConfig+0x2bc>
 8005250:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005254:	d82a      	bhi.n	80052ac <UART_SetConfig+0x2e8>
 8005256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525a:	d00b      	beq.n	8005274 <UART_SetConfig+0x2b0>
 800525c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005260:	d824      	bhi.n	80052ac <UART_SetConfig+0x2e8>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <UART_SetConfig+0x2aa>
 8005266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800526a:	d006      	beq.n	800527a <UART_SetConfig+0x2b6>
 800526c:	e01e      	b.n	80052ac <UART_SetConfig+0x2e8>
 800526e:	2300      	movs	r3, #0
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e04b      	b.n	800530c <UART_SetConfig+0x348>
 8005274:	2302      	movs	r3, #2
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e048      	b.n	800530c <UART_SetConfig+0x348>
 800527a:	2304      	movs	r3, #4
 800527c:	77fb      	strb	r3, [r7, #31]
 800527e:	e045      	b.n	800530c <UART_SetConfig+0x348>
 8005280:	2308      	movs	r3, #8
 8005282:	77fb      	strb	r3, [r7, #31]
 8005284:	e042      	b.n	800530c <UART_SetConfig+0x348>
 8005286:	bf00      	nop
 8005288:	efff69f3 	.word	0xefff69f3
 800528c:	40011000 	.word	0x40011000
 8005290:	40023800 	.word	0x40023800
 8005294:	40004400 	.word	0x40004400
 8005298:	40004800 	.word	0x40004800
 800529c:	40004c00 	.word	0x40004c00
 80052a0:	40005000 	.word	0x40005000
 80052a4:	40011400 	.word	0x40011400
 80052a8:	40007800 	.word	0x40007800
 80052ac:	2310      	movs	r3, #16
 80052ae:	77fb      	strb	r3, [r7, #31]
 80052b0:	e02c      	b.n	800530c <UART_SetConfig+0x348>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a72      	ldr	r2, [pc, #456]	; (8005480 <UART_SetConfig+0x4bc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d125      	bne.n	8005308 <UART_SetConfig+0x344>
 80052bc:	4b71      	ldr	r3, [pc, #452]	; (8005484 <UART_SetConfig+0x4c0>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80052c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052ca:	d017      	beq.n	80052fc <UART_SetConfig+0x338>
 80052cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052d0:	d817      	bhi.n	8005302 <UART_SetConfig+0x33e>
 80052d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052d6:	d00b      	beq.n	80052f0 <UART_SetConfig+0x32c>
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052dc:	d811      	bhi.n	8005302 <UART_SetConfig+0x33e>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <UART_SetConfig+0x326>
 80052e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052e6:	d006      	beq.n	80052f6 <UART_SetConfig+0x332>
 80052e8:	e00b      	b.n	8005302 <UART_SetConfig+0x33e>
 80052ea:	2300      	movs	r3, #0
 80052ec:	77fb      	strb	r3, [r7, #31]
 80052ee:	e00d      	b.n	800530c <UART_SetConfig+0x348>
 80052f0:	2302      	movs	r3, #2
 80052f2:	77fb      	strb	r3, [r7, #31]
 80052f4:	e00a      	b.n	800530c <UART_SetConfig+0x348>
 80052f6:	2304      	movs	r3, #4
 80052f8:	77fb      	strb	r3, [r7, #31]
 80052fa:	e007      	b.n	800530c <UART_SetConfig+0x348>
 80052fc:	2308      	movs	r3, #8
 80052fe:	77fb      	strb	r3, [r7, #31]
 8005300:	e004      	b.n	800530c <UART_SetConfig+0x348>
 8005302:	2310      	movs	r3, #16
 8005304:	77fb      	strb	r3, [r7, #31]
 8005306:	e001      	b.n	800530c <UART_SetConfig+0x348>
 8005308:	2310      	movs	r3, #16
 800530a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005314:	d15b      	bne.n	80053ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005316:	7ffb      	ldrb	r3, [r7, #31]
 8005318:	2b08      	cmp	r3, #8
 800531a:	d828      	bhi.n	800536e <UART_SetConfig+0x3aa>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <UART_SetConfig+0x360>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005349 	.word	0x08005349
 8005328:	08005351 	.word	0x08005351
 800532c:	08005359 	.word	0x08005359
 8005330:	0800536f 	.word	0x0800536f
 8005334:	0800535f 	.word	0x0800535f
 8005338:	0800536f 	.word	0x0800536f
 800533c:	0800536f 	.word	0x0800536f
 8005340:	0800536f 	.word	0x0800536f
 8005344:	08005367 	.word	0x08005367
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005348:	f7fd fe34 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 800534c:	61b8      	str	r0, [r7, #24]
        break;
 800534e:	e013      	b.n	8005378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005350:	f7fd fe44 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 8005354:	61b8      	str	r0, [r7, #24]
        break;
 8005356:	e00f      	b.n	8005378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005358:	4b4b      	ldr	r3, [pc, #300]	; (8005488 <UART_SetConfig+0x4c4>)
 800535a:	61bb      	str	r3, [r7, #24]
        break;
 800535c:	e00c      	b.n	8005378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535e:	f7fd fd17 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8005362:	61b8      	str	r0, [r7, #24]
        break;
 8005364:	e008      	b.n	8005378 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005366:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800536a:	61bb      	str	r3, [r7, #24]
        break;
 800536c:	e004      	b.n	8005378 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800536e:	2300      	movs	r3, #0
 8005370:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	77bb      	strb	r3, [r7, #30]
        break;
 8005376:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d074      	beq.n	8005468 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	005a      	lsls	r2, r3, #1
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	085b      	lsrs	r3, r3, #1
 8005388:	441a      	add	r2, r3
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005392:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0f      	cmp	r3, #15
 8005398:	d916      	bls.n	80053c8 <UART_SetConfig+0x404>
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053a0:	d212      	bcs.n	80053c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f023 030f 	bic.w	r3, r3, #15
 80053aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	89fb      	ldrh	r3, [r7, #14]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	89fa      	ldrh	r2, [r7, #14]
 80053c4:	60da      	str	r2, [r3, #12]
 80053c6:	e04f      	b.n	8005468 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	77bb      	strb	r3, [r7, #30]
 80053cc:	e04c      	b.n	8005468 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053ce:	7ffb      	ldrb	r3, [r7, #31]
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d828      	bhi.n	8005426 <UART_SetConfig+0x462>
 80053d4:	a201      	add	r2, pc, #4	; (adr r2, 80053dc <UART_SetConfig+0x418>)
 80053d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053da:	bf00      	nop
 80053dc:	08005401 	.word	0x08005401
 80053e0:	08005409 	.word	0x08005409
 80053e4:	08005411 	.word	0x08005411
 80053e8:	08005427 	.word	0x08005427
 80053ec:	08005417 	.word	0x08005417
 80053f0:	08005427 	.word	0x08005427
 80053f4:	08005427 	.word	0x08005427
 80053f8:	08005427 	.word	0x08005427
 80053fc:	0800541f 	.word	0x0800541f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005400:	f7fd fdd8 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8005404:	61b8      	str	r0, [r7, #24]
        break;
 8005406:	e013      	b.n	8005430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005408:	f7fd fde8 	bl	8002fdc <HAL_RCC_GetPCLK2Freq>
 800540c:	61b8      	str	r0, [r7, #24]
        break;
 800540e:	e00f      	b.n	8005430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005410:	4b1d      	ldr	r3, [pc, #116]	; (8005488 <UART_SetConfig+0x4c4>)
 8005412:	61bb      	str	r3, [r7, #24]
        break;
 8005414:	e00c      	b.n	8005430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005416:	f7fd fcbb 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 800541a:	61b8      	str	r0, [r7, #24]
        break;
 800541c:	e008      	b.n	8005430 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800541e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005422:	61bb      	str	r3, [r7, #24]
        break;
 8005424:	e004      	b.n	8005430 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005426:	2300      	movs	r3, #0
 8005428:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	77bb      	strb	r3, [r7, #30]
        break;
 800542e:	bf00      	nop
    }

    if (pclk != 0U)
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d018      	beq.n	8005468 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	085a      	lsrs	r2, r3, #1
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	441a      	add	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b0f      	cmp	r3, #15
 800544e:	d909      	bls.n	8005464 <UART_SetConfig+0x4a0>
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005456:	d205      	bcs.n	8005464 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	b29a      	uxth	r2, r3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	60da      	str	r2, [r3, #12]
 8005462:	e001      	b.n	8005468 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005474:	7fbb      	ldrb	r3, [r7, #30]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3720      	adds	r7, #32
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40007c00 	.word	0x40007c00
 8005484:	40023800 	.word	0x40023800
 8005488:	00f42400 	.word	0x00f42400

0800548c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00a      	beq.n	80054b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00a      	beq.n	80054d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	f003 0310 	and.w	r3, r3, #16
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01a      	beq.n	80055a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005586:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800558a:	d10a      	bne.n	80055a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }
}
 80055c4:	bf00      	nop
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b086      	sub	sp, #24
 80055d4:	af02      	add	r7, sp, #8
 80055d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055e0:	f7fb fffe 	bl	80015e0 <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0308 	and.w	r3, r3, #8
 80055f0:	2b08      	cmp	r3, #8
 80055f2:	d10e      	bne.n	8005612 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f81b 	bl	800563e <UART_WaitOnFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e011      	b.n	8005636 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2220      	movs	r2, #32
 8005616:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b09c      	sub	sp, #112	; 0x70
 8005642:	af00      	add	r7, sp, #0
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	4613      	mov	r3, r2
 800564c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800564e:	e0a7      	b.n	80057a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005656:	f000 80a3 	beq.w	80057a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565a:	f7fb ffc1 	bl	80015e0 <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005666:	429a      	cmp	r2, r3
 8005668:	d302      	bcc.n	8005670 <UART_WaitOnFlagUntilTimeout+0x32>
 800566a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800566c:	2b00      	cmp	r3, #0
 800566e:	d13f      	bne.n	80056f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800567e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005684:	667b      	str	r3, [r7, #100]	; 0x64
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800568e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005690:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800569c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e6      	bne.n	8005670 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	663b      	str	r3, [r7, #96]	; 0x60
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80056c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80056c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e068      	b.n	80057c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0304 	and.w	r3, r3, #4
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d050      	beq.n	80057a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69db      	ldr	r3, [r3, #28]
 8005704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005708:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570c:	d148      	bne.n	80057a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005716:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	e853 3f00 	ldrex	r3, [r3]
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800572c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	461a      	mov	r2, r3
 8005734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005736:	637b      	str	r3, [r7, #52]	; 0x34
 8005738:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800573c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e6      	bne.n	8005718 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	e853 3f00 	ldrex	r3, [r3]
 8005758:	613b      	str	r3, [r7, #16]
   return(result);
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f023 0301 	bic.w	r3, r3, #1
 8005760:	66bb      	str	r3, [r7, #104]	; 0x68
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3308      	adds	r3, #8
 8005768:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800576a:	623a      	str	r2, [r7, #32]
 800576c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576e:	69f9      	ldr	r1, [r7, #28]
 8005770:	6a3a      	ldr	r2, [r7, #32]
 8005772:	e841 2300 	strex	r3, r2, [r1]
 8005776:	61bb      	str	r3, [r7, #24]
   return(result);
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1e5      	bne.n	800574a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2220      	movs	r2, #32
 8005782:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2220      	movs	r2, #32
 8005788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2220      	movs	r2, #32
 8005790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e010      	b.n	80057c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	69da      	ldr	r2, [r3, #28]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	bf0c      	ite	eq
 80057b0:	2301      	moveq	r3, #1
 80057b2:	2300      	movne	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	461a      	mov	r2, r3
 80057b8:	79fb      	ldrb	r3, [r7, #7]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	f43f af48 	beq.w	8005650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3770      	adds	r7, #112	; 0x70
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b095      	sub	sp, #84	; 0x54
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f0:	643b      	str	r3, [r7, #64]	; 0x40
 80057f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057f8:	e841 2300 	strex	r3, r2, [r1]
 80057fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005800:	2b00      	cmp	r3, #0
 8005802:	d1e6      	bne.n	80057d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3308      	adds	r3, #8
 800580a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	e853 3f00 	ldrex	r3, [r3]
 8005812:	61fb      	str	r3, [r7, #28]
   return(result);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	64bb      	str	r3, [r7, #72]	; 0x48
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3308      	adds	r3, #8
 8005822:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005824:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005826:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800582a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e5      	bne.n	8005804 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583c:	2b01      	cmp	r3, #1
 800583e:	d118      	bne.n	8005872 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	60bb      	str	r3, [r7, #8]
   return(result);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f023 0310 	bic.w	r3, r3, #16
 8005854:	647b      	str	r3, [r7, #68]	; 0x44
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	461a      	mov	r2, r3
 800585c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6979      	ldr	r1, [r7, #20]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	613b      	str	r3, [r7, #16]
   return(result);
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e6      	bne.n	8005840 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2220      	movs	r2, #32
 8005876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005886:	bf00      	nop
 8005888:	3754      	adds	r7, #84	; 0x54
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f7ff fb71 	bl	8004f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b088      	sub	sp, #32
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	461a      	mov	r2, r3
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	6979      	ldr	r1, [r7, #20]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	e841 2300 	strex	r3, r2, [r1]
 80058f0:	613b      	str	r3, [r7, #16]
   return(result);
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d1e6      	bne.n	80058c6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2220      	movs	r2, #32
 80058fc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f7ff fb3d 	bl	8004f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800590a:	bf00      	nop
 800590c:	3720      	adds	r7, #32
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005914:	b084      	sub	sp, #16
 8005916:	b580      	push	{r7, lr}
 8005918:	b084      	sub	sp, #16
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	f107 001c 	add.w	r0, r7, #28
 8005922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	2b01      	cmp	r3, #1
 800592a:	d120      	bne.n	800596e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <USB_CoreInit+0xac>)
 800593e:	4013      	ands	r3, r2
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005952:	2b01      	cmp	r3, #1
 8005954:	d105      	bne.n	8005962 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fa96 	bl	8005e94 <USB_CoreReset>
 8005968:	4603      	mov	r3, r0
 800596a:	73fb      	strb	r3, [r7, #15]
 800596c:	e010      	b.n	8005990 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 fa8a 	bl	8005e94 <USB_CoreReset>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005988:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	2b01      	cmp	r3, #1
 8005994:	d10b      	bne.n	80059ae <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f043 0206 	orr.w	r2, r3, #6
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f043 0220 	orr.w	r2, r3, #32
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3710      	adds	r7, #16
 80059b4:	46bd      	mov	sp, r7
 80059b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ba:	b004      	add	sp, #16
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	ffbdffbf 	.word	0xffbdffbf

080059c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f023 0201 	bic.w	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
 80059ee:	460b      	mov	r3, r1
 80059f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059f2:	2300      	movs	r3, #0
 80059f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d115      	bne.n	8005a34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a14:	2001      	movs	r0, #1
 8005a16:	f7fb fdef 	bl	80015f8 <HAL_Delay>
      ms++;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fa29 	bl	8005e78 <USB_GetMode>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d01e      	beq.n	8005a6a <USB_SetCurrentMode+0x84>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b31      	cmp	r3, #49	; 0x31
 8005a30:	d9f0      	bls.n	8005a14 <USB_SetCurrentMode+0x2e>
 8005a32:	e01a      	b.n	8005a6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d115      	bne.n	8005a66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a46:	2001      	movs	r0, #1
 8005a48:	f7fb fdd6 	bl	80015f8 <HAL_Delay>
      ms++;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa10 	bl	8005e78 <USB_GetMode>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d005      	beq.n	8005a6a <USB_SetCurrentMode+0x84>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b31      	cmp	r3, #49	; 0x31
 8005a62:	d9f0      	bls.n	8005a46 <USB_SetCurrentMode+0x60>
 8005a64:	e001      	b.n	8005a6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e005      	b.n	8005a76 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b32      	cmp	r3, #50	; 0x32
 8005a6e:	d101      	bne.n	8005a74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e000      	b.n	8005a76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a80:	b084      	sub	sp, #16
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a92:	2300      	movs	r3, #0
 8005a94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	613b      	str	r3, [r7, #16]
 8005a9e:	e009      	b.n	8005ab4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	3340      	adds	r3, #64	; 0x40
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	2200      	movs	r2, #0
 8005aac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	613b      	str	r3, [r7, #16]
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b0e      	cmp	r3, #14
 8005ab8:	d9f2      	bls.n	8005aa0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d11c      	bne.n	8005afa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	68fa      	ldr	r2, [r7, #12]
 8005aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ace:	f043 0302 	orr.w	r3, r3, #2
 8005ad2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	e005      	b.n	8005b06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	2300      	movs	r3, #0
 8005b10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b18:	4619      	mov	r1, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b20:	461a      	mov	r2, r3
 8005b22:	680b      	ldr	r3, [r1, #0]
 8005b24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d10c      	bne.n	8005b46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b32:	2100      	movs	r1, #0
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f965 	bl	8005e04 <USB_SetDevSpeed>
 8005b3a:	e008      	b.n	8005b4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 f960 	bl	8005e04 <USB_SetDevSpeed>
 8005b44:	e003      	b.n	8005b4e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b46:	2103      	movs	r1, #3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f95b 	bl	8005e04 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b4e:	2110      	movs	r1, #16
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f8f3 	bl	8005d3c <USB_FlushTxFifo>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f91f 	bl	8005da4 <USB_FlushRxFifo>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	461a      	mov	r2, r3
 8005b78:	2300      	movs	r3, #0
 8005b7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	461a      	mov	r2, r3
 8005b84:	2300      	movs	r3, #0
 8005b86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2300      	movs	r3, #0
 8005b92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b94:	2300      	movs	r3, #0
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	e043      	b.n	8005c22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	015a      	lsls	r2, r3, #5
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb0:	d118      	bne.n	8005be4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	e013      	b.n	8005bf6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	015a      	lsls	r2, r3, #5
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4413      	add	r3, r2
 8005bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bda:	461a      	mov	r2, r3
 8005bdc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005be0:	6013      	str	r3, [r2, #0]
 8005be2:	e008      	b.n	8005bf6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	461a      	mov	r2, r3
 8005c04:	2300      	movs	r3, #0
 8005c06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c14:	461a      	mov	r2, r3
 8005c16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d3b7      	bcc.n	8005b9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e043      	b.n	8005cb8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c46:	d118      	bne.n	8005c7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10a      	bne.n	8005c64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e013      	b.n	8005c8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c70:	461a      	mov	r2, r3
 8005c72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c76:	6013      	str	r3, [r2, #0]
 8005c78:	e008      	b.n	8005c8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	461a      	mov	r2, r3
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005caa:	461a      	mov	r2, r3
 8005cac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d3b7      	bcc.n	8005c30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ce0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d105      	bne.n	8005cf4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	f043 0210 	orr.w	r2, r3, #16
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	699a      	ldr	r2, [r3, #24]
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <USB_DevInit+0x2b4>)
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	f043 0208 	orr.w	r2, r3, #8
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d105      	bne.n	8005d24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	699a      	ldr	r2, [r3, #24]
 8005d1c:	4b06      	ldr	r3, [pc, #24]	; (8005d38 <USB_DevInit+0x2b8>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d30:	b004      	add	sp, #16
 8005d32:	4770      	bx	lr
 8005d34:	803c3800 	.word	0x803c3800
 8005d38:	40000004 	.word	0x40000004

08005d3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <USB_FlushTxFifo+0x64>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e01b      	b.n	8005d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	daf2      	bge.n	8005d4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	019b      	lsls	r3, r3, #6
 8005d6c:	f043 0220 	orr.w	r2, r3, #32
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4a08      	ldr	r2, [pc, #32]	; (8005da0 <USB_FlushTxFifo+0x64>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d901      	bls.n	8005d86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e006      	b.n	8005d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	f003 0320 	and.w	r3, r3, #32
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d0f0      	beq.n	8005d74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	00030d40 	.word	0x00030d40

08005da4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	3301      	adds	r3, #1
 8005db4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4a11      	ldr	r2, [pc, #68]	; (8005e00 <USB_FlushRxFifo+0x5c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d901      	bls.n	8005dc2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e018      	b.n	8005df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	daf2      	bge.n	8005db0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2210      	movs	r2, #16
 8005dd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a08      	ldr	r2, [pc, #32]	; (8005e00 <USB_FlushRxFifo+0x5c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d901      	bls.n	8005de6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e006      	b.n	8005df4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d0f0      	beq.n	8005dd4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	00030d40 	.word	0x00030d40

08005e04 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e24:	4313      	orrs	r3, r2
 8005e26:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e50:	f023 0303 	bic.w	r3, r3, #3
 8005e54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e64:	f043 0302 	orr.w	r3, r3, #2
 8005e68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	f003 0301 	and.w	r3, r3, #1
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a13      	ldr	r2, [pc, #76]	; (8005ef8 <USB_CoreReset+0x64>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d901      	bls.n	8005eb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e01b      	b.n	8005eea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	daf2      	bge.n	8005ea0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f043 0201 	orr.w	r2, r3, #1
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4a09      	ldr	r2, [pc, #36]	; (8005ef8 <USB_CoreReset+0x64>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d901      	bls.n	8005edc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e006      	b.n	8005eea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f003 0301 	and.w	r3, r3, #1
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d0f0      	beq.n	8005eca <USB_CoreReset+0x36>

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3714      	adds	r7, #20
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	00030d40 	.word	0x00030d40

08005efc <memset>:
 8005efc:	4402      	add	r2, r0
 8005efe:	4603      	mov	r3, r0
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d100      	bne.n	8005f06 <memset+0xa>
 8005f04:	4770      	bx	lr
 8005f06:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0a:	e7f9      	b.n	8005f00 <memset+0x4>

08005f0c <__libc_init_array>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	4d0d      	ldr	r5, [pc, #52]	; (8005f44 <__libc_init_array+0x38>)
 8005f10:	4c0d      	ldr	r4, [pc, #52]	; (8005f48 <__libc_init_array+0x3c>)
 8005f12:	1b64      	subs	r4, r4, r5
 8005f14:	10a4      	asrs	r4, r4, #2
 8005f16:	2600      	movs	r6, #0
 8005f18:	42a6      	cmp	r6, r4
 8005f1a:	d109      	bne.n	8005f30 <__libc_init_array+0x24>
 8005f1c:	4d0b      	ldr	r5, [pc, #44]	; (8005f4c <__libc_init_array+0x40>)
 8005f1e:	4c0c      	ldr	r4, [pc, #48]	; (8005f50 <__libc_init_array+0x44>)
 8005f20:	f000 f818 	bl	8005f54 <_init>
 8005f24:	1b64      	subs	r4, r4, r5
 8005f26:	10a4      	asrs	r4, r4, #2
 8005f28:	2600      	movs	r6, #0
 8005f2a:	42a6      	cmp	r6, r4
 8005f2c:	d105      	bne.n	8005f3a <__libc_init_array+0x2e>
 8005f2e:	bd70      	pop	{r4, r5, r6, pc}
 8005f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f34:	4798      	blx	r3
 8005f36:	3601      	adds	r6, #1
 8005f38:	e7ee      	b.n	8005f18 <__libc_init_array+0xc>
 8005f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3e:	4798      	blx	r3
 8005f40:	3601      	adds	r6, #1
 8005f42:	e7f2      	b.n	8005f2a <__libc_init_array+0x1e>
 8005f44:	08005f90 	.word	0x08005f90
 8005f48:	08005f90 	.word	0x08005f90
 8005f4c:	08005f90 	.word	0x08005f90
 8005f50:	08005f94 	.word	0x08005f94

08005f54 <_init>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr

08005f60 <_fini>:
 8005f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f62:	bf00      	nop
 8005f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f66:	bc08      	pop	{r3}
 8005f68:	469e      	mov	lr, r3
 8005f6a:	4770      	bx	lr
