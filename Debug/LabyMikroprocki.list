
LabyMikroprocki.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bbc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08005d84  08005d84  00015d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005da0  08005da0  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da8  08005da8  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da8  08005da8  00015da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dac  08005dac  00015dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005db0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005dbc  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005e5c  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000738  2000014c  08005efc  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000884  08005efc  00020884  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001784f  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000325f  00000000  00000000  00037a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001330  00000000  00000000  0003ac70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000eeb  00000000  00000000  0003bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00028427  00000000  00000000  0003ce8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00018a9e  00000000  00000000  000652b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000f87da  00000000  00000000  0007dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000050bc  00000000  00000000  0017652c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006a  00000000  00000000  0017b5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000014c 	.word	0x2000014c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005d6c 	.word	0x08005d6c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000150 	.word	0x20000150
 8000204:	08005d6c 	.word	0x08005d6c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <MX_ETH_Init+0x84>)
 800050a:	4a20      	ldr	r2, [pc, #128]	; (800058c <MX_ETH_Init+0x88>)
 800050c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800050e:	4b20      	ldr	r3, [pc, #128]	; (8000590 <MX_ETH_Init+0x8c>)
 8000510:	2200      	movs	r2, #0
 8000512:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <MX_ETH_Init+0x8c>)
 8000516:	2280      	movs	r2, #128	; 0x80
 8000518:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <MX_ETH_Init+0x8c>)
 800051c:	22e1      	movs	r2, #225	; 0xe1
 800051e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MX_ETH_Init+0x8c>)
 8000522:	2200      	movs	r2, #0
 8000524:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000526:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <MX_ETH_Init+0x8c>)
 8000528:	2200      	movs	r2, #0
 800052a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MX_ETH_Init+0x8c>)
 800052e:	2200      	movs	r2, #0
 8000530:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <MX_ETH_Init+0x84>)
 8000534:	4a16      	ldr	r2, [pc, #88]	; (8000590 <MX_ETH_Init+0x8c>)
 8000536:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000538:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_ETH_Init+0x84>)
 800053a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800053e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_ETH_Init+0x84>)
 8000542:	4a14      	ldr	r2, [pc, #80]	; (8000594 <MX_ETH_Init+0x90>)
 8000544:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000546:	4b10      	ldr	r3, [pc, #64]	; (8000588 <MX_ETH_Init+0x84>)
 8000548:	4a13      	ldr	r2, [pc, #76]	; (8000598 <MX_ETH_Init+0x94>)
 800054a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_ETH_Init+0x84>)
 800054e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000552:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000554:	480c      	ldr	r0, [pc, #48]	; (8000588 <MX_ETH_Init+0x84>)
 8000556:	f001 f917 	bl	8001788 <HAL_ETH_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000560:	f000 fba8 	bl	8000cb4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000564:	2238      	movs	r2, #56	; 0x38
 8000566:	2100      	movs	r1, #0
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <MX_ETH_Init+0x98>)
 800056a:	f005 fbd3 	bl	8005d14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <MX_ETH_Init+0x98>)
 8000570:	2221      	movs	r2, #33	; 0x21
 8000572:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_ETH_Init+0x98>)
 8000576:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800057a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <MX_ETH_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	200001a0 	.word	0x200001a0
 800058c:	40028000 	.word	0x40028000
 8000590:	20000250 	.word	0x20000250
 8000594:	200000ac 	.word	0x200000ac
 8000598:	2000000c 	.word	0x2000000c
 800059c:	20000168 	.word	0x20000168

080005a0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a4e      	ldr	r2, [pc, #312]	; (80006f8 <HAL_ETH_MspInit+0x158>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	f040 8096 	bne.w	80006f0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80005c4:	4b4d      	ldr	r3, [pc, #308]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	4a4c      	ldr	r2, [pc, #304]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30
 80005d0:	4b4a      	ldr	r3, [pc, #296]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005d8:	623b      	str	r3, [r7, #32]
 80005da:	6a3b      	ldr	r3, [r7, #32]
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	4a46      	ldr	r2, [pc, #280]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005e6:	6313      	str	r3, [r2, #48]	; 0x30
 80005e8:	4b44      	ldr	r3, [pc, #272]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005f0:	61fb      	str	r3, [r7, #28]
 80005f2:	69fb      	ldr	r3, [r7, #28]
 80005f4:	4b41      	ldr	r3, [pc, #260]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f8:	4a40      	ldr	r2, [pc, #256]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 80005fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000600:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000608:	61bb      	str	r3, [r7, #24]
 800060a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800060c:	4b3b      	ldr	r3, [pc, #236]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a3a      	ldr	r2, [pc, #232]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
 8000618:	4b38      	ldr	r3, [pc, #224]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800061a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061c:	f003 0304 	and.w	r3, r3, #4
 8000620:	617b      	str	r3, [r7, #20]
 8000622:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000624:	4b35      	ldr	r3, [pc, #212]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a34      	ldr	r2, [pc, #208]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
 8000630:	4b32      	ldr	r3, [pc, #200]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	613b      	str	r3, [r7, #16]
 800063a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b2f      	ldr	r3, [pc, #188]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a2e      	ldr	r2, [pc, #184]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000642:	f043 0302 	orr.w	r3, r3, #2
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	f003 0302 	and.w	r3, r3, #2
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000658:	4a28      	ldr	r2, [pc, #160]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 800065a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800065e:	6313      	str	r3, [r2, #48]	; 0x30
 8000660:	4b26      	ldr	r3, [pc, #152]	; (80006fc <HAL_ETH_MspInit+0x15c>)
 8000662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800066c:	2332      	movs	r3, #50	; 0x32
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000670:	2302      	movs	r3, #2
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000678:	2303      	movs	r3, #3
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800067c:	230b      	movs	r3, #11
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000684:	4619      	mov	r1, r3
 8000686:	481e      	ldr	r0, [pc, #120]	; (8000700 <HAL_ETH_MspInit+0x160>)
 8000688:	f001 fba4 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800068c:	2386      	movs	r3, #134	; 0x86
 800068e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000690:	2302      	movs	r3, #2
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000698:	2303      	movs	r3, #3
 800069a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800069c:	230b      	movs	r3, #11
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	4619      	mov	r1, r3
 80006a6:	4817      	ldr	r0, [pc, #92]	; (8000704 <HAL_ETH_MspInit+0x164>)
 80006a8:	f001 fb94 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006be:	230b      	movs	r3, #11
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c6:	4619      	mov	r1, r3
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <HAL_ETH_MspInit+0x168>)
 80006ca:	f001 fb83 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d4:	2302      	movs	r3, #2
 80006d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006dc:	2303      	movs	r3, #3
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e0:	230b      	movs	r3, #11
 80006e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e8:	4619      	mov	r1, r3
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <HAL_ETH_MspInit+0x16c>)
 80006ec:	f001 fb72 	bl	8001dd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80006f0:	bf00      	nop
 80006f2:	3738      	adds	r7, #56	; 0x38
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40028000 	.word	0x40028000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000
 8000708:	40020400 	.word	0x40020400
 800070c:	40021800 	.word	0x40021800

08000710 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08c      	sub	sp, #48	; 0x30
 8000714:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
 800071e:	605a      	str	r2, [r3, #4]
 8000720:	609a      	str	r2, [r3, #8]
 8000722:	60da      	str	r2, [r3, #12]
 8000724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b7a      	ldr	r3, [pc, #488]	; (8000910 <MX_GPIO_Init+0x200>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a79      	ldr	r2, [pc, #484]	; (8000910 <MX_GPIO_Init+0x200>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b77      	ldr	r3, [pc, #476]	; (8000910 <MX_GPIO_Init+0x200>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073e:	4b74      	ldr	r3, [pc, #464]	; (8000910 <MX_GPIO_Init+0x200>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a73      	ldr	r2, [pc, #460]	; (8000910 <MX_GPIO_Init+0x200>)
 8000744:	f043 0320 	orr.w	r3, r3, #32
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b71      	ldr	r3, [pc, #452]	; (8000910 <MX_GPIO_Init+0x200>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0320 	and.w	r3, r3, #32
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	4b6e      	ldr	r3, [pc, #440]	; (8000910 <MX_GPIO_Init+0x200>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a6d      	ldr	r2, [pc, #436]	; (8000910 <MX_GPIO_Init+0x200>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b6b      	ldr	r3, [pc, #428]	; (8000910 <MX_GPIO_Init+0x200>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b68      	ldr	r3, [pc, #416]	; (8000910 <MX_GPIO_Init+0x200>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a67      	ldr	r2, [pc, #412]	; (8000910 <MX_GPIO_Init+0x200>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b65      	ldr	r3, [pc, #404]	; (8000910 <MX_GPIO_Init+0x200>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b62      	ldr	r3, [pc, #392]	; (8000910 <MX_GPIO_Init+0x200>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a61      	ldr	r2, [pc, #388]	; (8000910 <MX_GPIO_Init+0x200>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b5f      	ldr	r3, [pc, #380]	; (8000910 <MX_GPIO_Init+0x200>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <MX_GPIO_Init+0x200>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a5b      	ldr	r2, [pc, #364]	; (8000910 <MX_GPIO_Init+0x200>)
 80007a4:	f043 0308 	orr.w	r3, r3, #8
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b59      	ldr	r3, [pc, #356]	; (8000910 <MX_GPIO_Init+0x200>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0308 	and.w	r3, r3, #8
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007b6:	4b56      	ldr	r3, [pc, #344]	; (8000910 <MX_GPIO_Init+0x200>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a55      	ldr	r2, [pc, #340]	; (8000910 <MX_GPIO_Init+0x200>)
 80007bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b53      	ldr	r3, [pc, #332]	; (8000910 <MX_GPIO_Init+0x200>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2108      	movs	r1, #8
 80007d2:	4850      	ldr	r0, [pc, #320]	; (8000914 <MX_GPIO_Init+0x204>)
 80007d4:	f001 fcc2 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Row2_Pin|Row3_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2109      	movs	r1, #9
 80007dc:	484e      	ldr	r0, [pc, #312]	; (8000918 <MX_GPIO_Init+0x208>)
 80007de:	f001 fcbd 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	484d      	ldr	r0, [pc, #308]	; (800091c <MX_GPIO_Init+0x20c>)
 80007e8:	f001 fcb8 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f244 0181 	movw	r1, #16513	; 0x4081
 80007f2:	484b      	ldr	r0, [pc, #300]	; (8000920 <MX_GPIO_Init+0x210>)
 80007f4:	f001 fcb2 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	4849      	ldr	r0, [pc, #292]	; (8000924 <MX_GPIO_Init+0x214>)
 80007fe:	f001 fcad 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000808:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	483f      	ldr	r0, [pc, #252]	; (8000918 <MX_GPIO_Init+0x208>)
 800081a:	f001 fadb 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Row4_Pin;
 800081e:	2308      	movs	r3, #8
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Row4_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	4837      	ldr	r0, [pc, #220]	; (8000914 <MX_GPIO_Init+0x204>)
 8000836:	f001 facd 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Guzik_Pin;
 800083a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000840:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Guzik_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4830      	ldr	r0, [pc, #192]	; (8000914 <MX_GPIO_Init+0x204>)
 8000852:	f001 fabf 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Row2_Pin|Row3_Pin;
 8000856:	2309      	movs	r3, #9
 8000858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	4619      	mov	r1, r3
 800086c:	482a      	ldr	r0, [pc, #168]	; (8000918 <MX_GPIO_Init+0x208>)
 800086e:	f001 fab1 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Row1_Pin;
 8000872:	2308      	movs	r3, #8
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	4824      	ldr	r0, [pc, #144]	; (800091c <MX_GPIO_Init+0x20c>)
 800088a:	f001 faa3 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800088e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000894:	2301      	movs	r3, #1
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	481e      	ldr	r0, [pc, #120]	; (8000920 <MX_GPIO_Init+0x210>)
 80008a8:	f001 fa94 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ac:	2340      	movs	r3, #64	; 0x40
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	2301      	movs	r3, #1
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b8:	2300      	movs	r3, #0
 80008ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	4818      	ldr	r0, [pc, #96]	; (8000924 <MX_GPIO_Init+0x214>)
 80008c4:	f001 fa86 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008c8:	2380      	movs	r3, #128	; 0x80
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	4812      	ldr	r0, [pc, #72]	; (8000924 <MX_GPIO_Init+0x214>)
 80008dc:	f001 fa7a 	bl	8001dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Col3_Pin|Col2_Pin|Col1_Pin;
 80008e0:	23e0      	movs	r3, #224	; 0xe0
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	480d      	ldr	r0, [pc, #52]	; (8000928 <MX_GPIO_Init+0x218>)
 80008f4:	f001 fa6e 	bl	8001dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2100      	movs	r1, #0
 80008fc:	2028      	movs	r0, #40	; 0x28
 80008fe:	f000 fe7a 	bl	80015f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000902:	2028      	movs	r0, #40	; 0x28
 8000904:	f000 fe93 	bl	800162e <HAL_NVIC_EnableIRQ>

}
 8000908:	bf00      	nop
 800090a:	3730      	adds	r7, #48	; 0x30
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40023800 	.word	0x40023800
 8000914:	40021400 	.word	0x40021400
 8000918:	40020800 	.word	0x40020800
 800091c:	40020000 	.word	0x40020000
 8000920:	40020400 	.word	0x40020400
 8000924:	40021800 	.word	0x40021800
 8000928:	40020c00 	.word	0x40020c00

0800092c <readKeypad>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t keyboard;

char readKeypad (void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);  //Pull the R1 low
 8000930:	2200      	movs	r2, #0
 8000932:	2108      	movs	r1, #8
 8000934:	488d      	ldr	r0, [pc, #564]	; (8000b6c <readKeypad+0x240>)
 8000936:	f001 fc11 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 800093a:	2201      	movs	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	488c      	ldr	r0, [pc, #560]	; (8000b70 <readKeypad+0x244>)
 8000940:	f001 fc0c 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000944:	2201      	movs	r2, #1
 8000946:	2108      	movs	r1, #8
 8000948:	4889      	ldr	r0, [pc, #548]	; (8000b70 <readKeypad+0x244>)
 800094a:	f001 fc07 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 800094e:	2201      	movs	r2, #1
 8000950:	2108      	movs	r1, #8
 8000952:	4888      	ldr	r0, [pc, #544]	; (8000b74 <readKeypad+0x248>)
 8000954:	f001 fc02 	bl	800215c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	4887      	ldr	r0, [pc, #540]	; (8000b78 <readKeypad+0x24c>)
 800095c:	f001 fbe6 	bl	800212c <HAL_GPIO_ReadPin>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d109      	bne.n	800097a <readKeypad+0x4e>
	{
		while (!(HAL_GPIO_ReadPin (Col1_GPIO_Port, Col1_Pin)));   // wait till the button is pressed
 8000966:	bf00      	nop
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	4883      	ldr	r0, [pc, #524]	; (8000b78 <readKeypad+0x24c>)
 800096c:	f001 fbde 	bl	800212c <HAL_GPIO_ReadPin>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d0f8      	beq.n	8000968 <readKeypad+0x3c>
		return '1';
 8000976:	2331      	movs	r3, #49	; 0x31
 8000978:	e0f6      	b.n	8000b68 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin (Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	487e      	ldr	r0, [pc, #504]	; (8000b78 <readKeypad+0x24c>)
 800097e:	f001 fbd5 	bl	800212c <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d109      	bne.n	800099c <readKeypad+0x70>
	{
		while (!(HAL_GPIO_ReadPin (Col2_GPIO_Port, Col2_Pin)));   // wait till the button is pressed
 8000988:	bf00      	nop
 800098a:	2140      	movs	r1, #64	; 0x40
 800098c:	487a      	ldr	r0, [pc, #488]	; (8000b78 <readKeypad+0x24c>)
 800098e:	f001 fbcd 	bl	800212c <HAL_GPIO_ReadPin>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d0f8      	beq.n	800098a <readKeypad+0x5e>
		return '2';
 8000998:	2332      	movs	r3, #50	; 0x32
 800099a:	e0e5      	b.n	8000b68 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin (Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 800099c:	2120      	movs	r1, #32
 800099e:	4876      	ldr	r0, [pc, #472]	; (8000b78 <readKeypad+0x24c>)
 80009a0:	f001 fbc4 	bl	800212c <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d109      	bne.n	80009be <readKeypad+0x92>
	{
		while (!(HAL_GPIO_ReadPin (Col3_GPIO_Port, Col3_Pin)));   // wait till the button is pressed
 80009aa:	bf00      	nop
 80009ac:	2120      	movs	r1, #32
 80009ae:	4872      	ldr	r0, [pc, #456]	; (8000b78 <readKeypad+0x24c>)
 80009b0:	f001 fbbc 	bl	800212c <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f8      	beq.n	80009ac <readKeypad+0x80>
		return '3';
 80009ba:	2333      	movs	r3, #51	; 0x33
 80009bc:	e0d4      	b.n	8000b68 <readKeypad+0x23c>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 80009be:	2201      	movs	r2, #1
 80009c0:	2108      	movs	r1, #8
 80009c2:	486a      	ldr	r0, [pc, #424]	; (8000b6c <readKeypad+0x240>)
 80009c4:	f001 fbca 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET);  // Pull the R2 High
 80009c8:	2200      	movs	r2, #0
 80009ca:	2101      	movs	r1, #1
 80009cc:	4868      	ldr	r0, [pc, #416]	; (8000b70 <readKeypad+0x244>)
 80009ce:	f001 fbc5 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 80009d2:	2201      	movs	r2, #1
 80009d4:	2108      	movs	r1, #8
 80009d6:	4866      	ldr	r0, [pc, #408]	; (8000b70 <readKeypad+0x244>)
 80009d8:	f001 fbc0 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 80009dc:	2201      	movs	r2, #1
 80009de:	2108      	movs	r1, #8
 80009e0:	4864      	ldr	r0, [pc, #400]	; (8000b74 <readKeypad+0x248>)
 80009e2:	f001 fbbb 	bl	800215c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	4863      	ldr	r0, [pc, #396]	; (8000b78 <readKeypad+0x24c>)
 80009ea:	f001 fb9f 	bl	800212c <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d109      	bne.n	8000a08 <readKeypad+0xdc>
	{
		while (!(HAL_GPIO_ReadPin (Col1_GPIO_Port, Col1_Pin)));   // wait till the button is pressed
 80009f4:	bf00      	nop
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	485f      	ldr	r0, [pc, #380]	; (8000b78 <readKeypad+0x24c>)
 80009fa:	f001 fb97 	bl	800212c <HAL_GPIO_ReadPin>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d0f8      	beq.n	80009f6 <readKeypad+0xca>
		return '4';
 8000a04:	2334      	movs	r3, #52	; 0x34
 8000a06:	e0af      	b.n	8000b68 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin (Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	485b      	ldr	r0, [pc, #364]	; (8000b78 <readKeypad+0x24c>)
 8000a0c:	f001 fb8e 	bl	800212c <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d109      	bne.n	8000a2a <readKeypad+0xfe>
	{
		while (!(HAL_GPIO_ReadPin (Col2_GPIO_Port, Col2_Pin)));   // wait till the button is pressed
 8000a16:	bf00      	nop
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	4857      	ldr	r0, [pc, #348]	; (8000b78 <readKeypad+0x24c>)
 8000a1c:	f001 fb86 	bl	800212c <HAL_GPIO_ReadPin>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f8      	beq.n	8000a18 <readKeypad+0xec>
		return '5';
 8000a26:	2335      	movs	r3, #53	; 0x35
 8000a28:	e09e      	b.n	8000b68 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin (Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	4852      	ldr	r0, [pc, #328]	; (8000b78 <readKeypad+0x24c>)
 8000a2e:	f001 fb7d 	bl	800212c <HAL_GPIO_ReadPin>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d109      	bne.n	8000a4c <readKeypad+0x120>
	{
		while (!(HAL_GPIO_ReadPin (Col3_GPIO_Port, Col3_Pin)));   // wait till the button is pressed
 8000a38:	bf00      	nop
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	484e      	ldr	r0, [pc, #312]	; (8000b78 <readKeypad+0x24c>)
 8000a3e:	f001 fb75 	bl	800212c <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f8      	beq.n	8000a3a <readKeypad+0x10e>
		return '6';
 8000a48:	2336      	movs	r3, #54	; 0x36
 8000a4a:	e08d      	b.n	8000b68 <readKeypad+0x23c>
	}

	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2108      	movs	r1, #8
 8000a50:	4846      	ldr	r0, [pc, #280]	; (8000b6c <readKeypad+0x240>)
 8000a52:	f001 fb83 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8000a56:	2201      	movs	r2, #1
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4845      	ldr	r0, [pc, #276]	; (8000b70 <readKeypad+0x244>)
 8000a5c:	f001 fb7e 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET);  // Pull the R3 High
 8000a60:	2200      	movs	r2, #0
 8000a62:	2108      	movs	r1, #8
 8000a64:	4842      	ldr	r0, [pc, #264]	; (8000b70 <readKeypad+0x244>)
 8000a66:	f001 fb79 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET);  // Pull the R4 High
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2108      	movs	r1, #8
 8000a6e:	4841      	ldr	r0, [pc, #260]	; (8000b74 <readKeypad+0x248>)
 8000a70:	f001 fb74 	bl	800215c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	4840      	ldr	r0, [pc, #256]	; (8000b78 <readKeypad+0x24c>)
 8000a78:	f001 fb58 	bl	800212c <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d109      	bne.n	8000a96 <readKeypad+0x16a>
	{
		while (!(HAL_GPIO_ReadPin (Col1_GPIO_Port, Col1_Pin)));   // wait till the button is pressed
 8000a82:	bf00      	nop
 8000a84:	2180      	movs	r1, #128	; 0x80
 8000a86:	483c      	ldr	r0, [pc, #240]	; (8000b78 <readKeypad+0x24c>)
 8000a88:	f001 fb50 	bl	800212c <HAL_GPIO_ReadPin>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d0f8      	beq.n	8000a84 <readKeypad+0x158>
		return '7';
 8000a92:	2337      	movs	r3, #55	; 0x37
 8000a94:	e068      	b.n	8000b68 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin (Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	4837      	ldr	r0, [pc, #220]	; (8000b78 <readKeypad+0x24c>)
 8000a9a:	f001 fb47 	bl	800212c <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d109      	bne.n	8000ab8 <readKeypad+0x18c>
	{
		while (!(HAL_GPIO_ReadPin (Col2_GPIO_Port, Col2_Pin)));   // wait till the button is pressed
 8000aa4:	bf00      	nop
 8000aa6:	2140      	movs	r1, #64	; 0x40
 8000aa8:	4833      	ldr	r0, [pc, #204]	; (8000b78 <readKeypad+0x24c>)
 8000aaa:	f001 fb3f 	bl	800212c <HAL_GPIO_ReadPin>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f8      	beq.n	8000aa6 <readKeypad+0x17a>
		return '8';
 8000ab4:	2338      	movs	r3, #56	; 0x38
 8000ab6:	e057      	b.n	8000b68 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin (Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000ab8:	2120      	movs	r1, #32
 8000aba:	482f      	ldr	r0, [pc, #188]	; (8000b78 <readKeypad+0x24c>)
 8000abc:	f001 fb36 	bl	800212c <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d109      	bne.n	8000ada <readKeypad+0x1ae>
	{
		while (!(HAL_GPIO_ReadPin (Col3_GPIO_Port, Col3_Pin)));   // wait till the button is pressed
 8000ac6:	bf00      	nop
 8000ac8:	2120      	movs	r1, #32
 8000aca:	482b      	ldr	r0, [pc, #172]	; (8000b78 <readKeypad+0x24c>)
 8000acc:	f001 fb2e 	bl	800212c <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d0f8      	beq.n	8000ac8 <readKeypad+0x19c>
		return '9';
 8000ad6:	2339      	movs	r3, #57	; 0x39
 8000ad8:	e046      	b.n	8000b68 <readKeypad+0x23c>
	}

	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin (Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET);  //Pull the R1 low
 8000ada:	2201      	movs	r2, #1
 8000adc:	2108      	movs	r1, #8
 8000ade:	4823      	ldr	r0, [pc, #140]	; (8000b6c <readKeypad+0x240>)
 8000ae0:	f001 fb3c 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET);  // Pull the R2 High
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4821      	ldr	r0, [pc, #132]	; (8000b70 <readKeypad+0x244>)
 8000aea:	f001 fb37 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET);  // Pull the R3 High
 8000aee:	2201      	movs	r2, #1
 8000af0:	2108      	movs	r1, #8
 8000af2:	481f      	ldr	r0, [pc, #124]	; (8000b70 <readKeypad+0x244>)
 8000af4:	f001 fb32 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);  // Pull the R4 High
 8000af8:	2200      	movs	r2, #0
 8000afa:	2108      	movs	r1, #8
 8000afc:	481d      	ldr	r0, [pc, #116]	; (8000b74 <readKeypad+0x248>)
 8000afe:	f001 fb2d 	bl	800215c <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin (Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	481c      	ldr	r0, [pc, #112]	; (8000b78 <readKeypad+0x24c>)
 8000b06:	f001 fb11 	bl	800212c <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d109      	bne.n	8000b24 <readKeypad+0x1f8>
	{
		while (!(HAL_GPIO_ReadPin (Col1_GPIO_Port, Col1_Pin)));   // wait till the button is pressed
 8000b10:	bf00      	nop
 8000b12:	2180      	movs	r1, #128	; 0x80
 8000b14:	4818      	ldr	r0, [pc, #96]	; (8000b78 <readKeypad+0x24c>)
 8000b16:	f001 fb09 	bl	800212c <HAL_GPIO_ReadPin>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f8      	beq.n	8000b12 <readKeypad+0x1e6>
		return '*';
 8000b20:	232a      	movs	r3, #42	; 0x2a
 8000b22:	e021      	b.n	8000b68 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin (Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000b24:	2140      	movs	r1, #64	; 0x40
 8000b26:	4814      	ldr	r0, [pc, #80]	; (8000b78 <readKeypad+0x24c>)
 8000b28:	f001 fb00 	bl	800212c <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d109      	bne.n	8000b46 <readKeypad+0x21a>
	{
		while (!(HAL_GPIO_ReadPin (Col2_GPIO_Port, Col2_Pin)));   // wait till the button is pressed
 8000b32:	bf00      	nop
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	4810      	ldr	r0, [pc, #64]	; (8000b78 <readKeypad+0x24c>)
 8000b38:	f001 faf8 	bl	800212c <HAL_GPIO_ReadPin>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f8      	beq.n	8000b34 <readKeypad+0x208>
		return '0';
 8000b42:	2330      	movs	r3, #48	; 0x30
 8000b44:	e010      	b.n	8000b68 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin (Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000b46:	2120      	movs	r1, #32
 8000b48:	480b      	ldr	r0, [pc, #44]	; (8000b78 <readKeypad+0x24c>)
 8000b4a:	f001 faef 	bl	800212c <HAL_GPIO_ReadPin>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d109      	bne.n	8000b68 <readKeypad+0x23c>
	{
		while (!(HAL_GPIO_ReadPin (Col3_GPIO_Port, Col3_Pin)));   // wait till the button is pressed
 8000b54:	bf00      	nop
 8000b56:	2120      	movs	r1, #32
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <readKeypad+0x24c>)
 8000b5a:	f001 fae7 	bl	800212c <HAL_GPIO_ReadPin>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f8      	beq.n	8000b56 <readKeypad+0x22a>
		return '#';
 8000b64:	2323      	movs	r3, #35	; 0x23
 8000b66:	e7ff      	b.n	8000b68 <readKeypad+0x23c>
	}
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40021400 	.word	0x40021400
 8000b78:	40020c00 	.word	0x40020c00

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f000 fbdd 	bl	800133e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f82e 	bl	8000be4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f7ff fdc2 	bl	8000710 <MX_GPIO_Init>
  MX_ETH_Init();
 8000b8c:	f7ff fcba 	bl	8000504 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b90:	f000 fa6c 	bl	800106c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b94:	f000 fb02 	bl	800119c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 8000b98:	f000 f92a 	bl	8000df0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b9c:	f000 f976 	bl	8000e8c <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */
		keyboard = readKeypad();
 8000ba0:	f7ff fec4 	bl	800092c <readKeypad>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <main+0x5c>)
 8000baa:	701a      	strb	r2, [r3, #0]

		if (keyboard!=0x01) {
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <main+0x5c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d00d      	beq.n	8000bd0 <main+0x54>
			HAL_UART_Transmit(&huart3, &keyboard, 1, 1000);
 8000bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <main+0x5c>)
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <main+0x60>)
 8000bbe:	f003 fd97 	bl	80046f0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, "\n", 1, 1000);
 8000bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4905      	ldr	r1, [pc, #20]	; (8000be0 <main+0x64>)
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <main+0x60>)
 8000bcc:	f003 fd90 	bl	80046f0 <HAL_UART_Transmit>
		}
		HAL_Delay(200);
 8000bd0:	20c8      	movs	r0, #200	; 0xc8
 8000bd2:	f000 fc11 	bl	80013f8 <HAL_Delay>
		keyboard = readKeypad();
 8000bd6:	e7e3      	b.n	8000ba0 <main+0x24>
 8000bd8:	20000256 	.word	0x20000256
 8000bdc:	200002f0 	.word	0x200002f0
 8000be0:	08005d84 	.word	0x08005d84

08000be4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b094      	sub	sp, #80	; 0x50
 8000be8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	f107 0320 	add.w	r3, r7, #32
 8000bee:	2230      	movs	r2, #48	; 0x30
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f005 f88e 	bl	8005d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c08:	f001 fc2e 	bl	8002468 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	4b27      	ldr	r3, [pc, #156]	; (8000cac <SystemClock_Config+0xc8>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	4a26      	ldr	r2, [pc, #152]	; (8000cac <SystemClock_Config+0xc8>)
 8000c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c16:	6413      	str	r3, [r2, #64]	; 0x40
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <SystemClock_Config+0xc8>)
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c24:	4b22      	ldr	r3, [pc, #136]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c2c:	4a20      	ldr	r2, [pc, #128]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c32:	6013      	str	r3, [r2, #0]
 8000c34:	4b1e      	ldr	r3, [pc, #120]	; (8000cb0 <SystemClock_Config+0xcc>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c54:	2304      	movs	r3, #4
 8000c56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c58:	2348      	movs	r3, #72	; 0x48
 8000c5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c60:	2303      	movs	r3, #3
 8000c62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c64:	f107 0320 	add.w	r3, r7, #32
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 fc0d 	bl	8002488 <HAL_RCC_OscConfig>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c74:	f000 f81e 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c78:	230f      	movs	r3, #15
 8000c7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2102      	movs	r1, #2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f001 fe9b 	bl	80029d0 <HAL_RCC_ClockConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000ca0:	f000 f808 	bl	8000cb4 <Error_Handler>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3750      	adds	r7, #80	; 0x50
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40007000 	.word	0x40007000

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000cbc:	e7fe      	b.n	8000cbc <Error_Handler+0x8>
	...

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_MspInit+0x50>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a11      	ldr	r2, [pc, #68]	; (8000d10 <HAL_MspInit+0x50>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <HAL_MspInit+0x50>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	4b0c      	ldr	r3, [pc, #48]	; (8000d10 <HAL_MspInit+0x50>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <HAL_MspInit+0x50>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <HAL_MspInit+0x50>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	603b      	str	r3, [r7, #0]
 8000cf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2005      	movs	r0, #5
 8000cfc:	f000 fc7b 	bl	80015f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000d00:	2005      	movs	r0, #5
 8000d02:	f000 fc94 	bl	800162e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <NMI_Handler+0x4>

08000d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <MemManage_Handler+0x4>

08000d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d26:	b480      	push	{r7}
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2a:	e7fe      	b.n	8000d2a <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d60:	f000 fb2a 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <TIM2_IRQHandler+0x10>)
 8000d7e:	f002 fcf5 	bl	800376c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000258 	.word	0x20000258

08000d8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <TIM3_IRQHandler+0x10>)
 8000d92:	f002 fceb 	bl	800376c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200002a4 	.word	0x200002a4

08000da0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <USART3_IRQHandler+0x10>)
 8000da6:	f003 fd27 	bl	80047f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200002f0 	.word	0x200002f0

08000db4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Guzik_Pin);
 8000db8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000dbc:	f001 f9e8 	bl	8002190 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000dc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000dc4:	f001 f9e4 	bl	8002190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0310 	add.w	r3, r7, #16
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e16:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 359999;
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e24:	4a18      	ldr	r2, [pc, #96]	; (8000e88 <MX_TIM2_Init+0x98>)
 8000e26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e34:	4813      	ldr	r0, [pc, #76]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e36:	f002 fbe1 	bl	80035fc <HAL_TIM_Base_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e40:	f7ff ff38 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e4a:	f107 0310 	add.w	r3, r7, #16
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480c      	ldr	r0, [pc, #48]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e52:	f002 febf 	bl	8003bd4 <HAL_TIM_ConfigClockSource>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e5c:	f7ff ff2a 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_TIM2_Init+0x94>)
 8000e6e:	f003 fb45 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e78:	f7ff ff1c 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000258 	.word	0x20000258
 8000e88:	00057e3f 	.word	0x00057e3f

08000e8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08e      	sub	sp, #56	; 0x38
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eac:	463b      	mov	r3, r7
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]
 8000eba:	615a      	str	r2, [r3, #20]
 8000ebc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000ec0:	4a2d      	ldr	r2, [pc, #180]	; (8000f78 <MX_TIM3_Init+0xec>)
 8000ec2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000ec6:	2247      	movs	r2, #71	; 0x47
 8000ec8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000ed2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ed6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed8:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ee4:	4823      	ldr	r0, [pc, #140]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000ee6:	f002 fb89 	bl	80035fc <HAL_TIM_Base_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ef0:	f7ff fee0 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000efe:	4619      	mov	r1, r3
 8000f00:	481c      	ldr	r0, [pc, #112]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000f02:	f002 fe67 	bl	8003bd4 <HAL_TIM_ConfigClockSource>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f0c:	f7ff fed2 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f10:	4818      	ldr	r0, [pc, #96]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000f12:	f002 fbca 	bl	80036aa <HAL_TIM_PWM_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f1c:	f7ff feca 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f28:	f107 031c 	add.w	r3, r7, #28
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000f30:	f003 fae4 	bl	80044fc <HAL_TIMEx_MasterConfigSynchronization>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f3a:	f7ff febb 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3e:	2360      	movs	r3, #96	; 0x60
 8000f40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 8000f42:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f50:	463b      	mov	r3, r7
 8000f52:	2208      	movs	r2, #8
 8000f54:	4619      	mov	r1, r3
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000f58:	f002 fd28 	bl	80039ac <HAL_TIM_PWM_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000f62:	f7ff fea7 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f66:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MX_TIM3_Init+0xe8>)
 8000f68:	f000 f848 	bl	8000ffc <HAL_TIM_MspPostInit>

}
 8000f6c:	bf00      	nop
 8000f6e:	3738      	adds	r7, #56	; 0x38
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	200002a4 	.word	0x200002a4
 8000f78:	40000400 	.word	0x40000400

08000f7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d114      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	4a18      	ldr	r2, [pc, #96]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201c      	movs	r0, #28
 8000fac:	f000 fb23 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb0:	201c      	movs	r0, #28
 8000fb2:	f000 fb3c 	bl	800162e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000fb6:	e018      	b.n	8000fea <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_TIM_Base_MspInit+0x7c>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d113      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_TIM_Base_MspInit+0x78>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60bb      	str	r3, [r7, #8]
 8000fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	201d      	movs	r0, #29
 8000fe0:	f000 fb09 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fe4:	201d      	movs	r0, #29
 8000fe6:	f000 fb22 	bl	800162e <HAL_NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800
 8000ff8:	40000400 	.word	0x40000400

08000ffc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a11      	ldr	r2, [pc, #68]	; (8001060 <HAL_TIM_MspPostInit+0x64>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d11c      	bne.n	8001058 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <HAL_TIM_MspPostInit+0x68>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a10      	ldr	r2, [pc, #64]	; (8001064 <HAL_TIM_MspPostInit+0x68>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_TIM_MspPostInit+0x68>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001036:	f44f 7380 	mov.w	r3, #256	; 0x100
 800103a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001048:	2302      	movs	r3, #2
 800104a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <HAL_TIM_MspPostInit+0x6c>)
 8001054:	f000 febe 	bl	8001dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40000400 	.word	0x40000400
 8001064:	40023800 	.word	0x40023800
 8001068:	40020800 	.word	0x40020800

0800106c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 8001072:	4a15      	ldr	r2, [pc, #84]	; (80010c8 <MX_USART3_UART_Init+0x5c>)
 8001074:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 8001078:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800107c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 8001080:	2200      	movs	r2, #0
 8001082:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 8001086:	2200      	movs	r2, #0
 8001088:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 8001092:	220c      	movs	r2, #12
 8001094:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800109c:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_USART3_UART_Init+0x58>)
 80010b0:	f003 fad0 	bl	8004654 <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010ba:	f7ff fdfb 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200002f0 	.word	0x200002f0
 80010c8:	40004800 	.word	0x40004800

080010cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b0aa      	sub	sp, #168	; 0xa8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2284      	movs	r2, #132	; 0x84
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f004 fe11 	bl	8005d14 <memset>
  if(uartHandle->Instance==USART3)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a26      	ldr	r2, [pc, #152]	; (8001190 <HAL_UART_MspInit+0xc4>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d144      	bne.n	8001186 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001100:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001102:	2300      	movs	r3, #0
 8001104:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fe86 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001116:	f7ff fdcd 	bl	8000cb4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <HAL_UART_MspInit+0xc8>)
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	4a1d      	ldr	r2, [pc, #116]	; (8001194 <HAL_UART_MspInit+0xc8>)
 8001120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001124:	6413      	str	r3, [r2, #64]	; 0x40
 8001126:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <HAL_UART_MspInit+0xc8>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	4b18      	ldr	r3, [pc, #96]	; (8001194 <HAL_UART_MspInit+0xc8>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a17      	ldr	r2, [pc, #92]	; (8001194 <HAL_UART_MspInit+0xc8>)
 8001138:	f043 0308 	orr.w	r3, r3, #8
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_UART_MspInit+0xc8>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800114a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800114e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	2301      	movs	r3, #1
 800115a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001164:	2307      	movs	r3, #7
 8001166:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800116a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800116e:	4619      	mov	r1, r3
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <HAL_UART_MspInit+0xcc>)
 8001172:	f000 fe2f 	bl	8001dd4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2100      	movs	r1, #0
 800117a:	2027      	movs	r0, #39	; 0x27
 800117c:	f000 fa3b 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001180:	2027      	movs	r0, #39	; 0x27
 8001182:	f000 fa54 	bl	800162e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001186:	bf00      	nop
 8001188:	37a8      	adds	r7, #168	; 0xa8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40004800 	.word	0x40004800
 8001194:	40023800 	.word	0x40023800
 8001198:	40020c00 	.word	0x40020c00

0800119c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011aa:	2206      	movs	r2, #6
 80011ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b0:	2202      	movs	r2, #2
 80011b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011bc:	2202      	movs	r2, #2
 80011be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e0:	f000 fff9 	bl	80021d6 <HAL_PCD_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80011ea:	f7ff fd63 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000378 	.word	0x20000378

080011f8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b0ac      	sub	sp, #176	; 0xb0
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0318 	add.w	r3, r7, #24
 8001214:	2284      	movs	r2, #132	; 0x84
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f004 fd7b 	bl	8005d14 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001226:	d159      	bne.n	80012dc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001228:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800122c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800122e:	2300      	movs	r3, #0
 8001230:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001234:	f107 0318 	add.w	r3, r7, #24
 8001238:	4618      	mov	r0, r3
 800123a:	f001 fdef 	bl	8002e1c <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001244:	f7ff fd36 	bl	8000cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001248:	4b26      	ldr	r3, [pc, #152]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 800124a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124c:	4a25      	ldr	r2, [pc, #148]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 800124e:	f043 0301 	orr.w	r3, r3, #1
 8001252:	6313      	str	r3, [r2, #48]	; 0x30
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001260:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2302      	movs	r3, #2
 800126a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001274:	2303      	movs	r3, #3
 8001276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800127a:	230a      	movs	r3, #10
 800127c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001284:	4619      	mov	r1, r3
 8001286:	4818      	ldr	r0, [pc, #96]	; (80012e8 <HAL_PCD_MspInit+0xf0>)
 8001288:	f000 fda4 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800128c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001290:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012a4:	4619      	mov	r1, r3
 80012a6:	4810      	ldr	r0, [pc, #64]	; (80012e8 <HAL_PCD_MspInit+0xf0>)
 80012a8:	f000 fd94 	bl	8001dd4 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80012ac:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012b6:	6353      	str	r3, [r2, #52]	; 0x34
 80012b8:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ce:	6453      	str	r3, [r2, #68]	; 0x44
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HAL_PCD_MspInit+0xec>)
 80012d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80012dc:	bf00      	nop
 80012de:	37b0      	adds	r7, #176	; 0xb0
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40020000 	.word	0x40020000

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001324 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f0:	480d      	ldr	r0, [pc, #52]	; (8001328 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f8:	e002      	b.n	8001300 <LoopCopyDataInit>

080012fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fe:	3304      	adds	r3, #4

08001300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001304:	d3f9      	bcc.n	80012fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001308:	4c0b      	ldr	r4, [pc, #44]	; (8001338 <LoopFillZerobss+0x26>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800130c:	e001      	b.n	8001312 <LoopFillZerobss>

0800130e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001310:	3204      	adds	r2, #4

08001312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001314:	d3fb      	bcc.n	800130e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001316:	f7ff fd59 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800131a:	f004 fd03 	bl	8005d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fc2d 	bl	8000b7c <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001330:	08005db0 	.word	0x08005db0
  ldr r2, =_sbss
 8001334:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8001338:	20000884 	.word	0x20000884

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>

0800133e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001342:	2003      	movs	r0, #3
 8001344:	f000 f94c 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001348:	2000      	movs	r0, #0
 800134a:	f000 f805 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134e:	f7ff fcb7 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f967 	bl	800164a <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 f92f 	bl	80015f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000004 	.word	0x20000004

080013b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	20000880 	.word	0x20000880

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000880 	.word	0x20000880

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_Delay+0x44>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <__NVIC_SetPriorityGrouping+0x40>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	4313      	orrs	r3, r2
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <__NVIC_SetPriorityGrouping+0x40>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00
 8001484:	05fa0000 	.word	0x05fa0000

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4907      	ldr	r1, [pc, #28]	; (80014dc <__NVIC_EnableIRQ+0x38>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff29 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff3e 	bl	8001488 <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff8e 	bl	8001534 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5d 	bl	80014e0 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff31 	bl	80014a4 <__NVIC_EnableIRQ>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffa2 	bl	800159c <SysTick_Config>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff feb6 	bl	80013e0 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d008      	beq.n	8001694 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e052      	b.n	800173a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0216 	bic.w	r2, r2, #22
 80016a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d103      	bne.n	80016c4 <HAL_DMA_Abort+0x62>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d007      	beq.n	80016d4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0208 	bic.w	r2, r2, #8
 80016d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e4:	e013      	b.n	800170e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e6:	f7ff fe7b 	bl	80013e0 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b05      	cmp	r3, #5
 80016f2:	d90c      	bls.n	800170e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2220      	movs	r2, #32
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2203      	movs	r2, #3
 80016fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e015      	b.n	800173a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1e4      	bne.n	80016e6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001720:	223f      	movs	r2, #63	; 0x3f
 8001722:	409a      	lsls	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d004      	beq.n	8001760 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e00c      	b.n	800177a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2205      	movs	r2, #5
 8001764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0201 	bic.w	r2, r2, #1
 8001776:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	370c      	adds	r7, #12
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
	...

08001788 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e06a      	b.n	8001870 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d106      	bne.n	80017b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2223      	movs	r2, #35	; 0x23
 80017a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7fe fef7 	bl	80005a0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b31      	ldr	r3, [pc, #196]	; (8001878 <HAL_ETH_Init+0xf0>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	4a30      	ldr	r2, [pc, #192]	; (8001878 <HAL_ETH_Init+0xf0>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	; 0x44
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_ETH_Init+0xf0>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c6:	60bb      	str	r3, [r7, #8]
 80017c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017ca:	4b2c      	ldr	r3, [pc, #176]	; (800187c <HAL_ETH_Init+0xf4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	4a2b      	ldr	r2, [pc, #172]	; (800187c <HAL_ETH_Init+0xf4>)
 80017d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <HAL_ETH_Init+0xf4>)
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	4927      	ldr	r1, [pc, #156]	; (800187c <HAL_ETH_Init+0xf4>)
 80017e0:	4313      	orrs	r3, r2
 80017e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_ETH_Init+0xf4>)
 80017e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6812      	ldr	r2, [r2, #0]
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001800:	f7ff fdee 	bl	80013e0 <HAL_GetTick>
 8001804:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001806:	e011      	b.n	800182c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001808:	f7ff fdea 	bl	80013e0 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001816:	d909      	bls.n	800182c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2204      	movs	r2, #4
 800181c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	22e0      	movs	r2, #224	; 0xe0
 8001824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e021      	b.n	8001870 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1e4      	bne.n	8001808 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f000 f958 	bl	8001af4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f9ff 	bl	8001c48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 fa55 	bl	8001cfa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	461a      	mov	r2, r3
 8001856:	2100      	movs	r1, #0
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f000 f9bd 	bl	8001bd8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2210      	movs	r2, #16
 800186a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40023800 	.word	0x40023800
 800187c:	40013800 	.word	0x40013800

08001880 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	4b51      	ldr	r3, [pc, #324]	; (80019dc <ETH_SetMACConfig+0x15c>)
 8001896:	4013      	ands	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	7c1b      	ldrb	r3, [r3, #16]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d102      	bne.n	80018a8 <ETH_SetMACConfig+0x28>
 80018a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018a6:	e000      	b.n	80018aa <ETH_SetMACConfig+0x2a>
 80018a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	7c5b      	ldrb	r3, [r3, #17]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <ETH_SetMACConfig+0x38>
 80018b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018b6:	e000      	b.n	80018ba <ETH_SetMACConfig+0x3a>
 80018b8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80018ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80018c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	7fdb      	ldrb	r3, [r3, #31]
 80018c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80018c8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80018ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	7f92      	ldrb	r2, [r2, #30]
 80018d4:	2a00      	cmp	r2, #0
 80018d6:	d102      	bne.n	80018de <ETH_SetMACConfig+0x5e>
 80018d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018dc:	e000      	b.n	80018e0 <ETH_SetMACConfig+0x60>
 80018de:	2200      	movs	r2, #0
                        macconf->Speed |
 80018e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	7f1b      	ldrb	r3, [r3, #28]
 80018e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80018e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80018ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	791b      	ldrb	r3, [r3, #4]
 80018f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80018f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018fe:	2a00      	cmp	r2, #0
 8001900:	d102      	bne.n	8001908 <ETH_SetMACConfig+0x88>
 8001902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001906:	e000      	b.n	800190a <ETH_SetMACConfig+0x8a>
 8001908:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800190a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	7bdb      	ldrb	r3, [r3, #15]
 8001910:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001912:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001918:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001920:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001922:	4313      	orrs	r3, r2
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	4313      	orrs	r3, r2
 8001928:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800193a:	2001      	movs	r0, #1
 800193c:	f7ff fd5c 	bl	80013f8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001956:	4013      	ands	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800195e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001966:	2a00      	cmp	r2, #0
 8001968:	d101      	bne.n	800196e <ETH_SetMACConfig+0xee>
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	e000      	b.n	8001970 <ETH_SetMACConfig+0xf0>
 800196e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001970:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001976:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800197e:	2a01      	cmp	r2, #1
 8001980:	d101      	bne.n	8001986 <ETH_SetMACConfig+0x106>
 8001982:	2208      	movs	r2, #8
 8001984:	e000      	b.n	8001988 <ETH_SetMACConfig+0x108>
 8001986:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001988:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001990:	2a01      	cmp	r2, #1
 8001992:	d101      	bne.n	8001998 <ETH_SetMACConfig+0x118>
 8001994:	2204      	movs	r2, #4
 8001996:	e000      	b.n	800199a <ETH_SetMACConfig+0x11a>
 8001998:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800199a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80019a2:	2a01      	cmp	r2, #1
 80019a4:	d101      	bne.n	80019aa <ETH_SetMACConfig+0x12a>
 80019a6:	2202      	movs	r2, #2
 80019a8:	e000      	b.n	80019ac <ETH_SetMACConfig+0x12c>
 80019aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80019ac:	4313      	orrs	r3, r2
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699b      	ldr	r3, [r3, #24]
 80019c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff fd17 	bl	80013f8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	619a      	str	r2, [r3, #24]
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	ff20810f 	.word	0xff20810f

080019e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4b3d      	ldr	r3, [pc, #244]	; (8001af0 <ETH_SetDMAConfig+0x110>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	7b1b      	ldrb	r3, [r3, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d102      	bne.n	8001a0c <ETH_SetDMAConfig+0x2c>
 8001a06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a0a:	e000      	b.n	8001a0e <ETH_SetDMAConfig+0x2e>
 8001a0c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	7b5b      	ldrb	r3, [r3, #13]
 8001a12:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a14:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a16:	683a      	ldr	r2, [r7, #0]
 8001a18:	7f52      	ldrb	r2, [r2, #29]
 8001a1a:	2a00      	cmp	r2, #0
 8001a1c:	d102      	bne.n	8001a24 <ETH_SetDMAConfig+0x44>
 8001a1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a22:	e000      	b.n	8001a26 <ETH_SetDMAConfig+0x46>
 8001a24:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001a26:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	7b9b      	ldrb	r3, [r3, #14]
 8001a2c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001a2e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001a34:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	7f1b      	ldrb	r3, [r3, #28]
 8001a3a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001a3c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	7f9b      	ldrb	r3, [r3, #30]
 8001a42:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001a44:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001a4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a52:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001a54:	4313      	orrs	r3, r2
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a64:	461a      	mov	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a76:	2001      	movs	r0, #1
 8001a78:	f7ff fcbe 	bl	80013f8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a84:	461a      	mov	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	791b      	ldrb	r3, [r3, #4]
 8001a8e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001a94:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001a9a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001aa0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001aa8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001aaa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ab2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ab8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ac2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ac6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7ff fc8f 	bl	80013f8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	f8de3f23 	.word	0xf8de3f23

08001af4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0a6      	sub	sp, #152	; 0x98
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001b02:	2301      	movs	r3, #1
 8001b04:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b30:	2300      	movs	r3, #0
 8001b32:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001b56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b5a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001b5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b60:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001b68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fe86 	bl	8001880 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001b74:	2301      	movs	r3, #1
 8001b76:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001b82:	2301      	movs	r3, #1
 8001b84:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001b96:	2300      	movs	r3, #0
 8001b98:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001ba4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001baa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bb4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001bc4:	f107 0308 	add.w	r3, r7, #8
 8001bc8:	4619      	mov	r1, r3
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ff08 	bl	80019e0 <ETH_SetDMAConfig>
}
 8001bd0:	bf00      	nop
 8001bd2:	3798      	adds	r7, #152	; 0x98
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3305      	adds	r3, #5
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	3204      	adds	r2, #4
 8001bf0:	7812      	ldrb	r2, [r2, #0]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <ETH_MACAddressConfig+0x68>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	3303      	adds	r3, #3
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	061a      	lsls	r2, r3, #24
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	041b      	lsls	r3, r3, #16
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3301      	adds	r3, #1
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	7812      	ldrb	r2, [r2, #0]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <ETH_MACAddressConfig+0x6c>)
 8001c2a:	4413      	add	r3, r2
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	bf00      	nop
 8001c34:	371c      	adds	r7, #28
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40028040 	.word	0x40028040
 8001c44:	40028044 	.word	0x40028044

08001c48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	e03e      	b.n	8001cd4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68d9      	ldr	r1, [r3, #12]
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	2200      	movs	r2, #0
 8001c72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	3206      	adds	r2, #6
 8001c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d80c      	bhi.n	8001cb8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68d9      	ldr	r1, [r3, #12]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	e004      	b.n	8001cc2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d9bd      	bls.n	8001c56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68da      	ldr	r2, [r3, #12]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cec:	611a      	str	r2, [r3, #16]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	e046      	b.n	8001d96 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6919      	ldr	r1, [r3, #16]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	4413      	add	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	440b      	add	r3, r1
 8001d18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001d44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001d4c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d5a:	68b9      	ldr	r1, [r7, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	3212      	adds	r2, #18
 8001d62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d80c      	bhi.n	8001d86 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6919      	ldr	r1, [r3, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	4613      	mov	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	4413      	add	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	e004      	b.n	8001d90 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d9b5      	bls.n	8001d08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691a      	ldr	r2, [r3, #16]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc6:	60da      	str	r2, [r3, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b089      	sub	sp, #36	; 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
 8001df2:	e175      	b.n	80020e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001df4:	2201      	movs	r2, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	f040 8164 	bne.w	80020da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d005      	beq.n	8001e2a <HAL_GPIO_Init+0x56>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d130      	bne.n	8001e8c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68da      	ldr	r2, [r3, #12]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	f003 0201 	and.w	r2, r3, #1
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d017      	beq.n	8001ec8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d123      	bne.n	8001f1c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	69b9      	ldr	r1, [r7, #24]
 8001f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0203 	and.w	r2, r3, #3
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80be 	beq.w	80020da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	4b66      	ldr	r3, [pc, #408]	; (80020f8 <HAL_GPIO_Init+0x324>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	4a65      	ldr	r2, [pc, #404]	; (80020f8 <HAL_GPIO_Init+0x324>)
 8001f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f68:	6453      	str	r3, [r2, #68]	; 0x44
 8001f6a:	4b63      	ldr	r3, [pc, #396]	; (80020f8 <HAL_GPIO_Init+0x324>)
 8001f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f76:	4a61      	ldr	r2, [pc, #388]	; (80020fc <HAL_GPIO_Init+0x328>)
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a58      	ldr	r2, [pc, #352]	; (8002100 <HAL_GPIO_Init+0x32c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d037      	beq.n	8002012 <HAL_GPIO_Init+0x23e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a57      	ldr	r2, [pc, #348]	; (8002104 <HAL_GPIO_Init+0x330>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d031      	beq.n	800200e <HAL_GPIO_Init+0x23a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a56      	ldr	r2, [pc, #344]	; (8002108 <HAL_GPIO_Init+0x334>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d02b      	beq.n	800200a <HAL_GPIO_Init+0x236>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a55      	ldr	r2, [pc, #340]	; (800210c <HAL_GPIO_Init+0x338>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d025      	beq.n	8002006 <HAL_GPIO_Init+0x232>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a54      	ldr	r2, [pc, #336]	; (8002110 <HAL_GPIO_Init+0x33c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d01f      	beq.n	8002002 <HAL_GPIO_Init+0x22e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a53      	ldr	r2, [pc, #332]	; (8002114 <HAL_GPIO_Init+0x340>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d019      	beq.n	8001ffe <HAL_GPIO_Init+0x22a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a52      	ldr	r2, [pc, #328]	; (8002118 <HAL_GPIO_Init+0x344>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_GPIO_Init+0x226>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a51      	ldr	r2, [pc, #324]	; (800211c <HAL_GPIO_Init+0x348>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00d      	beq.n	8001ff6 <HAL_GPIO_Init+0x222>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a50      	ldr	r2, [pc, #320]	; (8002120 <HAL_GPIO_Init+0x34c>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <HAL_GPIO_Init+0x21e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	; (8002124 <HAL_GPIO_Init+0x350>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_GPIO_Init+0x21a>
 8001fea:	2309      	movs	r3, #9
 8001fec:	e012      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001fee:	230a      	movs	r3, #10
 8001ff0:	e010      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ff2:	2308      	movs	r3, #8
 8001ff4:	e00e      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ff6:	2307      	movs	r3, #7
 8001ff8:	e00c      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ffa:	2306      	movs	r3, #6
 8001ffc:	e00a      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8001ffe:	2305      	movs	r3, #5
 8002000:	e008      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8002002:	2304      	movs	r3, #4
 8002004:	e006      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8002006:	2303      	movs	r3, #3
 8002008:	e004      	b.n	8002014 <HAL_GPIO_Init+0x240>
 800200a:	2302      	movs	r3, #2
 800200c:	e002      	b.n	8002014 <HAL_GPIO_Init+0x240>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_GPIO_Init+0x240>
 8002012:	2300      	movs	r3, #0
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	f002 0203 	and.w	r2, r2, #3
 800201a:	0092      	lsls	r2, r2, #2
 800201c:	4093      	lsls	r3, r2
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002024:	4935      	ldr	r1, [pc, #212]	; (80020fc <HAL_GPIO_Init+0x328>)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_GPIO_Init+0x354>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002056:	4a34      	ldr	r2, [pc, #208]	; (8002128 <HAL_GPIO_Init+0x354>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800205c:	4b32      	ldr	r3, [pc, #200]	; (8002128 <HAL_GPIO_Init+0x354>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002080:	4a29      	ldr	r2, [pc, #164]	; (8002128 <HAL_GPIO_Init+0x354>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002086:	4b28      	ldr	r3, [pc, #160]	; (8002128 <HAL_GPIO_Init+0x354>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020aa:	4a1f      	ldr	r2, [pc, #124]	; (8002128 <HAL_GPIO_Init+0x354>)
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <HAL_GPIO_Init+0x354>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020d4:	4a14      	ldr	r2, [pc, #80]	; (8002128 <HAL_GPIO_Init+0x354>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3301      	adds	r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b0f      	cmp	r3, #15
 80020e4:	f67f ae86 	bls.w	8001df4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020e8:	bf00      	nop
 80020ea:	bf00      	nop
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40013800 	.word	0x40013800
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400
 8002108:	40020800 	.word	0x40020800
 800210c:	40020c00 	.word	0x40020c00
 8002110:	40021000 	.word	0x40021000
 8002114:	40021400 	.word	0x40021400
 8002118:	40021800 	.word	0x40021800
 800211c:	40021c00 	.word	0x40021c00
 8002120:	40022000 	.word	0x40022000
 8002124:	40022400 	.word	0x40022400
 8002128:	40013c00 	.word	0x40013c00

0800212c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e001      	b.n	800214e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d006      	beq.n	80021b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021a6:	4a05      	ldr	r2, [pc, #20]	; (80021bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f806 	bl	80021c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021b4:	bf00      	nop
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d8:	b08f      	sub	sp, #60	; 0x3c
 80021da:	af0a      	add	r7, sp, #40	; 0x28
 80021dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e116      	b.n	8002416 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fff8 	bl	80011f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2203      	movs	r2, #3
 800220c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4618      	mov	r0, r3
 8002228:	f003 fad8 	bl	80057dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	603b      	str	r3, [r7, #0]
 8002232:	687e      	ldr	r6, [r7, #4]
 8002234:	466d      	mov	r5, sp
 8002236:	f106 0410 	add.w	r4, r6, #16
 800223a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800223c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002242:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002246:	e885 0003 	stmia.w	r5, {r0, r1}
 800224a:	1d33      	adds	r3, r6, #4
 800224c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800224e:	6838      	ldr	r0, [r7, #0]
 8002250:	f003 fa6c 	bl	800572c <USB_CoreInit>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2202      	movs	r2, #2
 800225e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e0d7      	b.n	8002416 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2100      	movs	r1, #0
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fac6 	bl	80057fe <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002272:	2300      	movs	r3, #0
 8002274:	73fb      	strb	r3, [r7, #15]
 8002276:	e04a      	b.n	800230e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	4413      	add	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	333d      	adds	r3, #61	; 0x3d
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	333c      	adds	r3, #60	; 0x3c
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022a0:	7bfa      	ldrb	r2, [r7, #15]
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	b298      	uxth	r0, r3
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	3344      	adds	r3, #68	; 0x44
 80022b4:	4602      	mov	r2, r0
 80022b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	4413      	add	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	3340      	adds	r3, #64	; 0x40
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4413      	add	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3348      	adds	r3, #72	; 0x48
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	334c      	adds	r3, #76	; 0x4c
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022f4:	7bfa      	ldrb	r2, [r7, #15]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3354      	adds	r3, #84	; 0x54
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	3301      	adds	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	429a      	cmp	r2, r3
 8002316:	d3af      	bcc.n	8002278 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e044      	b.n	80023a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002330:	2200      	movs	r2, #0
 8002332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002360:	7bfa      	ldrb	r2, [r7, #15]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4413      	add	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002376:	7bfa      	ldrb	r2, [r7, #15]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	3301      	adds	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d3b5      	bcc.n	800231e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	603b      	str	r3, [r7, #0]
 80023b8:	687e      	ldr	r6, [r7, #4]
 80023ba:	466d      	mov	r5, sp
 80023bc:	f106 0410 	add.w	r4, r6, #16
 80023c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80023d0:	1d33      	adds	r3, r6, #4
 80023d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d4:	6838      	ldr	r0, [r7, #0]
 80023d6:	f003 fa5f 	bl	8005898 <USB_DevInit>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2202      	movs	r2, #2
 80023e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e014      	b.n	8002416 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f80b 	bl	8002420 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f003 fc1d 	bl	8005c4e <USB_DevDisconnect>

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002420 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_PCDEx_ActivateLPM+0x44>)
 8002450:	4313      	orrs	r3, r2
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	10000003 	.word	0x10000003

08002468 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002476:	6013      	str	r3, [r2, #0]
}
 8002478:	bf00      	nop
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	40007000 	.word	0x40007000

08002488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002490:	2300      	movs	r3, #0
 8002492:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e291      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8087 	beq.w	80025ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024ac:	4b96      	ldr	r3, [pc, #600]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 030c 	and.w	r3, r3, #12
 80024b4:	2b04      	cmp	r3, #4
 80024b6:	d00c      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024b8:	4b93      	ldr	r3, [pc, #588]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d112      	bne.n	80024ea <HAL_RCC_OscConfig+0x62>
 80024c4:	4b90      	ldr	r3, [pc, #576]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d0:	d10b      	bne.n	80024ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d2:	4b8d      	ldr	r3, [pc, #564]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d06c      	beq.n	80025b8 <HAL_RCC_OscConfig+0x130>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d168      	bne.n	80025b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e26b      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f2:	d106      	bne.n	8002502 <HAL_RCC_OscConfig+0x7a>
 80024f4:	4b84      	ldr	r3, [pc, #528]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a83      	ldr	r2, [pc, #524]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80024fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e02e      	b.n	8002560 <HAL_RCC_OscConfig+0xd8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10c      	bne.n	8002524 <HAL_RCC_OscConfig+0x9c>
 800250a:	4b7f      	ldr	r3, [pc, #508]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7e      	ldr	r2, [pc, #504]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b7c      	ldr	r3, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a7b      	ldr	r2, [pc, #492]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800251c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e01d      	b.n	8002560 <HAL_RCC_OscConfig+0xd8>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0xc0>
 800252e:	4b76      	ldr	r3, [pc, #472]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a75      	ldr	r2, [pc, #468]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b73      	ldr	r3, [pc, #460]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a72      	ldr	r2, [pc, #456]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e00b      	b.n	8002560 <HAL_RCC_OscConfig+0xd8>
 8002548:	4b6f      	ldr	r3, [pc, #444]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a6e      	ldr	r2, [pc, #440]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800254e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b6c      	ldr	r3, [pc, #432]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a6b      	ldr	r2, [pc, #428]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800255a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800255e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d013      	beq.n	8002590 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe ff3a 	bl	80013e0 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7fe ff36 	bl	80013e0 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e21f      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	4b61      	ldr	r3, [pc, #388]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCC_OscConfig+0xe8>
 800258e:	e014      	b.n	80025ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe ff26 	bl	80013e0 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002598:	f7fe ff22 	bl	80013e0 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b64      	cmp	r3, #100	; 0x64
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e20b      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	4b57      	ldr	r3, [pc, #348]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x110>
 80025b6:	e000      	b.n	80025ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0302 	and.w	r3, r3, #2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d069      	beq.n	800269a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025c6:	4b50      	ldr	r3, [pc, #320]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f003 030c 	and.w	r3, r3, #12
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00b      	beq.n	80025ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	4b4d      	ldr	r3, [pc, #308]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d11c      	bne.n	8002618 <HAL_RCC_OscConfig+0x190>
 80025de:	4b4a      	ldr	r3, [pc, #296]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d116      	bne.n	8002618 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ea:	4b47      	ldr	r3, [pc, #284]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d005      	beq.n	8002602 <HAL_RCC_OscConfig+0x17a>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d001      	beq.n	8002602 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e1df      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b41      	ldr	r3, [pc, #260]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	493d      	ldr	r1, [pc, #244]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002612:	4313      	orrs	r3, r2
 8002614:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	e040      	b.n	800269a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d023      	beq.n	8002668 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002620:	4b39      	ldr	r3, [pc, #228]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a38      	ldr	r2, [pc, #224]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fed8 	bl	80013e0 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002634:	f7fe fed4 	bl	80013e0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1bd      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002646:	4b30      	ldr	r3, [pc, #192]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b2d      	ldr	r3, [pc, #180]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4929      	ldr	r1, [pc, #164]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
 8002666:	e018      	b.n	800269a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002668:	4b27      	ldr	r3, [pc, #156]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a26      	ldr	r2, [pc, #152]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002674:	f7fe feb4 	bl	80013e0 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267c:	f7fe feb0 	bl	80013e0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e199      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800268e:	4b1e      	ldr	r3, [pc, #120]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0308 	and.w	r3, r3, #8
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d038      	beq.n	8002718 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d019      	beq.n	80026e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ae:	4b16      	ldr	r3, [pc, #88]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026b2:	4a15      	ldr	r2, [pc, #84]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ba:	f7fe fe91 	bl	80013e0 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c2:	f7fe fe8d 	bl	80013e0 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e176      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d4:	4b0c      	ldr	r3, [pc, #48]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x23a>
 80026e0:	e01a      	b.n	8002718 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e2:	4b09      	ldr	r3, [pc, #36]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e6:	4a08      	ldr	r2, [pc, #32]	; (8002708 <HAL_RCC_OscConfig+0x280>)
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ee:	f7fe fe77 	bl	80013e0 <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f6:	f7fe fe73 	bl	80013e0 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d903      	bls.n	800270c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e15c      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
 8002708:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270c:	4b91      	ldr	r3, [pc, #580]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1ee      	bne.n	80026f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 80a4 	beq.w	800286e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002726:	4b8b      	ldr	r3, [pc, #556]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10d      	bne.n	800274e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b88      	ldr	r3, [pc, #544]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a87      	ldr	r2, [pc, #540]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b85      	ldr	r3, [pc, #532]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274a:	2301      	movs	r3, #1
 800274c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800274e:	4b82      	ldr	r3, [pc, #520]	; (8002958 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d118      	bne.n	800278c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800275a:	4b7f      	ldr	r3, [pc, #508]	; (8002958 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7e      	ldr	r2, [pc, #504]	; (8002958 <HAL_RCC_OscConfig+0x4d0>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7fe fe3b 	bl	80013e0 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276e:	f7fe fe37 	bl	80013e0 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	; 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e120      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002780:	4b75      	ldr	r3, [pc, #468]	; (8002958 <HAL_RCC_OscConfig+0x4d0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d106      	bne.n	80027a2 <HAL_RCC_OscConfig+0x31a>
 8002794:	4b6f      	ldr	r3, [pc, #444]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002798:	4a6e      	ldr	r2, [pc, #440]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	6713      	str	r3, [r2, #112]	; 0x70
 80027a0:	e02d      	b.n	80027fe <HAL_RCC_OscConfig+0x376>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x33c>
 80027aa:	4b6a      	ldr	r3, [pc, #424]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ae:	4a69      	ldr	r2, [pc, #420]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027b0:	f023 0301 	bic.w	r3, r3, #1
 80027b4:	6713      	str	r3, [r2, #112]	; 0x70
 80027b6:	4b67      	ldr	r3, [pc, #412]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ba:	4a66      	ldr	r2, [pc, #408]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027bc:	f023 0304 	bic.w	r3, r3, #4
 80027c0:	6713      	str	r3, [r2, #112]	; 0x70
 80027c2:	e01c      	b.n	80027fe <HAL_RCC_OscConfig+0x376>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0x35e>
 80027cc:	4b61      	ldr	r3, [pc, #388]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d0:	4a60      	ldr	r2, [pc, #384]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	6713      	str	r3, [r2, #112]	; 0x70
 80027d8:	4b5e      	ldr	r3, [pc, #376]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027dc:	4a5d      	ldr	r2, [pc, #372]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	6713      	str	r3, [r2, #112]	; 0x70
 80027e4:	e00b      	b.n	80027fe <HAL_RCC_OscConfig+0x376>
 80027e6:	4b5b      	ldr	r3, [pc, #364]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a5a      	ldr	r2, [pc, #360]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027ec:	f023 0301 	bic.w	r3, r3, #1
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	4b58      	ldr	r3, [pc, #352]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a57      	ldr	r2, [pc, #348]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80027f8:	f023 0304 	bic.w	r3, r3, #4
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d015      	beq.n	8002832 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7fe fdeb 	bl	80013e0 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fde7 	bl	80013e0 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0ce      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002824:	4b4b      	ldr	r3, [pc, #300]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0ee      	beq.n	800280e <HAL_RCC_OscConfig+0x386>
 8002830:	e014      	b.n	800285c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe fdd5 	bl	80013e0 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe fdd1 	bl	80013e0 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0b8      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002850:	4b40      	ldr	r3, [pc, #256]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1ee      	bne.n	800283a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d105      	bne.n	800286e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002862:	4b3c      	ldr	r3, [pc, #240]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	4a3b      	ldr	r2, [pc, #236]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002868:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 80a4 	beq.w	80029c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002878:	4b36      	ldr	r3, [pc, #216]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
 8002880:	2b08      	cmp	r3, #8
 8002882:	d06b      	beq.n	800295c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d149      	bne.n	8002920 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b31      	ldr	r3, [pc, #196]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a30      	ldr	r2, [pc, #192]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fda2 	bl	80013e0 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a0:	f7fe fd9e 	bl	80013e0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e087      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b2:	4b28      	ldr	r3, [pc, #160]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	019b      	lsls	r3, r3, #6
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	085b      	lsrs	r3, r3, #1
 80028d6:	3b01      	subs	r3, #1
 80028d8:	041b      	lsls	r3, r3, #16
 80028da:	431a      	orrs	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	061b      	lsls	r3, r3, #24
 80028e2:	4313      	orrs	r3, r2
 80028e4:	4a1b      	ldr	r2, [pc, #108]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a18      	ldr	r2, [pc, #96]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fd72 	bl	80013e0 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7fe fd6e 	bl	80013e0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e057      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002912:	4b10      	ldr	r3, [pc, #64]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x478>
 800291e:	e04f      	b.n	80029c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a0b      	ldr	r2, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fd58 	bl	80013e0 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fd54 	bl	80013e0 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e03d      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	4b03      	ldr	r3, [pc, #12]	; (8002954 <HAL_RCC_OscConfig+0x4cc>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x4ac>
 8002952:	e035      	b.n	80029c0 <HAL_RCC_OscConfig+0x538>
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x544>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d028      	beq.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002974:	429a      	cmp	r2, r3
 8002976:	d121      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002982:	429a      	cmp	r2, r3
 8002984:	d11a      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800298c:	4013      	ands	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002992:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002994:	4293      	cmp	r3, r2
 8002996:	d111      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a2:	085b      	lsrs	r3, r3, #1
 80029a4:	3b01      	subs	r3, #1
 80029a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d107      	bne.n	80029bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3718      	adds	r7, #24
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0d0      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e8:	4b6a      	ldr	r3, [pc, #424]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d910      	bls.n	8002a18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b67      	ldr	r3, [pc, #412]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 020f 	bic.w	r2, r3, #15
 80029fe:	4965      	ldr	r1, [pc, #404]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	4b63      	ldr	r3, [pc, #396]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d001      	beq.n	8002a18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e0b8      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a30:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a48:	4b53      	ldr	r3, [pc, #332]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a54:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	494d      	ldr	r1, [pc, #308]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d040      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a7a:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d115      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e07f      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a92:	4b41      	ldr	r3, [pc, #260]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d109      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e073      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e06b      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ab2:	4b39      	ldr	r3, [pc, #228]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f023 0203 	bic.w	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	4936      	ldr	r1, [pc, #216]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ac4:	f7fe fc8c 	bl	80013e0 <HAL_GetTick>
 8002ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	e00a      	b.n	8002ae2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002acc:	f7fe fc88 	bl	80013e0 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e053      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae2:	4b2d      	ldr	r3, [pc, #180]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 020c 	and.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d1eb      	bne.n	8002acc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 030f 	and.w	r3, r3, #15
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d210      	bcs.n	8002b24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b24      	ldr	r3, [pc, #144]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f023 020f 	bic.w	r2, r3, #15
 8002b0a:	4922      	ldr	r1, [pc, #136]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d001      	beq.n	8002b24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e032      	b.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b30:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	4916      	ldr	r1, [pc, #88]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b4e:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	490e      	ldr	r1, [pc, #56]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b62:	f000 f821 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b66:	4602      	mov	r2, r0
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_RCC_ClockConfig+0x1c8>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	091b      	lsrs	r3, r3, #4
 8002b6e:	f003 030f 	and.w	r3, r3, #15
 8002b72:	490a      	ldr	r1, [pc, #40]	; (8002b9c <HAL_RCC_ClockConfig+0x1cc>)
 8002b74:	5ccb      	ldrb	r3, [r1, r3]
 8002b76:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7a:	4a09      	ldr	r2, [pc, #36]	; (8002ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b7e:	4b09      	ldr	r3, [pc, #36]	; (8002ba4 <HAL_RCC_ClockConfig+0x1d4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7fe fbe8 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40023c00 	.word	0x40023c00
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	08005d88 	.word	0x08005d88
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	20000004 	.word	0x20000004

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bac:	b094      	sub	sp, #80	; 0x50
 8002bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bb8:	2300      	movs	r3, #0
 8002bba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc0:	4b79      	ldr	r3, [pc, #484]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d00d      	beq.n	8002be8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bcc:	2b08      	cmp	r3, #8
 8002bce:	f200 80e1 	bhi.w	8002d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x34>
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bda:	e0db      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bdc:	4b73      	ldr	r3, [pc, #460]	; (8002dac <HAL_RCC_GetSysClockFreq+0x204>)
 8002bde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002be0:	e0db      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002be2:	4b73      	ldr	r3, [pc, #460]	; (8002db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002be4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002be6:	e0d8      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002be8:	4b6f      	ldr	r3, [pc, #444]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bf0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bf2:	4b6d      	ldr	r3, [pc, #436]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d063      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfe:	4b6a      	ldr	r3, [pc, #424]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	099b      	lsrs	r3, r3, #6
 8002c04:	2200      	movs	r2, #0
 8002c06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c10:	633b      	str	r3, [r7, #48]	; 0x30
 8002c12:	2300      	movs	r3, #0
 8002c14:	637b      	str	r3, [r7, #52]	; 0x34
 8002c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c1a:	4622      	mov	r2, r4
 8002c1c:	462b      	mov	r3, r5
 8002c1e:	f04f 0000 	mov.w	r0, #0
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	0159      	lsls	r1, r3, #5
 8002c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c2c:	0150      	lsls	r0, r2, #5
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4621      	mov	r1, r4
 8002c34:	1a51      	subs	r1, r2, r1
 8002c36:	6139      	str	r1, [r7, #16]
 8002c38:	4629      	mov	r1, r5
 8002c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c4c:	4659      	mov	r1, fp
 8002c4e:	018b      	lsls	r3, r1, #6
 8002c50:	4651      	mov	r1, sl
 8002c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c56:	4651      	mov	r1, sl
 8002c58:	018a      	lsls	r2, r1, #6
 8002c5a:	4651      	mov	r1, sl
 8002c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002c60:	4659      	mov	r1, fp
 8002c62:	eb63 0901 	sbc.w	r9, r3, r1
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c7a:	4690      	mov	r8, r2
 8002c7c:	4699      	mov	r9, r3
 8002c7e:	4623      	mov	r3, r4
 8002c80:	eb18 0303 	adds.w	r3, r8, r3
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	462b      	mov	r3, r5
 8002c88:	eb49 0303 	adc.w	r3, r9, r3
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	f04f 0300 	mov.w	r3, #0
 8002c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	024b      	lsls	r3, r1, #9
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	024a      	lsls	r2, r1, #9
 8002ca8:	4610      	mov	r0, r2
 8002caa:	4619      	mov	r1, r3
 8002cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cae:	2200      	movs	r2, #0
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002cb8:	f7fd faa6 	bl	8000208 <__aeabi_uldivmod>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cc4:	e058      	b.n	8002d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc6:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	099b      	lsrs	r3, r3, #6
 8002ccc:	2200      	movs	r2, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002cd6:	623b      	str	r3, [r7, #32]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ce0:	4642      	mov	r2, r8
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	f04f 0000 	mov.w	r0, #0
 8002ce8:	f04f 0100 	mov.w	r1, #0
 8002cec:	0159      	lsls	r1, r3, #5
 8002cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf2:	0150      	lsls	r0, r2, #5
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4641      	mov	r1, r8
 8002cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cfe:	4649      	mov	r1, r9
 8002d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d18:	ebb2 040a 	subs.w	r4, r2, sl
 8002d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d20:	f04f 0200 	mov.w	r2, #0
 8002d24:	f04f 0300 	mov.w	r3, #0
 8002d28:	00eb      	lsls	r3, r5, #3
 8002d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d2e:	00e2      	lsls	r2, r4, #3
 8002d30:	4614      	mov	r4, r2
 8002d32:	461d      	mov	r5, r3
 8002d34:	4643      	mov	r3, r8
 8002d36:	18e3      	adds	r3, r4, r3
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	464b      	mov	r3, r9
 8002d3c:	eb45 0303 	adc.w	r3, r5, r3
 8002d40:	607b      	str	r3, [r7, #4]
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d4e:	4629      	mov	r1, r5
 8002d50:	028b      	lsls	r3, r1, #10
 8002d52:	4621      	mov	r1, r4
 8002d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d58:	4621      	mov	r1, r4
 8002d5a:	028a      	lsls	r2, r1, #10
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4619      	mov	r1, r3
 8002d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d62:	2200      	movs	r2, #0
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	61fa      	str	r2, [r7, #28]
 8002d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d6c:	f7fd fa4c 	bl	8000208 <__aeabi_uldivmod>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4613      	mov	r3, r2
 8002d76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	0c1b      	lsrs	r3, r3, #16
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	3301      	adds	r3, #1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002d88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d92:	e002      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <HAL_RCC_GetSysClockFreq+0x204>)
 8002d96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3750      	adds	r7, #80	; 0x50
 8002da0:	46bd      	mov	sp, r7
 8002da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da6:	bf00      	nop
 8002da8:	40023800 	.word	0x40023800
 8002dac:	00f42400 	.word	0x00f42400
 8002db0:	007a1200 	.word	0x007a1200

08002db4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002db8:	4b03      	ldr	r3, [pc, #12]	; (8002dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dba:	681b      	ldr	r3, [r3, #0]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	20000000 	.word	0x20000000

08002dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dd0:	f7ff fff0 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	0a9b      	lsrs	r3, r3, #10
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	4903      	ldr	r1, [pc, #12]	; (8002df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40023800 	.word	0x40023800
 8002df0:	08005d98 	.word	0x08005d98

08002df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002df8:	f7ff ffdc 	bl	8002db4 <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0b5b      	lsrs	r3, r3, #13
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4903      	ldr	r1, [pc, #12]	; (8002e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	40023800 	.word	0x40023800
 8002e18:	08005d98 	.word	0x08005d98

08002e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d012      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e44:	4b69      	ldr	r3, [pc, #420]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	4a68      	ldr	r2, [pc, #416]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e4e:	6093      	str	r3, [r2, #8]
 8002e50:	4b66      	ldr	r3, [pc, #408]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	4964      	ldr	r1, [pc, #400]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d017      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e76:	4b5d      	ldr	r3, [pc, #372]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	4959      	ldr	r1, [pc, #356]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d017      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002eb2:	4b4e      	ldr	r3, [pc, #312]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	494a      	ldr	r1, [pc, #296]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 808b 	beq.w	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f00:	4b3a      	ldr	r3, [pc, #232]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	4a39      	ldr	r2, [pc, #228]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0c:	4b37      	ldr	r3, [pc, #220]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f18:	4b35      	ldr	r3, [pc, #212]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a34      	ldr	r2, [pc, #208]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f24:	f7fe fa5c 	bl	80013e0 <HAL_GetTick>
 8002f28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f2c:	f7fe fa58 	bl	80013e0 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e357      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f4a:	4b28      	ldr	r3, [pc, #160]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d035      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d02e      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f68:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f72:	4b1e      	ldr	r3, [pc, #120]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a1d      	ldr	r2, [pc, #116]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f7e:	4b1b      	ldr	r3, [pc, #108]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	4a1a      	ldr	r2, [pc, #104]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f8a:	4a18      	ldr	r2, [pc, #96]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d114      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe fa20 	bl	80013e0 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa2:	e00a      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa4:	f7fe fa1c 	bl	80013e0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e319      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0ee      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fd2:	d111      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fe2:	400b      	ands	r3, r1
 8002fe4:	4901      	ldr	r1, [pc, #4]	; (8002fec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
 8002fea:	e00b      	b.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40007000 	.word	0x40007000
 8002ff4:	0ffffcff 	.word	0x0ffffcff
 8002ff8:	4baa      	ldr	r3, [pc, #680]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4aa9      	ldr	r2, [pc, #676]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003002:	6093      	str	r3, [r2, #8]
 8003004:	4ba7      	ldr	r3, [pc, #668]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	49a4      	ldr	r1, [pc, #656]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003012:	4313      	orrs	r3, r2
 8003014:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0310 	and.w	r3, r3, #16
 800301e:	2b00      	cmp	r3, #0
 8003020:	d010      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003022:	4ba0      	ldr	r3, [pc, #640]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003028:	4a9e      	ldr	r2, [pc, #632]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800302e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003032:	4b9c      	ldr	r3, [pc, #624]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003034:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	4999      	ldr	r1, [pc, #612]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003050:	4b94      	ldr	r3, [pc, #592]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003056:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305e:	4991      	ldr	r1, [pc, #580]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003072:	4b8c      	ldr	r3, [pc, #560]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003078:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003080:	4988      	ldr	r1, [pc, #544]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003082:	4313      	orrs	r3, r2
 8003084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00a      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003094:	4b83      	ldr	r3, [pc, #524]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a2:	4980      	ldr	r1, [pc, #512]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030b6:	4b7b      	ldr	r3, [pc, #492]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c4:	4977      	ldr	r1, [pc, #476]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030d8:	4b72      	ldr	r3, [pc, #456]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	496f      	ldr	r1, [pc, #444]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00a      	beq.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030fa:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	f023 020c 	bic.w	r2, r3, #12
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003108:	4966      	ldr	r1, [pc, #408]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003118:	2b00      	cmp	r3, #0
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800311c:	4b61      	ldr	r3, [pc, #388]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003122:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800312a:	495e      	ldr	r1, [pc, #376]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800312c:	4313      	orrs	r3, r2
 800312e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00a      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800313e:	4b59      	ldr	r3, [pc, #356]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003144:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314c:	4955      	ldr	r1, [pc, #340]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314e:	4313      	orrs	r3, r2
 8003150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003160:	4b50      	ldr	r3, [pc, #320]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	494d      	ldr	r1, [pc, #308]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003170:	4313      	orrs	r3, r2
 8003172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003182:	4b48      	ldr	r3, [pc, #288]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003190:	4944      	ldr	r1, [pc, #272]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003192:	4313      	orrs	r3, r2
 8003194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031a4:	4b3f      	ldr	r3, [pc, #252]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	493c      	ldr	r1, [pc, #240]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031c6:	4b37      	ldr	r3, [pc, #220]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d4:	4933      	ldr	r1, [pc, #204]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031e8:	4b2e      	ldr	r3, [pc, #184]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f6:	492b      	ldr	r1, [pc, #172]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d011      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800320c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003210:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003218:	4922      	ldr	r1, [pc, #136]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003228:	d101      	bne.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800322a:	2301      	movs	r3, #1
 800322c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800323a:	2301      	movs	r3, #1
 800323c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	4912      	ldr	r1, [pc, #72]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327c:	4909      	ldr	r1, [pc, #36]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d006      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80d9 	beq.w	800344a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003298:	4b02      	ldr	r3, [pc, #8]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a01      	ldr	r2, [pc, #4]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800329e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032a2:	e001      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80032a4:	40023800 	.word	0x40023800
 80032a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032aa:	f7fe f899 	bl	80013e0 <HAL_GetTick>
 80032ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032b2:	f7fe f895 	bl	80013e0 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b64      	cmp	r3, #100	; 0x64
 80032be:	d901      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e194      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032c4:	4b6c      	ldr	r3, [pc, #432]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f0      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d021      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d11d      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032e4:	4b64      	ldr	r3, [pc, #400]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032f2:	4b61      	ldr	r3, [pc, #388]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f8:	0e1b      	lsrs	r3, r3, #24
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	019a      	lsls	r2, r3, #6
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	041b      	lsls	r3, r3, #16
 800330a:	431a      	orrs	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	061b      	lsls	r3, r3, #24
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	071b      	lsls	r3, r3, #28
 8003318:	4957      	ldr	r1, [pc, #348]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d004      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003334:	d00a      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800333e:	2b00      	cmp	r3, #0
 8003340:	d02e      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d129      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800334c:	4b4a      	ldr	r3, [pc, #296]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800334e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003352:	0c1b      	lsrs	r3, r3, #16
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800335a:	4b47      	ldr	r3, [pc, #284]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800335c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003360:	0f1b      	lsrs	r3, r3, #28
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	019a      	lsls	r2, r3, #6
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	041b      	lsls	r3, r3, #16
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	061b      	lsls	r3, r3, #24
 800337a:	431a      	orrs	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	071b      	lsls	r3, r3, #28
 8003380:	493d      	ldr	r1, [pc, #244]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003388:	4b3b      	ldr	r3, [pc, #236]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800338a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338e:	f023 021f 	bic.w	r2, r3, #31
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	3b01      	subs	r3, #1
 8003398:	4937      	ldr	r1, [pc, #220]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800339a:	4313      	orrs	r3, r2
 800339c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01d      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ac:	4b32      	ldr	r3, [pc, #200]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b2:	0e1b      	lsrs	r3, r3, #24
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033ba:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c0:	0f1b      	lsrs	r3, r3, #28
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	019a      	lsls	r2, r3, #6
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	431a      	orrs	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	431a      	orrs	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	071b      	lsls	r3, r3, #28
 80033e0:	4925      	ldr	r1, [pc, #148]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d011      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	019a      	lsls	r2, r3, #6
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	061b      	lsls	r3, r3, #24
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	071b      	lsls	r3, r3, #28
 8003410:	4919      	ldr	r1, [pc, #100]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003418:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800341e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003422:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003424:	f7fd ffdc 	bl	80013e0 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800342c:	f7fd ffd8 	bl	80013e0 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e0d7      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800343e:	4b0e      	ldr	r3, [pc, #56]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	2b01      	cmp	r3, #1
 800344e:	f040 80cd 	bne.w	80035ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800345e:	f7fd ffbf 	bl	80013e0 <HAL_GetTick>
 8003462:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003464:	e00a      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003466:	f7fd ffbb 	bl	80013e0 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b64      	cmp	r3, #100	; 0x64
 8003472:	d903      	bls.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0ba      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003478:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800347c:	4b5e      	ldr	r3, [pc, #376]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003484:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003488:	d0ed      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d02e      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d12a      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034b2:	4b51      	ldr	r3, [pc, #324]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	f003 0303 	and.w	r3, r3, #3
 80034be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034c0:	4b4d      	ldr	r3, [pc, #308]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	0f1b      	lsrs	r3, r3, #28
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	019a      	lsls	r2, r3, #6
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	061b      	lsls	r3, r3, #24
 80034e0:	431a      	orrs	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	071b      	lsls	r3, r3, #28
 80034e6:	4944      	ldr	r1, [pc, #272]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034ee:	4b42      	ldr	r3, [pc, #264]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	3b01      	subs	r3, #1
 80034fe:	021b      	lsls	r3, r3, #8
 8003500:	493d      	ldr	r1, [pc, #244]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d022      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800351c:	d11d      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800351e:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003524:	0e1b      	lsrs	r3, r3, #24
 8003526:	f003 030f 	and.w	r3, r3, #15
 800352a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800352c:	4b32      	ldr	r3, [pc, #200]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	0f1b      	lsrs	r3, r3, #28
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	019a      	lsls	r2, r3, #6
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	041b      	lsls	r3, r3, #16
 8003546:	431a      	orrs	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	061b      	lsls	r3, r3, #24
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	071b      	lsls	r3, r3, #28
 8003552:	4929      	ldr	r1, [pc, #164]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d028      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003566:	4b24      	ldr	r3, [pc, #144]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800356c:	0e1b      	lsrs	r3, r3, #24
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003574:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357a:	0c1b      	lsrs	r3, r3, #16
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	019a      	lsls	r2, r3, #6
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	041b      	lsls	r3, r3, #16
 800358c:	431a      	orrs	r2, r3
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	061b      	lsls	r3, r3, #24
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	071b      	lsls	r3, r3, #28
 800359a:	4917      	ldr	r1, [pc, #92]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035a2:	4b15      	ldr	r3, [pc, #84]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b0:	4911      	ldr	r1, [pc, #68]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035b8:	4b0f      	ldr	r3, [pc, #60]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0e      	ldr	r2, [pc, #56]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c4:	f7fd ff0c 	bl	80013e0 <HAL_GetTick>
 80035c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035cc:	f7fd ff08 	bl	80013e0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b64      	cmp	r3, #100	; 0x64
 80035d8:	d901      	bls.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e007      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035ea:	d1ef      	bne.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3720      	adds	r7, #32
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800

080035fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e049      	b.n	80036a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fd fcaa 	bl	8000f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f000 fbc6 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e049      	b.n	8003750 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d106      	bne.n	80036d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f841 	bl	8003758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2202      	movs	r2, #2
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3304      	adds	r3, #4
 80036e6:	4619      	mov	r1, r3
 80036e8:	4610      	mov	r0, r2
 80036ea:	f000 fb6f 	bl	8003dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3708      	adds	r7, #8
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b02      	cmp	r3, #2
 8003780:	d122      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b02      	cmp	r3, #2
 800378e:	d11b      	bne.n	80037c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0202 	mvn.w	r2, #2
 8003798:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 faee 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 80037b4:	e005      	b.n	80037c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 fae0 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 faf1 	bl	8003da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d122      	bne.n	800381c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b04      	cmp	r3, #4
 80037e2:	d11b      	bne.n	800381c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f06f 0204 	mvn.w	r2, #4
 80037ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2202      	movs	r2, #2
 80037f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 fac4 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 8003808:	e005      	b.n	8003816 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fab6 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 fac7 	bl	8003da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b08      	cmp	r3, #8
 8003828:	d122      	bne.n	8003870 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d11b      	bne.n	8003870 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0208 	mvn.w	r2, #8
 8003840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2204      	movs	r2, #4
 8003846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fa9a 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 800385c:	e005      	b.n	800386a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa8c 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fa9d 	bl	8003da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b10      	cmp	r3, #16
 800387c:	d122      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b10      	cmp	r3, #16
 800388a:	d11b      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f06f 0210 	mvn.w	r2, #16
 8003894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2208      	movs	r2, #8
 800389a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 fa70 	bl	8003d90 <HAL_TIM_IC_CaptureCallback>
 80038b0:	e005      	b.n	80038be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa62 	bl	8003d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fa73 	bl	8003da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d10e      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0201 	mvn.w	r2, #1
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 fa3c 	bl	8003d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	2b80      	cmp	r3, #128	; 0x80
 80038fc:	d10e      	bne.n	800391c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b80      	cmp	r3, #128	; 0x80
 800390a:	d107      	bne.n	800391c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fe88 	bl	800462c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800392a:	d10e      	bne.n	800394a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003936:	2b80      	cmp	r3, #128	; 0x80
 8003938:	d107      	bne.n	800394a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 fe7b 	bl	8004640 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003954:	2b40      	cmp	r3, #64	; 0x40
 8003956:	d10e      	bne.n	8003976 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003962:	2b40      	cmp	r3, #64	; 0x40
 8003964:	d107      	bne.n	8003976 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800396e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 fa21 	bl	8003db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	691b      	ldr	r3, [r3, #16]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b20      	cmp	r3, #32
 8003982:	d10e      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b20      	cmp	r3, #32
 8003990:	d107      	bne.n	80039a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f06f 0220 	mvn.w	r2, #32
 800399a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f000 fe3b 	bl	8004618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d101      	bne.n	80039ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e0ff      	b.n	8003bca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b14      	cmp	r3, #20
 80039d6:	f200 80f0 	bhi.w	8003bba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80039da:	a201      	add	r2, pc, #4	; (adr r2, 80039e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e0:	08003a35 	.word	0x08003a35
 80039e4:	08003bbb 	.word	0x08003bbb
 80039e8:	08003bbb 	.word	0x08003bbb
 80039ec:	08003bbb 	.word	0x08003bbb
 80039f0:	08003a75 	.word	0x08003a75
 80039f4:	08003bbb 	.word	0x08003bbb
 80039f8:	08003bbb 	.word	0x08003bbb
 80039fc:	08003bbb 	.word	0x08003bbb
 8003a00:	08003ab7 	.word	0x08003ab7
 8003a04:	08003bbb 	.word	0x08003bbb
 8003a08:	08003bbb 	.word	0x08003bbb
 8003a0c:	08003bbb 	.word	0x08003bbb
 8003a10:	08003af7 	.word	0x08003af7
 8003a14:	08003bbb 	.word	0x08003bbb
 8003a18:	08003bbb 	.word	0x08003bbb
 8003a1c:	08003bbb 	.word	0x08003bbb
 8003a20:	08003b39 	.word	0x08003b39
 8003a24:	08003bbb 	.word	0x08003bbb
 8003a28:	08003bbb 	.word	0x08003bbb
 8003a2c:	08003bbb 	.word	0x08003bbb
 8003a30:	08003b79 	.word	0x08003b79
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 fa66 	bl	8003f0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f042 0208 	orr.w	r2, r2, #8
 8003a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0204 	bic.w	r2, r2, #4
 8003a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6999      	ldr	r1, [r3, #24]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	619a      	str	r2, [r3, #24]
      break;
 8003a72:	e0a5      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fab8 	bl	8003ff0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699a      	ldr	r2, [r3, #24]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	699a      	ldr	r2, [r3, #24]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6999      	ldr	r1, [r3, #24]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	021a      	lsls	r2, r3, #8
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	619a      	str	r2, [r3, #24]
      break;
 8003ab4:	e084      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fb0f 	bl	80040e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f042 0208 	orr.w	r2, r2, #8
 8003ad0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0204 	bic.w	r2, r2, #4
 8003ae0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69d9      	ldr	r1, [r3, #28]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	691a      	ldr	r2, [r3, #16]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	61da      	str	r2, [r3, #28]
      break;
 8003af4:	e064      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fb65 	bl	80041cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69da      	ldr	r2, [r3, #28]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69d9      	ldr	r1, [r3, #28]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	021a      	lsls	r2, r3, #8
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	61da      	str	r2, [r3, #28]
      break;
 8003b36:	e043      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68b9      	ldr	r1, [r7, #8]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fb9c 	bl	800427c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0208 	orr.w	r2, r2, #8
 8003b52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0204 	bic.w	r2, r2, #4
 8003b62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	691a      	ldr	r2, [r3, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b76:	e023      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 fbce 	bl	8004320 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ba2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	021a      	lsls	r2, r3, #8
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	430a      	orrs	r2, r1
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bb8:	e002      	b.n	8003bc0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003bbe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop

08003bd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIM_ConfigClockSource+0x1c>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e0b4      	b.n	8003d5a <HAL_TIM_ConfigClockSource+0x186>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	4b56      	ldr	r3, [pc, #344]	; (8003d64 <HAL_TIM_ConfigClockSource+0x190>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c28:	d03e      	beq.n	8003ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2e:	f200 8087 	bhi.w	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c36:	f000 8086 	beq.w	8003d46 <HAL_TIM_ConfigClockSource+0x172>
 8003c3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c3e:	d87f      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c40:	2b70      	cmp	r3, #112	; 0x70
 8003c42:	d01a      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0xa6>
 8003c44:	2b70      	cmp	r3, #112	; 0x70
 8003c46:	d87b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c48:	2b60      	cmp	r3, #96	; 0x60
 8003c4a:	d050      	beq.n	8003cee <HAL_TIM_ConfigClockSource+0x11a>
 8003c4c:	2b60      	cmp	r3, #96	; 0x60
 8003c4e:	d877      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c50:	2b50      	cmp	r3, #80	; 0x50
 8003c52:	d03c      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xfa>
 8003c54:	2b50      	cmp	r3, #80	; 0x50
 8003c56:	d873      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c58:	2b40      	cmp	r3, #64	; 0x40
 8003c5a:	d058      	beq.n	8003d0e <HAL_TIM_ConfigClockSource+0x13a>
 8003c5c:	2b40      	cmp	r3, #64	; 0x40
 8003c5e:	d86f      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c60:	2b30      	cmp	r3, #48	; 0x30
 8003c62:	d064      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15a>
 8003c64:	2b30      	cmp	r3, #48	; 0x30
 8003c66:	d86b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d060      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15a>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d867      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d05c      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15a>
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d05a      	beq.n	8003d2e <HAL_TIM_ConfigClockSource+0x15a>
 8003c78:	e062      	b.n	8003d40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c8a:	f000 fc17 	bl	80044bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	609a      	str	r2, [r3, #8]
      break;
 8003ca6:	e04f      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cb8:	f000 fc00 	bl	80044bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cca:	609a      	str	r2, [r3, #8]
      break;
 8003ccc:	e03c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f000 fb74 	bl	80043c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2150      	movs	r1, #80	; 0x50
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fbcd 	bl	8004486 <TIM_ITRx_SetConfig>
      break;
 8003cec:	e02c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f000 fb93 	bl	8004426 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2160      	movs	r1, #96	; 0x60
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 fbbd 	bl	8004486 <TIM_ITRx_SetConfig>
      break;
 8003d0c:	e01c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f000 fb54 	bl	80043c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2140      	movs	r1, #64	; 0x40
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fbad 	bl	8004486 <TIM_ITRx_SetConfig>
      break;
 8003d2c:	e00c      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f000 fba4 	bl	8004486 <TIM_ITRx_SetConfig>
      break;
 8003d3e:	e003      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      break;
 8003d44:	e000      	b.n	8003d48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	fffeff88 	.word	0xfffeff88

08003d68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d70:	bf00      	nop
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a40      	ldr	r2, [pc, #256]	; (8003ee0 <TIM_Base_SetConfig+0x114>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d013      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dea:	d00f      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a3d      	ldr	r2, [pc, #244]	; (8003ee4 <TIM_Base_SetConfig+0x118>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00b      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a3c      	ldr	r2, [pc, #240]	; (8003ee8 <TIM_Base_SetConfig+0x11c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d007      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a3b      	ldr	r2, [pc, #236]	; (8003eec <TIM_Base_SetConfig+0x120>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_Base_SetConfig+0x40>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a3a      	ldr	r2, [pc, #232]	; (8003ef0 <TIM_Base_SetConfig+0x124>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d108      	bne.n	8003e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a2f      	ldr	r2, [pc, #188]	; (8003ee0 <TIM_Base_SetConfig+0x114>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d02b      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e2c:	d027      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a2c      	ldr	r2, [pc, #176]	; (8003ee4 <TIM_Base_SetConfig+0x118>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d023      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a2b      	ldr	r2, [pc, #172]	; (8003ee8 <TIM_Base_SetConfig+0x11c>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d01f      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a2a      	ldr	r2, [pc, #168]	; (8003eec <TIM_Base_SetConfig+0x120>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d01b      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a29      	ldr	r2, [pc, #164]	; (8003ef0 <TIM_Base_SetConfig+0x124>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d017      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a28      	ldr	r2, [pc, #160]	; (8003ef4 <TIM_Base_SetConfig+0x128>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d013      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a27      	ldr	r2, [pc, #156]	; (8003ef8 <TIM_Base_SetConfig+0x12c>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00f      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a26      	ldr	r2, [pc, #152]	; (8003efc <TIM_Base_SetConfig+0x130>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00b      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a25      	ldr	r2, [pc, #148]	; (8003f00 <TIM_Base_SetConfig+0x134>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <TIM_Base_SetConfig+0x138>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <TIM_Base_SetConfig+0x13c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d108      	bne.n	8003e90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <TIM_Base_SetConfig+0x114>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_Base_SetConfig+0xf8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a0c      	ldr	r2, [pc, #48]	; (8003ef0 <TIM_Base_SetConfig+0x124>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	615a      	str	r2, [r3, #20]
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	40010000 	.word	0x40010000
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800
 8003eec:	40000c00 	.word	0x40000c00
 8003ef0:	40010400 	.word	0x40010400
 8003ef4:	40014000 	.word	0x40014000
 8003ef8:	40014400 	.word	0x40014400
 8003efc:	40014800 	.word	0x40014800
 8003f00:	40001800 	.word	0x40001800
 8003f04:	40001c00 	.word	0x40001c00
 8003f08:	40002000 	.word	0x40002000

08003f0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f023 0201 	bic.w	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4b2b      	ldr	r3, [pc, #172]	; (8003fe4 <TIM_OC1_SetConfig+0xd8>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0303 	bic.w	r3, r3, #3
 8003f42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f023 0302 	bic.w	r3, r3, #2
 8003f54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a21      	ldr	r2, [pc, #132]	; (8003fe8 <TIM_OC1_SetConfig+0xdc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d003      	beq.n	8003f70 <TIM_OC1_SetConfig+0x64>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a20      	ldr	r2, [pc, #128]	; (8003fec <TIM_OC1_SetConfig+0xe0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d10c      	bne.n	8003f8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f023 0308 	bic.w	r3, r3, #8
 8003f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a16      	ldr	r2, [pc, #88]	; (8003fe8 <TIM_OC1_SetConfig+0xdc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d003      	beq.n	8003f9a <TIM_OC1_SetConfig+0x8e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a15      	ldr	r2, [pc, #84]	; (8003fec <TIM_OC1_SetConfig+0xe0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d111      	bne.n	8003fbe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	621a      	str	r2, [r3, #32]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	fffeff8f 	.word	0xfffeff8f
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40010400 	.word	0x40010400

08003ff0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f023 0210 	bic.w	r2, r3, #16
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	4b2e      	ldr	r3, [pc, #184]	; (80040d4 <TIM_OC2_SetConfig+0xe4>)
 800401c:	4013      	ands	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	021b      	lsls	r3, r3, #8
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0320 	bic.w	r3, r3, #32
 800403a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	4313      	orrs	r3, r2
 8004046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a23      	ldr	r2, [pc, #140]	; (80040d8 <TIM_OC2_SetConfig+0xe8>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d003      	beq.n	8004058 <TIM_OC2_SetConfig+0x68>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a22      	ldr	r2, [pc, #136]	; (80040dc <TIM_OC2_SetConfig+0xec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d10d      	bne.n	8004074 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800405e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a18      	ldr	r2, [pc, #96]	; (80040d8 <TIM_OC2_SetConfig+0xe8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d003      	beq.n	8004084 <TIM_OC2_SetConfig+0x94>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <TIM_OC2_SetConfig+0xec>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d113      	bne.n	80040ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800408a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004092:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	feff8fff 	.word	0xfeff8fff
 80040d8:	40010000 	.word	0x40010000
 80040dc:	40010400 	.word	0x40010400

080040e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <TIM_OC3_SetConfig+0xe0>)
 800410c:	4013      	ands	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	021b      	lsls	r3, r3, #8
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a22      	ldr	r2, [pc, #136]	; (80041c4 <TIM_OC3_SetConfig+0xe4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d003      	beq.n	8004146 <TIM_OC3_SetConfig+0x66>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a21      	ldr	r2, [pc, #132]	; (80041c8 <TIM_OC3_SetConfig+0xe8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10d      	bne.n	8004162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800414c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <TIM_OC3_SetConfig+0xe4>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <TIM_OC3_SetConfig+0x92>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a16      	ldr	r2, [pc, #88]	; (80041c8 <TIM_OC3_SetConfig+0xe8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d113      	bne.n	800419a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	4313      	orrs	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	621a      	str	r2, [r3, #32]
}
 80041b4:	bf00      	nop
 80041b6:	371c      	adds	r7, #28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	fffeff8f 	.word	0xfffeff8f
 80041c4:	40010000 	.word	0x40010000
 80041c8:	40010400 	.word	0x40010400

080041cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <TIM_OC4_SetConfig+0xa4>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4313      	orrs	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	031b      	lsls	r3, r3, #12
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a13      	ldr	r2, [pc, #76]	; (8004274 <TIM_OC4_SetConfig+0xa8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_OC4_SetConfig+0x68>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a12      	ldr	r2, [pc, #72]	; (8004278 <TIM_OC4_SetConfig+0xac>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d109      	bne.n	8004248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800423a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	019b      	lsls	r3, r3, #6
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	4313      	orrs	r3, r2
 8004246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	621a      	str	r2, [r3, #32]
}
 8004262:	bf00      	nop
 8004264:	371c      	adds	r7, #28
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	feff8fff 	.word	0xfeff8fff
 8004274:	40010000 	.word	0x40010000
 8004278:	40010400 	.word	0x40010400

0800427c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1b      	ldr	r3, [r3, #32]
 800428a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
 8004296:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4b1b      	ldr	r3, [pc, #108]	; (8004314 <TIM_OC5_SetConfig+0x98>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a12      	ldr	r2, [pc, #72]	; (8004318 <TIM_OC5_SetConfig+0x9c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d003      	beq.n	80042da <TIM_OC5_SetConfig+0x5e>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a11      	ldr	r2, [pc, #68]	; (800431c <TIM_OC5_SetConfig+0xa0>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d109      	bne.n	80042ee <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	695b      	ldr	r3, [r3, #20]
 80042e6:	021b      	lsls	r3, r3, #8
 80042e8:	697a      	ldr	r2, [r7, #20]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	621a      	str	r2, [r3, #32]
}
 8004308:	bf00      	nop
 800430a:	371c      	adds	r7, #28
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	fffeff8f 	.word	0xfffeff8f
 8004318:	40010000 	.word	0x40010000
 800431c:	40010400 	.word	0x40010400

08004320 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004320:	b480      	push	{r7}
 8004322:	b087      	sub	sp, #28
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	4b1c      	ldr	r3, [pc, #112]	; (80043bc <TIM_OC6_SetConfig+0x9c>)
 800434c:	4013      	ands	r3, r2
 800434e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4313      	orrs	r3, r2
 800435a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004362:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	051b      	lsls	r3, r3, #20
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	4313      	orrs	r3, r2
 800436e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a13      	ldr	r2, [pc, #76]	; (80043c0 <TIM_OC6_SetConfig+0xa0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d003      	beq.n	8004380 <TIM_OC6_SetConfig+0x60>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a12      	ldr	r2, [pc, #72]	; (80043c4 <TIM_OC6_SetConfig+0xa4>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d109      	bne.n	8004394 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004386:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	029b      	lsls	r3, r3, #10
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	4313      	orrs	r3, r2
 8004392:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	feff8fff 	.word	0xfeff8fff
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40010400 	.word	0x40010400

080043c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f023 0201 	bic.w	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f023 030a 	bic.w	r3, r3, #10
 8004404:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	621a      	str	r2, [r3, #32]
}
 800441a:	bf00      	nop
 800441c:	371c      	adds	r7, #28
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004426:	b480      	push	{r7}
 8004428:	b087      	sub	sp, #28
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	f023 0210 	bic.w	r2, r3, #16
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	031b      	lsls	r3, r3, #12
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004462:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	011b      	lsls	r3, r3, #4
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	621a      	str	r2, [r3, #32]
}
 800447a:	bf00      	nop
 800447c:	371c      	adds	r7, #28
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004486:	b480      	push	{r7}
 8004488:	b085      	sub	sp, #20
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800449c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	f043 0307 	orr.w	r3, r3, #7
 80044a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	609a      	str	r2, [r3, #8]
}
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	021a      	lsls	r2, r3, #8
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	431a      	orrs	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	609a      	str	r2, [r3, #8]
}
 80044f0:	bf00      	nop
 80044f2:	371c      	adds	r7, #28
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800450c:	2b01      	cmp	r3, #1
 800450e:	d101      	bne.n	8004514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004510:	2302      	movs	r3, #2
 8004512:	e06d      	b.n	80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a30      	ldr	r2, [pc, #192]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d004      	beq.n	8004548 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a2f      	ldr	r2, [pc, #188]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d108      	bne.n	800455a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800454e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	4313      	orrs	r3, r2
 8004558:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004560:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a20      	ldr	r2, [pc, #128]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d022      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004586:	d01d      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a1d      	ldr	r2, [pc, #116]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d018      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a1a      	ldr	r2, [pc, #104]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d00e      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a15      	ldr	r2, [pc, #84]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d009      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a16      	ldr	r2, [pc, #88]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d004      	beq.n	80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a15      	ldr	r2, [pc, #84]	; (8004614 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10c      	bne.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045ee:	2300      	movs	r3, #0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3714      	adds	r7, #20
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	40010000 	.word	0x40010000
 8004600:	40010400 	.word	0x40010400
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800
 800460c:	40000c00 	.word	0x40000c00
 8004610:	40014000 	.word	0x40014000
 8004614:	40001800 	.word	0x40001800

08004618 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004618:	b480      	push	{r7}
 800461a:	b083      	sub	sp, #12
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004620:	bf00      	nop
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004648:	bf00      	nop
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e040      	b.n	80046e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fc fd28 	bl	80010cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	; 0x24
 8004680:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f022 0201 	bic.w	r2, r2, #1
 8004690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fba2 	bl	8004ddc <UART_SetConfig>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e022      	b.n	80046e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d002      	beq.n	80046b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fdfa 	bl	80052a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f042 0201 	orr.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 fe81 	bl	80053e8 <UART_CheckIdleState>
 80046e6:	4603      	mov	r3, r0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004704:	2b20      	cmp	r3, #32
 8004706:	d171      	bne.n	80047ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_UART_Transmit+0x24>
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e06a      	b.n	80047ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2221      	movs	r2, #33	; 0x21
 8004724:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004726:	f7fc fe5b 	bl	80013e0 <HAL_GetTick>
 800472a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	88fa      	ldrh	r2, [r7, #6]
 8004730:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004744:	d108      	bne.n	8004758 <HAL_UART_Transmit+0x68>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e003      	b.n	8004760 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004760:	e02c      	b.n	80047bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2200      	movs	r2, #0
 800476a:	2180      	movs	r1, #128	; 0x80
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fe72 	bl	8005456 <UART_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e038      	b.n	80047ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004790:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	3302      	adds	r3, #2
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	e007      	b.n	80047aa <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	781a      	ldrb	r2, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	3301      	adds	r3, #1
 80047a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1cc      	bne.n	8004762 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2200      	movs	r2, #0
 80047d0:	2140      	movs	r1, #64	; 0x40
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 fe3f 	bl	8005456 <UART_WaitOnFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e005      	b.n	80047ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e000      	b.n	80047ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047ec:	2302      	movs	r3, #2
  }
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3720      	adds	r7, #32
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b0ba      	sub	sp, #232	; 0xe8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800481e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004822:	f640 030f 	movw	r3, #2063	; 0x80f
 8004826:	4013      	ands	r3, r2
 8004828:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800482c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d115      	bne.n	8004860 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004834:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00f      	beq.n	8004860 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d009      	beq.n	8004860 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8297 	beq.w	8004d84 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	4798      	blx	r3
      }
      return;
 800485e:	e291      	b.n	8004d84 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8117 	beq.w	8004a98 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800486a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004876:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800487a:	4b85      	ldr	r3, [pc, #532]	; (8004a90 <HAL_UART_IRQHandler+0x298>)
 800487c:	4013      	ands	r3, r2
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 810a 	beq.w	8004a98 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d011      	beq.n	80048b4 <HAL_UART_IRQHandler+0xbc>
 8004890:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00b      	beq.n	80048b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2201      	movs	r2, #1
 80048a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048aa:	f043 0201 	orr.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d011      	beq.n	80048e4 <HAL_UART_IRQHandler+0xec>
 80048c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00b      	beq.n	80048e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2202      	movs	r2, #2
 80048d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048da:	f043 0204 	orr.w	r2, r3, #4
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e8:	f003 0304 	and.w	r3, r3, #4
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d011      	beq.n	8004914 <HAL_UART_IRQHandler+0x11c>
 80048f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2204      	movs	r2, #4
 8004902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800490a:	f043 0202 	orr.w	r2, r3, #2
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d017      	beq.n	8004950 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004924:	f003 0320 	and.w	r3, r3, #32
 8004928:	2b00      	cmp	r3, #0
 800492a:	d105      	bne.n	8004938 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800492c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004930:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00b      	beq.n	8004950 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2208      	movs	r2, #8
 800493e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004946:	f043 0208 	orr.w	r2, r3, #8
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004958:	2b00      	cmp	r3, #0
 800495a:	d012      	beq.n	8004982 <HAL_UART_IRQHandler+0x18a>
 800495c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00c      	beq.n	8004982 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004978:	f043 0220 	orr.w	r2, r3, #32
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004988:	2b00      	cmp	r3, #0
 800498a:	f000 81fd 	beq.w	8004d88 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00d      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800499a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d005      	beq.n	80049da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d04f      	beq.n	8004a7a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fe01 	bl	80055e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d141      	bne.n	8004a72 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3308      	adds	r3, #8
 80049f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049fc:	e853 3f00 	ldrex	r3, [r3]
 8004a00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1d9      	bne.n	80049ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d013      	beq.n	8004a6a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a46:	4a13      	ldr	r2, [pc, #76]	; (8004a94 <HAL_UART_IRQHandler+0x29c>)
 8004a48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7fc fe77 	bl	8001742 <HAL_DMA_Abort_IT>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d017      	beq.n	8004a8a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004a64:	4610      	mov	r0, r2
 8004a66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	e00f      	b.n	8004a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f9a0 	bl	8004db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	e00b      	b.n	8004a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f99c 	bl	8004db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	e007      	b.n	8004a8a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f998 	bl	8004db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004a88:	e17e      	b.n	8004d88 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a8a:	bf00      	nop
    return;
 8004a8c:	e17c      	b.n	8004d88 <HAL_UART_IRQHandler+0x590>
 8004a8e:	bf00      	nop
 8004a90:	04000120 	.word	0x04000120
 8004a94:	080056ab 	.word	0x080056ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	f040 814c 	bne.w	8004d3a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f003 0310 	and.w	r3, r3, #16
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	f000 8145 	beq.w	8004d3a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 813e 	beq.w	8004d3a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2210      	movs	r2, #16
 8004ac4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	f040 80b6 	bne.w	8004c42 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ae2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f000 8150 	beq.w	8004d8c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004af6:	429a      	cmp	r2, r3
 8004af8:	f080 8148 	bcs.w	8004d8c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b02:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b10:	f000 8086 	beq.w	8004c20 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b42:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b4e:	e841 2300 	strex	r3, r2, [r1]
 8004b52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1da      	bne.n	8004b14 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3308      	adds	r3, #8
 8004b64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3308      	adds	r3, #8
 8004b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e1      	bne.n	8004b5e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3308      	adds	r3, #8
 8004ba0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba4:	e853 3f00 	ldrex	r3, [r3]
 8004ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004baa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bbe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bc0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bc4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bc6:	e841 2300 	strex	r3, r2, [r1]
 8004bca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1e3      	bne.n	8004b9a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004be8:	e853 3f00 	ldrex	r3, [r3]
 8004bec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bf0:	f023 0310 	bic.w	r3, r3, #16
 8004bf4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c02:	65bb      	str	r3, [r7, #88]	; 0x58
 8004c04:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c0a:	e841 2300 	strex	r3, r2, [r1]
 8004c0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1e4      	bne.n	8004be0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fc fd21 	bl	8001662 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	4619      	mov	r1, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f8c2 	bl	8004dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c40:	e0a4      	b.n	8004d8c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8096 	beq.w	8004d90 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8091 	beq.w	8004d90 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c90:	647b      	str	r3, [r7, #68]	; 0x44
 8004c92:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e4      	bne.n	8004c6e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	f023 0301 	bic.w	r3, r3, #1
 8004cba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cc8:	633a      	str	r2, [r7, #48]	; 0x30
 8004cca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e3      	bne.n	8004ca4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	e853 3f00 	ldrex	r3, [r3]
 8004cfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f023 0310 	bic.w	r3, r3, #16
 8004d04:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d16:	69b9      	ldr	r1, [r7, #24]
 8004d18:	69fa      	ldr	r2, [r7, #28]
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e4      	bne.n	8004cf0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d30:	4619      	mov	r1, r3
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f846 	bl	8004dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d38:	e02a      	b.n	8004d90 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00e      	beq.n	8004d64 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d01c      	beq.n	8004d94 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	4798      	blx	r3
    }
    return;
 8004d62:	e017      	b.n	8004d94 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d012      	beq.n	8004d96 <HAL_UART_IRQHandler+0x59e>
 8004d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00c      	beq.n	8004d96 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f000 fcaa 	bl	80056d6 <UART_EndTransmit_IT>
    return;
 8004d82:	e008      	b.n	8004d96 <HAL_UART_IRQHandler+0x59e>
      return;
 8004d84:	bf00      	nop
 8004d86:	e006      	b.n	8004d96 <HAL_UART_IRQHandler+0x59e>
    return;
 8004d88:	bf00      	nop
 8004d8a:	e004      	b.n	8004d96 <HAL_UART_IRQHandler+0x59e>
      return;
 8004d8c:	bf00      	nop
 8004d8e:	e002      	b.n	8004d96 <HAL_UART_IRQHandler+0x59e>
      return;
 8004d90:	bf00      	nop
 8004d92:	e000      	b.n	8004d96 <HAL_UART_IRQHandler+0x59e>
    return;
 8004d94:	bf00      	nop
  }

}
 8004d96:	37e8      	adds	r7, #232	; 0xe8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004de4:	2300      	movs	r3, #0
 8004de6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4ba6      	ldr	r3, [pc, #664]	; (80050a0 <UART_SetConfig+0x2c4>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	6979      	ldr	r1, [r7, #20]
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	697a      	ldr	r2, [r7, #20]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a94      	ldr	r2, [pc, #592]	; (80050a4 <UART_SetConfig+0x2c8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d120      	bne.n	8004e9a <UART_SetConfig+0xbe>
 8004e58:	4b93      	ldr	r3, [pc, #588]	; (80050a8 <UART_SetConfig+0x2cc>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d816      	bhi.n	8004e94 <UART_SetConfig+0xb8>
 8004e66:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <UART_SetConfig+0x90>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e7d 	.word	0x08004e7d
 8004e70:	08004e89 	.word	0x08004e89
 8004e74:	08004e83 	.word	0x08004e83
 8004e78:	08004e8f 	.word	0x08004e8f
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e150      	b.n	8005124 <UART_SetConfig+0x348>
 8004e82:	2302      	movs	r3, #2
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e14d      	b.n	8005124 <UART_SetConfig+0x348>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e14a      	b.n	8005124 <UART_SetConfig+0x348>
 8004e8e:	2308      	movs	r3, #8
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e147      	b.n	8005124 <UART_SetConfig+0x348>
 8004e94:	2310      	movs	r3, #16
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e144      	b.n	8005124 <UART_SetConfig+0x348>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a83      	ldr	r2, [pc, #524]	; (80050ac <UART_SetConfig+0x2d0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d132      	bne.n	8004f0a <UART_SetConfig+0x12e>
 8004ea4:	4b80      	ldr	r3, [pc, #512]	; (80050a8 <UART_SetConfig+0x2cc>)
 8004ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b0c      	cmp	r3, #12
 8004eb0:	d828      	bhi.n	8004f04 <UART_SetConfig+0x128>
 8004eb2:	a201      	add	r2, pc, #4	; (adr r2, 8004eb8 <UART_SetConfig+0xdc>)
 8004eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb8:	08004eed 	.word	0x08004eed
 8004ebc:	08004f05 	.word	0x08004f05
 8004ec0:	08004f05 	.word	0x08004f05
 8004ec4:	08004f05 	.word	0x08004f05
 8004ec8:	08004ef9 	.word	0x08004ef9
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08004f05 	.word	0x08004f05
 8004ed8:	08004ef3 	.word	0x08004ef3
 8004edc:	08004f05 	.word	0x08004f05
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f05 	.word	0x08004f05
 8004ee8:	08004eff 	.word	0x08004eff
 8004eec:	2300      	movs	r3, #0
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e118      	b.n	8005124 <UART_SetConfig+0x348>
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e115      	b.n	8005124 <UART_SetConfig+0x348>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e112      	b.n	8005124 <UART_SetConfig+0x348>
 8004efe:	2308      	movs	r3, #8
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	e10f      	b.n	8005124 <UART_SetConfig+0x348>
 8004f04:	2310      	movs	r3, #16
 8004f06:	77fb      	strb	r3, [r7, #31]
 8004f08:	e10c      	b.n	8005124 <UART_SetConfig+0x348>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a68      	ldr	r2, [pc, #416]	; (80050b0 <UART_SetConfig+0x2d4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d120      	bne.n	8004f56 <UART_SetConfig+0x17a>
 8004f14:	4b64      	ldr	r3, [pc, #400]	; (80050a8 <UART_SetConfig+0x2cc>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004f1e:	2b30      	cmp	r3, #48	; 0x30
 8004f20:	d013      	beq.n	8004f4a <UART_SetConfig+0x16e>
 8004f22:	2b30      	cmp	r3, #48	; 0x30
 8004f24:	d814      	bhi.n	8004f50 <UART_SetConfig+0x174>
 8004f26:	2b20      	cmp	r3, #32
 8004f28:	d009      	beq.n	8004f3e <UART_SetConfig+0x162>
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d810      	bhi.n	8004f50 <UART_SetConfig+0x174>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <UART_SetConfig+0x15c>
 8004f32:	2b10      	cmp	r3, #16
 8004f34:	d006      	beq.n	8004f44 <UART_SetConfig+0x168>
 8004f36:	e00b      	b.n	8004f50 <UART_SetConfig+0x174>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	77fb      	strb	r3, [r7, #31]
 8004f3c:	e0f2      	b.n	8005124 <UART_SetConfig+0x348>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	77fb      	strb	r3, [r7, #31]
 8004f42:	e0ef      	b.n	8005124 <UART_SetConfig+0x348>
 8004f44:	2304      	movs	r3, #4
 8004f46:	77fb      	strb	r3, [r7, #31]
 8004f48:	e0ec      	b.n	8005124 <UART_SetConfig+0x348>
 8004f4a:	2308      	movs	r3, #8
 8004f4c:	77fb      	strb	r3, [r7, #31]
 8004f4e:	e0e9      	b.n	8005124 <UART_SetConfig+0x348>
 8004f50:	2310      	movs	r3, #16
 8004f52:	77fb      	strb	r3, [r7, #31]
 8004f54:	e0e6      	b.n	8005124 <UART_SetConfig+0x348>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a56      	ldr	r2, [pc, #344]	; (80050b4 <UART_SetConfig+0x2d8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d120      	bne.n	8004fa2 <UART_SetConfig+0x1c6>
 8004f60:	4b51      	ldr	r3, [pc, #324]	; (80050a8 <UART_SetConfig+0x2cc>)
 8004f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f6a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f6c:	d013      	beq.n	8004f96 <UART_SetConfig+0x1ba>
 8004f6e:	2bc0      	cmp	r3, #192	; 0xc0
 8004f70:	d814      	bhi.n	8004f9c <UART_SetConfig+0x1c0>
 8004f72:	2b80      	cmp	r3, #128	; 0x80
 8004f74:	d009      	beq.n	8004f8a <UART_SetConfig+0x1ae>
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d810      	bhi.n	8004f9c <UART_SetConfig+0x1c0>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <UART_SetConfig+0x1a8>
 8004f7e:	2b40      	cmp	r3, #64	; 0x40
 8004f80:	d006      	beq.n	8004f90 <UART_SetConfig+0x1b4>
 8004f82:	e00b      	b.n	8004f9c <UART_SetConfig+0x1c0>
 8004f84:	2300      	movs	r3, #0
 8004f86:	77fb      	strb	r3, [r7, #31]
 8004f88:	e0cc      	b.n	8005124 <UART_SetConfig+0x348>
 8004f8a:	2302      	movs	r3, #2
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e0c9      	b.n	8005124 <UART_SetConfig+0x348>
 8004f90:	2304      	movs	r3, #4
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e0c6      	b.n	8005124 <UART_SetConfig+0x348>
 8004f96:	2308      	movs	r3, #8
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e0c3      	b.n	8005124 <UART_SetConfig+0x348>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e0c0      	b.n	8005124 <UART_SetConfig+0x348>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a44      	ldr	r2, [pc, #272]	; (80050b8 <UART_SetConfig+0x2dc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d125      	bne.n	8004ff8 <UART_SetConfig+0x21c>
 8004fac:	4b3e      	ldr	r3, [pc, #248]	; (80050a8 <UART_SetConfig+0x2cc>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fba:	d017      	beq.n	8004fec <UART_SetConfig+0x210>
 8004fbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fc0:	d817      	bhi.n	8004ff2 <UART_SetConfig+0x216>
 8004fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc6:	d00b      	beq.n	8004fe0 <UART_SetConfig+0x204>
 8004fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fcc:	d811      	bhi.n	8004ff2 <UART_SetConfig+0x216>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <UART_SetConfig+0x1fe>
 8004fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fd6:	d006      	beq.n	8004fe6 <UART_SetConfig+0x20a>
 8004fd8:	e00b      	b.n	8004ff2 <UART_SetConfig+0x216>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e0a1      	b.n	8005124 <UART_SetConfig+0x348>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e09e      	b.n	8005124 <UART_SetConfig+0x348>
 8004fe6:	2304      	movs	r3, #4
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e09b      	b.n	8005124 <UART_SetConfig+0x348>
 8004fec:	2308      	movs	r3, #8
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e098      	b.n	8005124 <UART_SetConfig+0x348>
 8004ff2:	2310      	movs	r3, #16
 8004ff4:	77fb      	strb	r3, [r7, #31]
 8004ff6:	e095      	b.n	8005124 <UART_SetConfig+0x348>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2f      	ldr	r2, [pc, #188]	; (80050bc <UART_SetConfig+0x2e0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d125      	bne.n	800504e <UART_SetConfig+0x272>
 8005002:	4b29      	ldr	r3, [pc, #164]	; (80050a8 <UART_SetConfig+0x2cc>)
 8005004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005008:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800500c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005010:	d017      	beq.n	8005042 <UART_SetConfig+0x266>
 8005012:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005016:	d817      	bhi.n	8005048 <UART_SetConfig+0x26c>
 8005018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800501c:	d00b      	beq.n	8005036 <UART_SetConfig+0x25a>
 800501e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005022:	d811      	bhi.n	8005048 <UART_SetConfig+0x26c>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <UART_SetConfig+0x254>
 8005028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800502c:	d006      	beq.n	800503c <UART_SetConfig+0x260>
 800502e:	e00b      	b.n	8005048 <UART_SetConfig+0x26c>
 8005030:	2301      	movs	r3, #1
 8005032:	77fb      	strb	r3, [r7, #31]
 8005034:	e076      	b.n	8005124 <UART_SetConfig+0x348>
 8005036:	2302      	movs	r3, #2
 8005038:	77fb      	strb	r3, [r7, #31]
 800503a:	e073      	b.n	8005124 <UART_SetConfig+0x348>
 800503c:	2304      	movs	r3, #4
 800503e:	77fb      	strb	r3, [r7, #31]
 8005040:	e070      	b.n	8005124 <UART_SetConfig+0x348>
 8005042:	2308      	movs	r3, #8
 8005044:	77fb      	strb	r3, [r7, #31]
 8005046:	e06d      	b.n	8005124 <UART_SetConfig+0x348>
 8005048:	2310      	movs	r3, #16
 800504a:	77fb      	strb	r3, [r7, #31]
 800504c:	e06a      	b.n	8005124 <UART_SetConfig+0x348>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <UART_SetConfig+0x2e4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d138      	bne.n	80050ca <UART_SetConfig+0x2ee>
 8005058:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <UART_SetConfig+0x2cc>)
 800505a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005062:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005066:	d017      	beq.n	8005098 <UART_SetConfig+0x2bc>
 8005068:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800506c:	d82a      	bhi.n	80050c4 <UART_SetConfig+0x2e8>
 800506e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005072:	d00b      	beq.n	800508c <UART_SetConfig+0x2b0>
 8005074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005078:	d824      	bhi.n	80050c4 <UART_SetConfig+0x2e8>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <UART_SetConfig+0x2aa>
 800507e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005082:	d006      	beq.n	8005092 <UART_SetConfig+0x2b6>
 8005084:	e01e      	b.n	80050c4 <UART_SetConfig+0x2e8>
 8005086:	2300      	movs	r3, #0
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e04b      	b.n	8005124 <UART_SetConfig+0x348>
 800508c:	2302      	movs	r3, #2
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e048      	b.n	8005124 <UART_SetConfig+0x348>
 8005092:	2304      	movs	r3, #4
 8005094:	77fb      	strb	r3, [r7, #31]
 8005096:	e045      	b.n	8005124 <UART_SetConfig+0x348>
 8005098:	2308      	movs	r3, #8
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e042      	b.n	8005124 <UART_SetConfig+0x348>
 800509e:	bf00      	nop
 80050a0:	efff69f3 	.word	0xefff69f3
 80050a4:	40011000 	.word	0x40011000
 80050a8:	40023800 	.word	0x40023800
 80050ac:	40004400 	.word	0x40004400
 80050b0:	40004800 	.word	0x40004800
 80050b4:	40004c00 	.word	0x40004c00
 80050b8:	40005000 	.word	0x40005000
 80050bc:	40011400 	.word	0x40011400
 80050c0:	40007800 	.word	0x40007800
 80050c4:	2310      	movs	r3, #16
 80050c6:	77fb      	strb	r3, [r7, #31]
 80050c8:	e02c      	b.n	8005124 <UART_SetConfig+0x348>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a72      	ldr	r2, [pc, #456]	; (8005298 <UART_SetConfig+0x4bc>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d125      	bne.n	8005120 <UART_SetConfig+0x344>
 80050d4:	4b71      	ldr	r3, [pc, #452]	; (800529c <UART_SetConfig+0x4c0>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050e2:	d017      	beq.n	8005114 <UART_SetConfig+0x338>
 80050e4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80050e8:	d817      	bhi.n	800511a <UART_SetConfig+0x33e>
 80050ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ee:	d00b      	beq.n	8005108 <UART_SetConfig+0x32c>
 80050f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050f4:	d811      	bhi.n	800511a <UART_SetConfig+0x33e>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <UART_SetConfig+0x326>
 80050fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050fe:	d006      	beq.n	800510e <UART_SetConfig+0x332>
 8005100:	e00b      	b.n	800511a <UART_SetConfig+0x33e>
 8005102:	2300      	movs	r3, #0
 8005104:	77fb      	strb	r3, [r7, #31]
 8005106:	e00d      	b.n	8005124 <UART_SetConfig+0x348>
 8005108:	2302      	movs	r3, #2
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e00a      	b.n	8005124 <UART_SetConfig+0x348>
 800510e:	2304      	movs	r3, #4
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e007      	b.n	8005124 <UART_SetConfig+0x348>
 8005114:	2308      	movs	r3, #8
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e004      	b.n	8005124 <UART_SetConfig+0x348>
 800511a:	2310      	movs	r3, #16
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e001      	b.n	8005124 <UART_SetConfig+0x348>
 8005120:	2310      	movs	r3, #16
 8005122:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	69db      	ldr	r3, [r3, #28]
 8005128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800512c:	d15b      	bne.n	80051e6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800512e:	7ffb      	ldrb	r3, [r7, #31]
 8005130:	2b08      	cmp	r3, #8
 8005132:	d828      	bhi.n	8005186 <UART_SetConfig+0x3aa>
 8005134:	a201      	add	r2, pc, #4	; (adr r2, 800513c <UART_SetConfig+0x360>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	08005161 	.word	0x08005161
 8005140:	08005169 	.word	0x08005169
 8005144:	08005171 	.word	0x08005171
 8005148:	08005187 	.word	0x08005187
 800514c:	08005177 	.word	0x08005177
 8005150:	08005187 	.word	0x08005187
 8005154:	08005187 	.word	0x08005187
 8005158:	08005187 	.word	0x08005187
 800515c:	0800517f 	.word	0x0800517f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005160:	f7fd fe34 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 8005164:	61b8      	str	r0, [r7, #24]
        break;
 8005166:	e013      	b.n	8005190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005168:	f7fd fe44 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 800516c:	61b8      	str	r0, [r7, #24]
        break;
 800516e:	e00f      	b.n	8005190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005170:	4b4b      	ldr	r3, [pc, #300]	; (80052a0 <UART_SetConfig+0x4c4>)
 8005172:	61bb      	str	r3, [r7, #24]
        break;
 8005174:	e00c      	b.n	8005190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005176:	f7fd fd17 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 800517a:	61b8      	str	r0, [r7, #24]
        break;
 800517c:	e008      	b.n	8005190 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005182:	61bb      	str	r3, [r7, #24]
        break;
 8005184:	e004      	b.n	8005190 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	77bb      	strb	r3, [r7, #30]
        break;
 800518e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d074      	beq.n	8005280 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	005a      	lsls	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	085b      	lsrs	r3, r3, #1
 80051a0:	441a      	add	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	d916      	bls.n	80051e0 <UART_SetConfig+0x404>
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051b8:	d212      	bcs.n	80051e0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	f023 030f 	bic.w	r3, r3, #15
 80051c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	085b      	lsrs	r3, r3, #1
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	89fb      	ldrh	r3, [r7, #14]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	89fa      	ldrh	r2, [r7, #14]
 80051dc:	60da      	str	r2, [r3, #12]
 80051de:	e04f      	b.n	8005280 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	77bb      	strb	r3, [r7, #30]
 80051e4:	e04c      	b.n	8005280 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051e6:	7ffb      	ldrb	r3, [r7, #31]
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d828      	bhi.n	800523e <UART_SetConfig+0x462>
 80051ec:	a201      	add	r2, pc, #4	; (adr r2, 80051f4 <UART_SetConfig+0x418>)
 80051ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f2:	bf00      	nop
 80051f4:	08005219 	.word	0x08005219
 80051f8:	08005221 	.word	0x08005221
 80051fc:	08005229 	.word	0x08005229
 8005200:	0800523f 	.word	0x0800523f
 8005204:	0800522f 	.word	0x0800522f
 8005208:	0800523f 	.word	0x0800523f
 800520c:	0800523f 	.word	0x0800523f
 8005210:	0800523f 	.word	0x0800523f
 8005214:	08005237 	.word	0x08005237
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005218:	f7fd fdd8 	bl	8002dcc <HAL_RCC_GetPCLK1Freq>
 800521c:	61b8      	str	r0, [r7, #24]
        break;
 800521e:	e013      	b.n	8005248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005220:	f7fd fde8 	bl	8002df4 <HAL_RCC_GetPCLK2Freq>
 8005224:	61b8      	str	r0, [r7, #24]
        break;
 8005226:	e00f      	b.n	8005248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005228:	4b1d      	ldr	r3, [pc, #116]	; (80052a0 <UART_SetConfig+0x4c4>)
 800522a:	61bb      	str	r3, [r7, #24]
        break;
 800522c:	e00c      	b.n	8005248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800522e:	f7fd fcbb 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8005232:	61b8      	str	r0, [r7, #24]
        break;
 8005234:	e008      	b.n	8005248 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523a:	61bb      	str	r3, [r7, #24]
        break;
 800523c:	e004      	b.n	8005248 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	77bb      	strb	r3, [r7, #30]
        break;
 8005246:	bf00      	nop
    }

    if (pclk != 0U)
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	085a      	lsrs	r2, r3, #1
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	441a      	add	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005260:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b0f      	cmp	r3, #15
 8005266:	d909      	bls.n	800527c <UART_SetConfig+0x4a0>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526e:	d205      	bcs.n	800527c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	e001      	b.n	8005280 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800528c:	7fbb      	ldrb	r3, [r7, #30]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3720      	adds	r7, #32
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40007c00 	.word	0x40007c00
 800529c:	40023800 	.word	0x40023800
 80052a0:	00f42400 	.word	0x00f42400

080052a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00a      	beq.n	80052ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00a      	beq.n	8005312 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	f003 0320 	and.w	r3, r3, #32
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00a      	beq.n	8005378 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	430a      	orrs	r2, r1
 8005376:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01a      	beq.n	80053ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a2:	d10a      	bne.n	80053ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053f8:	f7fb fff2 	bl	80013e0 <HAL_GetTick>
 80053fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b08      	cmp	r3, #8
 800540a:	d10e      	bne.n	800542a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800540c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f81b 	bl	8005456 <UART_WaitOnFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e011      	b.n	800544e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2220      	movs	r2, #32
 8005434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b09c      	sub	sp, #112	; 0x70
 800545a:	af00      	add	r7, sp, #0
 800545c:	60f8      	str	r0, [r7, #12]
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	4613      	mov	r3, r2
 8005464:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005466:	e0a7      	b.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800546a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546e:	f000 80a3 	beq.w	80055b8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005472:	f7fb ffb5 	bl	80013e0 <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <UART_WaitOnFlagUntilTimeout+0x32>
 8005482:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005484:	2b00      	cmp	r3, #0
 8005486:	d13f      	bne.n	8005508 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800548e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005490:	e853 3f00 	ldrex	r3, [r3]
 8005494:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005498:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800549c:	667b      	str	r3, [r7, #100]	; 0x64
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e6      	bne.n	8005488 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	f023 0301 	bic.w	r3, r3, #1
 80054d0:	663b      	str	r3, [r7, #96]	; 0x60
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3308      	adds	r3, #8
 80054d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80054da:	64ba      	str	r2, [r7, #72]	; 0x48
 80054dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80054e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e5      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2220      	movs	r2, #32
 80054f2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e068      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	d050      	beq.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005520:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005524:	d148      	bne.n	80055b8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800552e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800553e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005540:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005544:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554e:	637b      	str	r3, [r7, #52]	; 0x34
 8005550:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e6      	bne.n	8005530 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	613b      	str	r3, [r7, #16]
   return(result);
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	66bb      	str	r3, [r7, #104]	; 0x68
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005582:	623a      	str	r2, [r7, #32]
 8005584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	69f9      	ldr	r1, [r7, #28]
 8005588:	6a3a      	ldr	r2, [r7, #32]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e010      	b.n	80055da <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69da      	ldr	r2, [r3, #28]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4013      	ands	r3, r2
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	bf0c      	ite	eq
 80055c8:	2301      	moveq	r3, #1
 80055ca:	2300      	movne	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	79fb      	ldrb	r3, [r7, #7]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	f43f af48 	beq.w	8005468 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3770      	adds	r7, #112	; 0x70
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b095      	sub	sp, #84	; 0x54
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80055fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005608:	643b      	str	r3, [r7, #64]	; 0x40
 800560a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800560e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e6      	bne.n	80055ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	61fb      	str	r3, [r7, #28]
   return(result);
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f023 0301 	bic.w	r3, r3, #1
 8005632:	64bb      	str	r3, [r7, #72]	; 0x48
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3308      	adds	r3, #8
 800563a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800563c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005644:	e841 2300 	strex	r3, r2, [r1]
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1e5      	bne.n	800561c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	2b01      	cmp	r3, #1
 8005656:	d118      	bne.n	800568a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	60bb      	str	r3, [r7, #8]
   return(result);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f023 0310 	bic.w	r3, r3, #16
 800566c:	647b      	str	r3, [r7, #68]	; 0x44
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	461a      	mov	r2, r3
 8005674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567a:	6979      	ldr	r1, [r7, #20]
 800567c:	69ba      	ldr	r2, [r7, #24]
 800567e:	e841 2300 	strex	r3, r2, [r1]
 8005682:	613b      	str	r3, [r7, #16]
   return(result);
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1e6      	bne.n	8005658 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800569e:	bf00      	nop
 80056a0:	3754      	adds	r7, #84	; 0x54
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f7ff fb71 	bl	8004db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}

080056d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056d6:	b580      	push	{r7, lr}
 80056d8:	b088      	sub	sp, #32
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	e853 3f00 	ldrex	r3, [r3]
 80056ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f2:	61fb      	str	r3, [r7, #28]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6979      	ldr	r1, [r7, #20]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	e841 2300 	strex	r3, r2, [r1]
 8005708:	613b      	str	r3, [r7, #16]
   return(result);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1e6      	bne.n	80056de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff fb3d 	bl	8004d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005722:	bf00      	nop
 8005724:	3720      	adds	r7, #32
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800572c:	b084      	sub	sp, #16
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	f107 001c 	add.w	r0, r7, #28
 800573a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	2b01      	cmp	r3, #1
 8005742:	d120      	bne.n	8005786 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	4b20      	ldr	r3, [pc, #128]	; (80057d8 <USB_CoreInit+0xac>)
 8005756:	4013      	ands	r3, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d105      	bne.n	800577a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 fa96 	bl	8005cac <USB_CoreReset>
 8005780:	4603      	mov	r3, r0
 8005782:	73fb      	strb	r3, [r7, #15]
 8005784:	e010      	b.n	80057a8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 fa8a 	bl	8005cac <USB_CoreReset>
 8005798:	4603      	mov	r3, r0
 800579a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d10b      	bne.n	80057c6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f043 0206 	orr.w	r2, r3, #6
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f043 0220 	orr.w	r2, r3, #32
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3710      	adds	r7, #16
 80057cc:	46bd      	mov	sp, r7
 80057ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057d2:	b004      	add	sp, #16
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	ffbdffbf 	.word	0xffbdffbf

080057dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f023 0201 	bic.w	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b084      	sub	sp, #16
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
 8005806:	460b      	mov	r3, r1
 8005808:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800580a:	2300      	movs	r3, #0
 800580c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d115      	bne.n	800584c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800582c:	2001      	movs	r0, #1
 800582e:	f7fb fde3 	bl	80013f8 <HAL_Delay>
      ms++;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3301      	adds	r3, #1
 8005836:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 fa29 	bl	8005c90 <USB_GetMode>
 800583e:	4603      	mov	r3, r0
 8005840:	2b01      	cmp	r3, #1
 8005842:	d01e      	beq.n	8005882 <USB_SetCurrentMode+0x84>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b31      	cmp	r3, #49	; 0x31
 8005848:	d9f0      	bls.n	800582c <USB_SetCurrentMode+0x2e>
 800584a:	e01a      	b.n	8005882 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d115      	bne.n	800587e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800585e:	2001      	movs	r0, #1
 8005860:	f7fb fdca 	bl	80013f8 <HAL_Delay>
      ms++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fa10 	bl	8005c90 <USB_GetMode>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <USB_SetCurrentMode+0x84>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b31      	cmp	r3, #49	; 0x31
 800587a:	d9f0      	bls.n	800585e <USB_SetCurrentMode+0x60>
 800587c:	e001      	b.n	8005882 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e005      	b.n	800588e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b32      	cmp	r3, #50	; 0x32
 8005886:	d101      	bne.n	800588c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e000      	b.n	800588e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800588c:	2300      	movs	r3, #0
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005898:	b084      	sub	sp, #16
 800589a:	b580      	push	{r7, lr}
 800589c:	b086      	sub	sp, #24
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058b2:	2300      	movs	r3, #0
 80058b4:	613b      	str	r3, [r7, #16]
 80058b6:	e009      	b.n	80058cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	3340      	adds	r3, #64	; 0x40
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	4413      	add	r3, r2
 80058c2:	2200      	movs	r2, #0
 80058c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	3301      	adds	r3, #1
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b0e      	cmp	r3, #14
 80058d0:	d9f2      	bls.n	80058b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11c      	bne.n	8005912 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e6:	f043 0302 	orr.w	r3, r3, #2
 80058ea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e005      	b.n	800591e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005916:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005924:	461a      	mov	r2, r3
 8005926:	2300      	movs	r3, #0
 8005928:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	4619      	mov	r1, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005938:	461a      	mov	r2, r3
 800593a:	680b      	ldr	r3, [r1, #0]
 800593c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	2b01      	cmp	r3, #1
 8005942:	d10c      	bne.n	800595e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800594a:	2100      	movs	r1, #0
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f965 	bl	8005c1c <USB_SetDevSpeed>
 8005952:	e008      	b.n	8005966 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005954:	2101      	movs	r1, #1
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f960 	bl	8005c1c <USB_SetDevSpeed>
 800595c:	e003      	b.n	8005966 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800595e:	2103      	movs	r1, #3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f95b 	bl	8005c1c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005966:	2110      	movs	r1, #16
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f8f3 	bl	8005b54 <USB_FlushTxFifo>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d001      	beq.n	8005978 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f91f 	bl	8005bbc <USB_FlushRxFifo>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d001      	beq.n	8005988 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	461a      	mov	r2, r3
 8005990:	2300      	movs	r3, #0
 8005992:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599a:	461a      	mov	r2, r3
 800599c:	2300      	movs	r3, #0
 800599e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a6:	461a      	mov	r2, r3
 80059a8:	2300      	movs	r3, #0
 80059aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	e043      	b.n	8005a3a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c8:	d118      	bne.n	80059fc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10a      	bne.n	80059e6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059dc:	461a      	mov	r2, r3
 80059de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	e013      	b.n	8005a0e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f2:	461a      	mov	r2, r3
 80059f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e008      	b.n	8005a0e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	015a      	lsls	r2, r3, #5
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4413      	add	r3, r2
 8005a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3301      	adds	r3, #1
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d3b7      	bcc.n	80059b2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a42:	2300      	movs	r3, #0
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	e043      	b.n	8005ad0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a5e:	d118      	bne.n	8005a92 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a72:	461a      	mov	r2, r3
 8005a74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e013      	b.n	8005aa4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e008      	b.n	8005aa4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ac8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	3301      	adds	r3, #1
 8005ace:	613b      	str	r3, [r7, #16]
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	693a      	ldr	r2, [r7, #16]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d3b7      	bcc.n	8005a48 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	68fa      	ldr	r2, [r7, #12]
 8005ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ae6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005af8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d105      	bne.n	8005b0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	699b      	ldr	r3, [r3, #24]
 8005b04:	f043 0210 	orr.w	r2, r3, #16
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	4b0e      	ldr	r3, [pc, #56]	; (8005b4c <USB_DevInit+0x2b4>)
 8005b12:	4313      	orrs	r3, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	f043 0208 	orr.w	r2, r3, #8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d105      	bne.n	8005b3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	699a      	ldr	r2, [r3, #24]
 8005b34:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <USB_DevInit+0x2b8>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b48:	b004      	add	sp, #16
 8005b4a:	4770      	bx	lr
 8005b4c:	803c3800 	.word	0x803c3800
 8005b50:	40000004 	.word	0x40000004

08005b54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3301      	adds	r3, #1
 8005b66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <USB_FlushTxFifo+0x64>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d901      	bls.n	8005b74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e01b      	b.n	8005bac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	daf2      	bge.n	8005b62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	019b      	lsls	r3, r3, #6
 8005b84:	f043 0220 	orr.w	r2, r3, #32
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a08      	ldr	r2, [pc, #32]	; (8005bb8 <USB_FlushTxFifo+0x64>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e006      	b.n	8005bac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	f003 0320 	and.w	r3, r3, #32
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d0f0      	beq.n	8005b8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	00030d40 	.word	0x00030d40

08005bbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	3301      	adds	r3, #1
 8005bcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4a11      	ldr	r2, [pc, #68]	; (8005c18 <USB_FlushRxFifo+0x5c>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d901      	bls.n	8005bda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e018      	b.n	8005c0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	daf2      	bge.n	8005bc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2210      	movs	r2, #16
 8005bea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a08      	ldr	r2, [pc, #32]	; (8005c18 <USB_FlushRxFifo+0x5c>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d901      	bls.n	8005bfe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e006      	b.n	8005c0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0310 	and.w	r3, r3, #16
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d0f0      	beq.n	8005bec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	00030d40 	.word	0x00030d40

08005c1c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	460b      	mov	r3, r1
 8005c26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	68f9      	ldr	r1, [r7, #12]
 8005c38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b085      	sub	sp, #20
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c68:	f023 0303 	bic.w	r3, r3, #3
 8005c6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c7c:	f043 0302 	orr.w	r3, r3, #2
 8005c80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b085      	sub	sp, #20
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4a13      	ldr	r2, [pc, #76]	; (8005d10 <USB_CoreReset+0x64>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d901      	bls.n	8005cca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e01b      	b.n	8005d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	daf2      	bge.n	8005cb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f043 0201 	orr.w	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <USB_CoreReset+0x64>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d901      	bls.n	8005cf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cf0:	2303      	movs	r3, #3
 8005cf2:	e006      	b.n	8005d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d0f0      	beq.n	8005ce2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	00030d40 	.word	0x00030d40

08005d14 <memset>:
 8005d14:	4402      	add	r2, r0
 8005d16:	4603      	mov	r3, r0
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d100      	bne.n	8005d1e <memset+0xa>
 8005d1c:	4770      	bx	lr
 8005d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d22:	e7f9      	b.n	8005d18 <memset+0x4>

08005d24 <__libc_init_array>:
 8005d24:	b570      	push	{r4, r5, r6, lr}
 8005d26:	4d0d      	ldr	r5, [pc, #52]	; (8005d5c <__libc_init_array+0x38>)
 8005d28:	4c0d      	ldr	r4, [pc, #52]	; (8005d60 <__libc_init_array+0x3c>)
 8005d2a:	1b64      	subs	r4, r4, r5
 8005d2c:	10a4      	asrs	r4, r4, #2
 8005d2e:	2600      	movs	r6, #0
 8005d30:	42a6      	cmp	r6, r4
 8005d32:	d109      	bne.n	8005d48 <__libc_init_array+0x24>
 8005d34:	4d0b      	ldr	r5, [pc, #44]	; (8005d64 <__libc_init_array+0x40>)
 8005d36:	4c0c      	ldr	r4, [pc, #48]	; (8005d68 <__libc_init_array+0x44>)
 8005d38:	f000 f818 	bl	8005d6c <_init>
 8005d3c:	1b64      	subs	r4, r4, r5
 8005d3e:	10a4      	asrs	r4, r4, #2
 8005d40:	2600      	movs	r6, #0
 8005d42:	42a6      	cmp	r6, r4
 8005d44:	d105      	bne.n	8005d52 <__libc_init_array+0x2e>
 8005d46:	bd70      	pop	{r4, r5, r6, pc}
 8005d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d4c:	4798      	blx	r3
 8005d4e:	3601      	adds	r6, #1
 8005d50:	e7ee      	b.n	8005d30 <__libc_init_array+0xc>
 8005d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d56:	4798      	blx	r3
 8005d58:	3601      	adds	r6, #1
 8005d5a:	e7f2      	b.n	8005d42 <__libc_init_array+0x1e>
 8005d5c:	08005da8 	.word	0x08005da8
 8005d60:	08005da8 	.word	0x08005da8
 8005d64:	08005da8 	.word	0x08005da8
 8005d68:	08005dac 	.word	0x08005dac

08005d6c <_init>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr

08005d78 <_fini>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	bf00      	nop
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr
