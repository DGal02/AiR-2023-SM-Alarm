
LabyMikroprocki.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004514  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f8  080046f8  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  080046f8  080046f8  000146f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004700  08004700  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08004708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000050  08004758  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004758  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108d3  00000000  00000000  000200c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e7  00000000  00000000  00030996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd8  00000000  00000000  00032d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac9  00000000  00000000  00033b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026350  00000000  00000000  00034621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001209c  00000000  00000000  0005a971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000efc48  00000000  00000000  0006ca0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003908  00000000  00000000  0015c658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0015ff60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000050 	.word	0x20000050
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080046c4 	.word	0x080046c4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000054 	.word	0x20000054
 8000204:	080046c4 	.word	0x080046c4

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08c      	sub	sp, #48	; 0x30
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4bb7      	ldr	r3, [pc, #732]	; (8000808 <MX_GPIO_Init+0x2f4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4ab6      	ldr	r2, [pc, #728]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4bb4      	ldr	r3, [pc, #720]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	61bb      	str	r3, [r7, #24]
 8000540:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4bb1      	ldr	r3, [pc, #708]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4ab0      	ldr	r2, [pc, #704]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4bae      	ldr	r3, [pc, #696]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0320 	and.w	r3, r3, #32
 8000556:	617b      	str	r3, [r7, #20]
 8000558:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055a:	4bab      	ldr	r3, [pc, #684]	; (8000808 <MX_GPIO_Init+0x2f4>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	4aaa      	ldr	r2, [pc, #680]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000564:	6313      	str	r3, [r2, #48]	; 0x30
 8000566:	4ba8      	ldr	r3, [pc, #672]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000572:	4ba5      	ldr	r3, [pc, #660]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4aa4      	ldr	r2, [pc, #656]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4ba2      	ldr	r3, [pc, #648]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	60fb      	str	r3, [r7, #12]
 8000588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058a:	4b9f      	ldr	r3, [pc, #636]	; (8000808 <MX_GPIO_Init+0x2f4>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a9e      	ldr	r2, [pc, #632]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000590:	f043 0302 	orr.w	r3, r3, #2
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b9c      	ldr	r3, [pc, #624]	; (8000808 <MX_GPIO_Init+0x2f4>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0302 	and.w	r3, r3, #2
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a2:	4b99      	ldr	r3, [pc, #612]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a98      	ldr	r2, [pc, #608]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b96      	ldr	r3, [pc, #600]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0308 	and.w	r3, r3, #8
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ba:	4b93      	ldr	r3, [pc, #588]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a92      	ldr	r2, [pc, #584]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b90      	ldr	r3, [pc, #576]	; (8000808 <MX_GPIO_Init+0x2f4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	488d      	ldr	r0, [pc, #564]	; (800080c <MX_GPIO_Init+0x2f8>)
 80005d8:	f001 f9ea 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2120      	movs	r1, #32
 80005e0:	488a      	ldr	r0, [pc, #552]	; (800080c <MX_GPIO_Init+0x2f8>)
 80005e2:	f001 f9e5 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Row2_Pin|Row3_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2109      	movs	r1, #9
 80005ea:	4889      	ldr	r0, [pc, #548]	; (8000810 <MX_GPIO_Init+0x2fc>)
 80005ec:	f001 f9e0 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2108      	movs	r1, #8
 80005f4:	4887      	ldr	r0, [pc, #540]	; (8000814 <MX_GPIO_Init+0x300>)
 80005f6:	f001 f9db 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000600:	4885      	ldr	r0, [pc, #532]	; (8000818 <MX_GPIO_Init+0x304>)
 8000602:	f001 f9d5 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2140      	movs	r1, #64	; 0x40
 800060a:	4884      	ldr	r0, [pc, #528]	; (800081c <MX_GPIO_Init+0x308>)
 800060c:	f001 f9d0 	bl	80019b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000614:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000616:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800061a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 031c 	add.w	r3, r7, #28
 8000624:	4619      	mov	r1, r3
 8000626:	487a      	ldr	r0, [pc, #488]	; (8000810 <MX_GPIO_Init+0x2fc>)
 8000628:	f000 fffe 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Row4_Pin|Buzzer_Pin;
 800062c:	2328      	movs	r3, #40	; 0x28
 800062e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4619      	mov	r1, r3
 8000642:	4872      	ldr	r0, [pc, #456]	; (800080c <MX_GPIO_Init+0x2f8>)
 8000644:	f000 fff0 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Guzik_Pin;
 8000648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800064e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000652:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Guzik_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	486b      	ldr	r0, [pc, #428]	; (800080c <MX_GPIO_Init+0x2f8>)
 8000660:	f000 ffe2 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Row2_Pin|Row3_Pin;
 8000664:	2309      	movs	r3, #9
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4865      	ldr	r0, [pc, #404]	; (8000810 <MX_GPIO_Init+0x2fc>)
 800067c:	f000 ffd4 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000680:	2332      	movs	r3, #50	; 0x32
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800068c:	2303      	movs	r3, #3
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000690:	230b      	movs	r3, #11
 8000692:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000694:	f107 031c 	add.w	r3, r7, #28
 8000698:	4619      	mov	r1, r3
 800069a:	485d      	ldr	r0, [pc, #372]	; (8000810 <MX_GPIO_Init+0x2fc>)
 800069c:	f000 ffc4 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006a0:	2386      	movs	r3, #134	; 0x86
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ac:	2303      	movs	r3, #3
 80006ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006b0:	230b      	movs	r3, #11
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	4619      	mov	r1, r3
 80006ba:	4856      	ldr	r0, [pc, #344]	; (8000814 <MX_GPIO_Init+0x300>)
 80006bc:	f000 ffb4 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Row1_Pin;
 80006c0:	2308      	movs	r3, #8
 80006c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Row1_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	4619      	mov	r1, r3
 80006d6:	484f      	ldr	r0, [pc, #316]	; (8000814 <MX_GPIO_Init+0x300>)
 80006d8:	f000 ffa6 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006dc:	f244 0381 	movw	r3, #16513	; 0x4081
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e2:	2301      	movs	r3, #1
 80006e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	4619      	mov	r1, r3
 80006f4:	4848      	ldr	r0, [pc, #288]	; (8000818 <MX_GPIO_Init+0x304>)
 80006f6:	f000 ff97 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80006fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000700:	2302      	movs	r3, #2
 8000702:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000708:	2303      	movs	r3, #3
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800070c:	230b      	movs	r3, #11
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4840      	ldr	r0, [pc, #256]	; (8000818 <MX_GPIO_Init+0x304>)
 8000718:	f000 ff86 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800071c:	2340      	movs	r3, #64	; 0x40
 800071e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 031c 	add.w	r3, r7, #28
 8000730:	4619      	mov	r1, r3
 8000732:	483a      	ldr	r0, [pc, #232]	; (800081c <MX_GPIO_Init+0x308>)
 8000734:	f000 ff78 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4834      	ldr	r0, [pc, #208]	; (800081c <MX_GPIO_Init+0x308>)
 800074c:	f000 ff6c 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000750:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000762:	230a      	movs	r3, #10
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4829      	ldr	r0, [pc, #164]	; (8000814 <MX_GPIO_Init+0x300>)
 800076e:	f000 ff5b 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000772:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	4823      	ldr	r0, [pc, #140]	; (8000814 <MX_GPIO_Init+0x300>)
 8000788:	f000 ff4e 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = moveSensor_Pin;
 800078c:	2310      	movs	r3, #16
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(moveSensor_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	481f      	ldr	r0, [pc, #124]	; (8000820 <MX_GPIO_Init+0x30c>)
 80007a2:	f000 ff41 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Col3_Pin|Col2_Pin|Col1_Pin;
 80007a6:	23e0      	movs	r3, #224	; 0xe0
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4819      	ldr	r0, [pc, #100]	; (8000820 <MX_GPIO_Init+0x30c>)
 80007ba:	f000 ff35 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	2303      	movs	r3, #3
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d0:	230b      	movs	r3, #11
 80007d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007d4:	f107 031c 	add.w	r3, r7, #28
 80007d8:	4619      	mov	r1, r3
 80007da:	4810      	ldr	r0, [pc, #64]	; (800081c <MX_GPIO_Init+0x308>)
 80007dc:	f000 ff24 	bl	8001628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	200a      	movs	r0, #10
 80007e6:	f000 fe56 	bl	8001496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f000 fe6f 	bl	80014ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2028      	movs	r0, #40	; 0x28
 80007f6:	f000 fe4e 	bl	8001496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fa:	2028      	movs	r0, #40	; 0x28
 80007fc:	f000 fe67 	bl	80014ce <HAL_NVIC_EnableIRQ>

}
 8000800:	bf00      	nop
 8000802:	3730      	adds	r7, #48	; 0x30
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40021400 	.word	0x40021400
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400
 800081c:	40021800 	.word	0x40021800
 8000820:	40020c00 	.word	0x40020c00

08000824 <HAL_GPIO_EXTI_Callback>:
uint8_t firstTrigger = 0;

void activateBuzzer(void);
void deactivateBuzzer(void);

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == moveSensor_Pin) {
 800082e:	88fb      	ldrh	r3, [r7, #6]
 8000830:	2b10      	cmp	r3, #16
 8000832:	d110      	bne.n	8000856 <HAL_GPIO_EXTI_Callback+0x32>
		HAL_UART_Transmit(&huart3, (uint8_t*) moveDetectedMessage,
				strlen(moveDetectedMessage), 1000);
 8000834:	480a      	ldr	r0, [pc, #40]	; (8000860 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000836:	f7ff fce7 	bl	8000208 <strlen>
 800083a:	4603      	mov	r3, r0
		HAL_UART_Transmit(&huart3, (uint8_t*) moveDetectedMessage,
 800083c:	b29a      	uxth	r2, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	4907      	ldr	r1, [pc, #28]	; (8000860 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <HAL_GPIO_EXTI_Callback+0x40>)
 8000846:	f002 fef3 	bl	8003630 <HAL_UART_Transmit>
		if (phase == 2) {
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <HAL_GPIO_EXTI_Callback+0x44>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d101      	bne.n	8000856 <HAL_GPIO_EXTI_Callback+0x32>
			activateBuzzer();
 8000852:	f000 f84b 	bl	80008ec <activateBuzzer>
		}
	}
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000000 	.word	0x20000000
 8000864:	200000cc 	.word	0x200000cc
 8000868:	2000007d 	.word	0x2000007d

0800086c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a17      	ldr	r2, [pc, #92]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d127      	bne.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x60>
		if (firstTrigger == 0) {
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d106      	bne.n	8000892 <HAL_TIM_PeriodElapsedCallback+0x26>
			firstTrigger++;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	b2da      	uxtb	r2, r3
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800088e:	701a      	strb	r2, [r3, #0]
			return;
 8000890:	e01c      	b.n	80008cc <HAL_TIM_PeriodElapsedCallback+0x60>
		}
		HAL_UART_Transmit(&huart3, (uint8_t*) activatedBuzzerMessage, strlen(activatedBuzzerMessage),
 8000892:	4812      	ldr	r0, [pc, #72]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000894:	f7ff fcb8 	bl	8000208 <strlen>
 8000898:	4603      	mov	r3, r0
 800089a:	b29a      	uxth	r2, r3
 800089c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a0:	490e      	ldr	r1, [pc, #56]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008a2:	480f      	ldr	r0, [pc, #60]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80008a4:	f002 fec4 	bl	8003630 <HAL_UART_Transmit>
				1000);
		if (HAL_GPIO_ReadPin(moveSensor_GPIO_Port, moveSensor_Pin) == 1) {
 80008a8:	2110      	movs	r1, #16
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80008ac:	f001 f868 	bl	8001980 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x4e>
			activateBuzzer();
 80008b6:	f000 f819 	bl	80008ec <activateBuzzer>
		}
		firstTrigger = 0;
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	701a      	strb	r2, [r3, #0]
		phase = 2;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80008c2:	2202      	movs	r2, #2
 80008c4:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim2);
 80008c6:	4803      	ldr	r0, [pc, #12]	; (80008d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80008c8:	f002 fa3e 	bl	8002d48 <HAL_TIM_Base_Stop_IT>
	}
}
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000080 	.word	0x20000080
 80008d8:	2000007e 	.word	0x2000007e
 80008dc:	20000028 	.word	0x20000028
 80008e0:	200000cc 	.word	0x200000cc
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	2000007d 	.word	0x2000007d

080008ec <activateBuzzer>:

void activateBuzzer(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2120      	movs	r1, #32
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <activateBuzzer+0x14>)
 80008f6:	f001 f85b 	bl	80019b0 <HAL_GPIO_WritePin>
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40021400 	.word	0x40021400

08000904 <deactivateBuzzer>:

void deactivateBuzzer(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	2120      	movs	r1, #32
 800090c:	4802      	ldr	r0, [pc, #8]	; (8000918 <deactivateBuzzer+0x14>)
 800090e:	f001 f84f 	bl	80019b0 <HAL_GPIO_WritePin>
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021400 	.word	0x40021400

0800091c <readKeypad>:

char readKeypad(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
	/* Make ROW 1 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_RESET); //Pull the R1 low
 8000920:	2200      	movs	r2, #0
 8000922:	2108      	movs	r1, #8
 8000924:	488d      	ldr	r0, [pc, #564]	; (8000b5c <readKeypad+0x240>)
 8000926:	f001 f843 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET); // Pull the R2 High
 800092a:	2201      	movs	r2, #1
 800092c:	2101      	movs	r1, #1
 800092e:	488c      	ldr	r0, [pc, #560]	; (8000b60 <readKeypad+0x244>)
 8000930:	f001 f83e 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET); // Pull the R3 High
 8000934:	2201      	movs	r2, #1
 8000936:	2108      	movs	r1, #8
 8000938:	4889      	ldr	r0, [pc, #548]	; (8000b60 <readKeypad+0x244>)
 800093a:	f001 f839 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET); // Pull the R4 High
 800093e:	2201      	movs	r2, #1
 8000940:	2108      	movs	r1, #8
 8000942:	4888      	ldr	r0, [pc, #544]	; (8000b64 <readKeypad+0x248>)
 8000944:	f001 f834 	bl	80019b0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000948:	2180      	movs	r1, #128	; 0x80
 800094a:	4887      	ldr	r0, [pc, #540]	; (8000b68 <readKeypad+0x24c>)
 800094c:	f001 f818 	bl	8001980 <HAL_GPIO_ReadPin>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d109      	bne.n	800096a <readKeypad+0x4e>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 8000956:	bf00      	nop
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	4883      	ldr	r0, [pc, #524]	; (8000b68 <readKeypad+0x24c>)
 800095c:	f001 f810 	bl	8001980 <HAL_GPIO_ReadPin>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d0f8      	beq.n	8000958 <readKeypad+0x3c>
			;   // wait till the button is pressed
		return '1';
 8000966:	2331      	movs	r3, #49	; 0x31
 8000968:	e0f6      	b.n	8000b58 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	487e      	ldr	r0, [pc, #504]	; (8000b68 <readKeypad+0x24c>)
 800096e:	f001 f807 	bl	8001980 <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d109      	bne.n	800098c <readKeypad+0x70>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000978:	bf00      	nop
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	487a      	ldr	r0, [pc, #488]	; (8000b68 <readKeypad+0x24c>)
 800097e:	f000 ffff 	bl	8001980 <HAL_GPIO_ReadPin>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d0f8      	beq.n	800097a <readKeypad+0x5e>
			;   // wait till the button is pressed
		return '2';
 8000988:	2332      	movs	r3, #50	; 0x32
 800098a:	e0e5      	b.n	8000b58 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 800098c:	2120      	movs	r1, #32
 800098e:	4876      	ldr	r0, [pc, #472]	; (8000b68 <readKeypad+0x24c>)
 8000990:	f000 fff6 	bl	8001980 <HAL_GPIO_ReadPin>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d109      	bne.n	80009ae <readKeypad+0x92>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 800099a:	bf00      	nop
 800099c:	2120      	movs	r1, #32
 800099e:	4872      	ldr	r0, [pc, #456]	; (8000b68 <readKeypad+0x24c>)
 80009a0:	f000 ffee 	bl	8001980 <HAL_GPIO_ReadPin>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0f8      	beq.n	800099c <readKeypad+0x80>
			;   // wait till the button is pressed
		return '3';
 80009aa:	2333      	movs	r3, #51	; 0x33
 80009ac:	e0d4      	b.n	8000b58 <readKeypad+0x23c>
	}

	/* Make ROW 2 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET); //Pull the R1 low
 80009ae:	2201      	movs	r2, #1
 80009b0:	2108      	movs	r1, #8
 80009b2:	486a      	ldr	r0, [pc, #424]	; (8000b5c <readKeypad+0x240>)
 80009b4:	f000 fffc 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_RESET); // Pull the R2 High
 80009b8:	2200      	movs	r2, #0
 80009ba:	2101      	movs	r1, #1
 80009bc:	4868      	ldr	r0, [pc, #416]	; (8000b60 <readKeypad+0x244>)
 80009be:	f000 fff7 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET); // Pull the R3 High
 80009c2:	2201      	movs	r2, #1
 80009c4:	2108      	movs	r1, #8
 80009c6:	4866      	ldr	r0, [pc, #408]	; (8000b60 <readKeypad+0x244>)
 80009c8:	f000 fff2 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET); // Pull the R4 High
 80009cc:	2201      	movs	r2, #1
 80009ce:	2108      	movs	r1, #8
 80009d0:	4864      	ldr	r0, [pc, #400]	; (8000b64 <readKeypad+0x248>)
 80009d2:	f000 ffed 	bl	80019b0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	4863      	ldr	r0, [pc, #396]	; (8000b68 <readKeypad+0x24c>)
 80009da:	f000 ffd1 	bl	8001980 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d109      	bne.n	80009f8 <readKeypad+0xdc>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 80009e4:	bf00      	nop
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	485f      	ldr	r0, [pc, #380]	; (8000b68 <readKeypad+0x24c>)
 80009ea:	f000 ffc9 	bl	8001980 <HAL_GPIO_ReadPin>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f8      	beq.n	80009e6 <readKeypad+0xca>
			;   // wait till the button is pressed
		return '4';
 80009f4:	2334      	movs	r3, #52	; 0x34
 80009f6:	e0af      	b.n	8000b58 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 80009f8:	2140      	movs	r1, #64	; 0x40
 80009fa:	485b      	ldr	r0, [pc, #364]	; (8000b68 <readKeypad+0x24c>)
 80009fc:	f000 ffc0 	bl	8001980 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d109      	bne.n	8000a1a <readKeypad+0xfe>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000a06:	bf00      	nop
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	4857      	ldr	r0, [pc, #348]	; (8000b68 <readKeypad+0x24c>)
 8000a0c:	f000 ffb8 	bl	8001980 <HAL_GPIO_ReadPin>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d0f8      	beq.n	8000a08 <readKeypad+0xec>
			;   // wait till the button is pressed
		return '5';
 8000a16:	2335      	movs	r3, #53	; 0x35
 8000a18:	e09e      	b.n	8000b58 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	4852      	ldr	r0, [pc, #328]	; (8000b68 <readKeypad+0x24c>)
 8000a1e:	f000 ffaf 	bl	8001980 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d109      	bne.n	8000a3c <readKeypad+0x120>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 8000a28:	bf00      	nop
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	484e      	ldr	r0, [pc, #312]	; (8000b68 <readKeypad+0x24c>)
 8000a2e:	f000 ffa7 	bl	8001980 <HAL_GPIO_ReadPin>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d0f8      	beq.n	8000a2a <readKeypad+0x10e>
			;   // wait till the button is pressed
		return '6';
 8000a38:	2336      	movs	r3, #54	; 0x36
 8000a3a:	e08d      	b.n	8000b58 <readKeypad+0x23c>
	}

	/* Make ROW 3 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET); //Pull the R1 low
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2108      	movs	r1, #8
 8000a40:	4846      	ldr	r0, [pc, #280]	; (8000b5c <readKeypad+0x240>)
 8000a42:	f000 ffb5 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000a46:	2201      	movs	r2, #1
 8000a48:	2101      	movs	r1, #1
 8000a4a:	4845      	ldr	r0, [pc, #276]	; (8000b60 <readKeypad+0x244>)
 8000a4c:	f000 ffb0 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_RESET); // Pull the R3 High
 8000a50:	2200      	movs	r2, #0
 8000a52:	2108      	movs	r1, #8
 8000a54:	4842      	ldr	r0, [pc, #264]	; (8000b60 <readKeypad+0x244>)
 8000a56:	f000 ffab 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_SET); // Pull the R4 High
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	4841      	ldr	r0, [pc, #260]	; (8000b64 <readKeypad+0x248>)
 8000a60:	f000 ffa6 	bl	80019b0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	4840      	ldr	r0, [pc, #256]	; (8000b68 <readKeypad+0x24c>)
 8000a68:	f000 ff8a 	bl	8001980 <HAL_GPIO_ReadPin>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d109      	bne.n	8000a86 <readKeypad+0x16a>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 8000a72:	bf00      	nop
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	483c      	ldr	r0, [pc, #240]	; (8000b68 <readKeypad+0x24c>)
 8000a78:	f000 ff82 	bl	8001980 <HAL_GPIO_ReadPin>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f8      	beq.n	8000a74 <readKeypad+0x158>
			;   // wait till the button is pressed
		return '7';
 8000a82:	2337      	movs	r3, #55	; 0x37
 8000a84:	e068      	b.n	8000b58 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000a86:	2140      	movs	r1, #64	; 0x40
 8000a88:	4837      	ldr	r0, [pc, #220]	; (8000b68 <readKeypad+0x24c>)
 8000a8a:	f000 ff79 	bl	8001980 <HAL_GPIO_ReadPin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d109      	bne.n	8000aa8 <readKeypad+0x18c>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000a94:	bf00      	nop
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	4833      	ldr	r0, [pc, #204]	; (8000b68 <readKeypad+0x24c>)
 8000a9a:	f000 ff71 	bl	8001980 <HAL_GPIO_ReadPin>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0f8      	beq.n	8000a96 <readKeypad+0x17a>
			;   // wait till the button is pressed
		return '8';
 8000aa4:	2338      	movs	r3, #56	; 0x38
 8000aa6:	e057      	b.n	8000b58 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	482f      	ldr	r0, [pc, #188]	; (8000b68 <readKeypad+0x24c>)
 8000aac:	f000 ff68 	bl	8001980 <HAL_GPIO_ReadPin>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d109      	bne.n	8000aca <readKeypad+0x1ae>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 8000ab6:	bf00      	nop
 8000ab8:	2120      	movs	r1, #32
 8000aba:	482b      	ldr	r0, [pc, #172]	; (8000b68 <readKeypad+0x24c>)
 8000abc:	f000 ff60 	bl	8001980 <HAL_GPIO_ReadPin>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f8      	beq.n	8000ab8 <readKeypad+0x19c>
			;   // wait till the button is pressed
		return '9';
 8000ac6:	2339      	movs	r3, #57	; 0x39
 8000ac8:	e046      	b.n	8000b58 <readKeypad+0x23c>
	}

	/* Make ROW 4 LOW and all other ROWs HIGH */
	HAL_GPIO_WritePin(Row1_GPIO_Port, Row1_Pin, GPIO_PIN_SET); //Pull the R1 low
 8000aca:	2201      	movs	r2, #1
 8000acc:	2108      	movs	r1, #8
 8000ace:	4823      	ldr	r0, [pc, #140]	; (8000b5c <readKeypad+0x240>)
 8000ad0:	f000 ff6e 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row2_GPIO_Port, Row2_Pin, GPIO_PIN_SET); // Pull the R2 High
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	2101      	movs	r1, #1
 8000ad8:	4821      	ldr	r0, [pc, #132]	; (8000b60 <readKeypad+0x244>)
 8000ada:	f000 ff69 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row3_GPIO_Port, Row3_Pin, GPIO_PIN_SET); // Pull the R3 High
 8000ade:	2201      	movs	r2, #1
 8000ae0:	2108      	movs	r1, #8
 8000ae2:	481f      	ldr	r0, [pc, #124]	; (8000b60 <readKeypad+0x244>)
 8000ae4:	f000 ff64 	bl	80019b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Row4_GPIO_Port, Row4_Pin, GPIO_PIN_RESET); // Pull the R4 High
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2108      	movs	r1, #8
 8000aec:	481d      	ldr	r0, [pc, #116]	; (8000b64 <readKeypad+0x248>)
 8000aee:	f000 ff5f 	bl	80019b0 <HAL_GPIO_WritePin>

	if (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))   // if the Col 1 is low
 8000af2:	2180      	movs	r1, #128	; 0x80
 8000af4:	481c      	ldr	r0, [pc, #112]	; (8000b68 <readKeypad+0x24c>)
 8000af6:	f000 ff43 	bl	8001980 <HAL_GPIO_ReadPin>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d109      	bne.n	8000b14 <readKeypad+0x1f8>
	{
		while (!(HAL_GPIO_ReadPin(Col1_GPIO_Port, Col1_Pin)))
 8000b00:	bf00      	nop
 8000b02:	2180      	movs	r1, #128	; 0x80
 8000b04:	4818      	ldr	r0, [pc, #96]	; (8000b68 <readKeypad+0x24c>)
 8000b06:	f000 ff3b 	bl	8001980 <HAL_GPIO_ReadPin>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f8      	beq.n	8000b02 <readKeypad+0x1e6>
			;   // wait till the button is pressed
		return '*';
 8000b10:	232a      	movs	r3, #42	; 0x2a
 8000b12:	e021      	b.n	8000b58 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))   // if the Col 2 is low
 8000b14:	2140      	movs	r1, #64	; 0x40
 8000b16:	4814      	ldr	r0, [pc, #80]	; (8000b68 <readKeypad+0x24c>)
 8000b18:	f000 ff32 	bl	8001980 <HAL_GPIO_ReadPin>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d109      	bne.n	8000b36 <readKeypad+0x21a>
	{
		while (!(HAL_GPIO_ReadPin(Col2_GPIO_Port, Col2_Pin)))
 8000b22:	bf00      	nop
 8000b24:	2140      	movs	r1, #64	; 0x40
 8000b26:	4810      	ldr	r0, [pc, #64]	; (8000b68 <readKeypad+0x24c>)
 8000b28:	f000 ff2a 	bl	8001980 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d0f8      	beq.n	8000b24 <readKeypad+0x208>
			;   // wait till the button is pressed
		return '0';
 8000b32:	2330      	movs	r3, #48	; 0x30
 8000b34:	e010      	b.n	8000b58 <readKeypad+0x23c>
	}

	if (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))   // if the Col 3 is low
 8000b36:	2120      	movs	r1, #32
 8000b38:	480b      	ldr	r0, [pc, #44]	; (8000b68 <readKeypad+0x24c>)
 8000b3a:	f000 ff21 	bl	8001980 <HAL_GPIO_ReadPin>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d109      	bne.n	8000b58 <readKeypad+0x23c>
	{
		while (!(HAL_GPIO_ReadPin(Col3_GPIO_Port, Col3_Pin)))
 8000b44:	bf00      	nop
 8000b46:	2120      	movs	r1, #32
 8000b48:	4807      	ldr	r0, [pc, #28]	; (8000b68 <readKeypad+0x24c>)
 8000b4a:	f000 ff19 	bl	8001980 <HAL_GPIO_ReadPin>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d0f8      	beq.n	8000b46 <readKeypad+0x22a>
			;   // wait till the button is pressed
		return '#';
 8000b54:	2323      	movs	r3, #35	; 0x23
 8000b56:	e7ff      	b.n	8000b58 <readKeypad+0x23c>
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40021400 	.word	0x40021400
 8000b68:	40020c00 	.word	0x40020c00

08000b6c <handleBadPin>:

void handleBadPin(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart3, (uint8_t*) badPinMessage, strlen(badPinMessage),
 8000b70:	480a      	ldr	r0, [pc, #40]	; (8000b9c <handleBadPin+0x30>)
 8000b72:	f7ff fb49 	bl	8000208 <strlen>
 8000b76:	4603      	mov	r3, r0
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	4907      	ldr	r1, [pc, #28]	; (8000b9c <handleBadPin+0x30>)
 8000b80:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <handleBadPin+0x34>)
 8000b82:	f002 fd55 	bl	8003630 <HAL_UART_Transmit>
			1000);
	memset(&codeUser[0], '\0', 4);
 8000b86:	2204      	movs	r2, #4
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <handleBadPin+0x38>)
 8000b8c:	f003 fd6d 	bl	800466a <memset>
	codeUserIndex = 0;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <handleBadPin+0x3c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000010 	.word	0x20000010
 8000ba0:	200000cc 	.word	0x200000cc
 8000ba4:	20000078 	.word	0x20000078
 8000ba8:	2000007c 	.word	0x2000007c

08000bac <handleGoodPin>:

void handleGoodPin(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
	deactivateBuzzer();
 8000bb0:	f7ff fea8 	bl	8000904 <deactivateBuzzer>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000bb4:	4812      	ldr	r0, [pc, #72]	; (8000c00 <handleGoodPin+0x54>)
 8000bb6:	f002 f8c7 	bl	8002d48 <HAL_TIM_Base_Stop_IT>
	HAL_UART_Transmit(&huart3, (uint8_t*) goodPinMessage,
			strlen(goodPinMessage), 1000);
 8000bba:	4812      	ldr	r0, [pc, #72]	; (8000c04 <handleGoodPin+0x58>)
 8000bbc:	f7ff fb24 	bl	8000208 <strlen>
 8000bc0:	4603      	mov	r3, r0
	HAL_UART_Transmit(&huart3, (uint8_t*) goodPinMessage,
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc8:	490e      	ldr	r1, [pc, #56]	; (8000c04 <handleGoodPin+0x58>)
 8000bca:	480f      	ldr	r0, [pc, #60]	; (8000c08 <handleGoodPin+0x5c>)
 8000bcc:	f002 fd30 	bl	8003630 <HAL_UART_Transmit>
	memset(&codeSet[0], '\0', 4);
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	480d      	ldr	r0, [pc, #52]	; (8000c0c <handleGoodPin+0x60>)
 8000bd6:	f003 fd48 	bl	800466a <memset>
	memset(&codeUser[0], '\0', 4);
 8000bda:	2204      	movs	r2, #4
 8000bdc:	2100      	movs	r1, #0
 8000bde:	480c      	ldr	r0, [pc, #48]	; (8000c10 <handleGoodPin+0x64>)
 8000be0:	f003 fd43 	bl	800466a <memset>
	codeSetIndex = 0;
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <handleGoodPin+0x68>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
	codeUserIndex = 0;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <handleGoodPin+0x6c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	701a      	strb	r2, [r3, #0]
	phase = 0;
 8000bf0:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <handleGoodPin+0x70>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
	firstTrigger = 0;
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <handleGoodPin+0x74>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000080 	.word	0x20000080
 8000c04:	2000001c 	.word	0x2000001c
 8000c08:	200000cc 	.word	0x200000cc
 8000c0c:	20000070 	.word	0x20000070
 8000c10:	20000078 	.word	0x20000078
 8000c14:	20000074 	.word	0x20000074
 8000c18:	2000007c 	.word	0x2000007c
 8000c1c:	2000007d 	.word	0x2000007d
 8000c20:	2000007e 	.word	0x2000007e

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c28:	f000 fad9 	bl	80011de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2c:	f000 f8a0 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c30:	f7ff fc70 	bl	8000514 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c34:	f000 fa12 	bl	800105c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000c38:	f000 f99c 	bl	8000f74 <MX_TIM2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (phase == 0) {
 8000c3c:	4b43      	ldr	r3, [pc, #268]	; (8000d4c <main+0x128>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d131      	bne.n	8000ca8 <main+0x84>
			keyboard = readKeypad();
 8000c44:	f7ff fe6a 	bl	800091c <readKeypad>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	4b40      	ldr	r3, [pc, #256]	; (8000d50 <main+0x12c>)
 8000c4e:	701a      	strb	r2, [r3, #0]
			if (keyboard != 0x01) {
 8000c50:	4b3f      	ldr	r3, [pc, #252]	; (8000d50 <main+0x12c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d024      	beq.n	8000ca2 <main+0x7e>
				codeSet[codeSetIndex] = keyboard;
 8000c58:	4b3e      	ldr	r3, [pc, #248]	; (8000d54 <main+0x130>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b3c      	ldr	r3, [pc, #240]	; (8000d50 <main+0x12c>)
 8000c60:	7819      	ldrb	r1, [r3, #0]
 8000c62:	4b3d      	ldr	r3, [pc, #244]	; (8000d58 <main+0x134>)
 8000c64:	5499      	strb	r1, [r3, r2]
				codeSetIndex++;
 8000c66:	4b3b      	ldr	r3, [pc, #236]	; (8000d54 <main+0x130>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b39      	ldr	r3, [pc, #228]	; (8000d54 <main+0x130>)
 8000c70:	701a      	strb	r2, [r3, #0]
				if (codeSetIndex >= 4) {
 8000c72:	4b38      	ldr	r3, [pc, #224]	; (8000d54 <main+0x130>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d905      	bls.n	8000c86 <main+0x62>
					HAL_TIM_Base_Start_IT(&htim2);
 8000c7a:	4838      	ldr	r0, [pc, #224]	; (8000d5c <main+0x138>)
 8000c7c:	f001 ffec 	bl	8002c58 <HAL_TIM_Base_Start_IT>
					phase = 1;
 8000c80:	4b32      	ldr	r3, [pc, #200]	; (8000d4c <main+0x128>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	701a      	strb	r2, [r3, #0]
				}

				HAL_UART_Transmit(&huart3, &keyboard, 1, 1000);
 8000c86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4930      	ldr	r1, [pc, #192]	; (8000d50 <main+0x12c>)
 8000c8e:	4834      	ldr	r0, [pc, #208]	; (8000d60 <main+0x13c>)
 8000c90:	f002 fcce 	bl	8003630 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) "\n", 1, 1000);
 8000c94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4932      	ldr	r1, [pc, #200]	; (8000d64 <main+0x140>)
 8000c9c:	4830      	ldr	r0, [pc, #192]	; (8000d60 <main+0x13c>)
 8000c9e:	f002 fcc7 	bl	8003630 <HAL_UART_Transmit>
			}

			HAL_Delay(200);
 8000ca2:	20c8      	movs	r0, #200	; 0xc8
 8000ca4:	f000 faf8 	bl	8001298 <HAL_Delay>
		}

		if (phase == 1 || phase == 2) {
 8000ca8:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <main+0x128>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d003      	beq.n	8000cb8 <main+0x94>
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <main+0x128>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d1c1      	bne.n	8000c3c <main+0x18>
			keyboard = readKeypad();
 8000cb8:	f7ff fe30 	bl	800091c <readKeypad>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <main+0x12c>)
 8000cc2:	701a      	strb	r2, [r3, #0]
			if (keyboard != 0x01) {
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <main+0x12c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d03b      	beq.n	8000d44 <main+0x120>
				codeUser[codeUserIndex] = keyboard;
 8000ccc:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <main+0x144>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <main+0x12c>)
 8000cd4:	7819      	ldrb	r1, [r3, #0]
 8000cd6:	4b25      	ldr	r3, [pc, #148]	; (8000d6c <main+0x148>)
 8000cd8:	5499      	strb	r1, [r3, r2]
				codeUserIndex++;
 8000cda:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <main+0x144>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <main+0x144>)
 8000ce4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart3, &keyboard, 1, 1000);
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	2201      	movs	r2, #1
 8000cec:	4918      	ldr	r1, [pc, #96]	; (8000d50 <main+0x12c>)
 8000cee:	481c      	ldr	r0, [pc, #112]	; (8000d60 <main+0x13c>)
 8000cf0:	f002 fc9e 	bl	8003630 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart3, (uint8_t*) "\n", 1, 1000);
 8000cf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	491a      	ldr	r1, [pc, #104]	; (8000d64 <main+0x140>)
 8000cfc:	4818      	ldr	r0, [pc, #96]	; (8000d60 <main+0x13c>)
 8000cfe:	f002 fc97 	bl	8003630 <HAL_UART_Transmit>
				if (codeUserIndex >= 4) {
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <main+0x144>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d91c      	bls.n	8000d44 <main+0x120>
					if (codeUser[0] == codeSet[0] && codeUser[1] == codeSet[1]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <main+0x148>)
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <main+0x134>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d114      	bne.n	8000d40 <main+0x11c>
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <main+0x148>)
 8000d18:	785a      	ldrb	r2, [r3, #1]
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <main+0x134>)
 8000d1c:	785b      	ldrb	r3, [r3, #1]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d10e      	bne.n	8000d40 <main+0x11c>
							&& codeUser[2] == codeSet[2]
 8000d22:	4b12      	ldr	r3, [pc, #72]	; (8000d6c <main+0x148>)
 8000d24:	789a      	ldrb	r2, [r3, #2]
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <main+0x134>)
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d108      	bne.n	8000d40 <main+0x11c>
							&& codeUser[3] == codeSet[3]) {
 8000d2e:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <main+0x148>)
 8000d30:	78da      	ldrb	r2, [r3, #3]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <main+0x134>)
 8000d34:	78db      	ldrb	r3, [r3, #3]
 8000d36:	429a      	cmp	r2, r3
 8000d38:	d102      	bne.n	8000d40 <main+0x11c>
						handleGoodPin();
 8000d3a:	f7ff ff37 	bl	8000bac <handleGoodPin>
 8000d3e:	e001      	b.n	8000d44 <main+0x120>
					} else {
						handleBadPin();
 8000d40:	f7ff ff14 	bl	8000b6c <handleBadPin>
					}
				}
			}

			HAL_Delay(200);
 8000d44:	20c8      	movs	r0, #200	; 0xc8
 8000d46:	f000 faa7 	bl	8001298 <HAL_Delay>
		if (phase == 0) {
 8000d4a:	e777      	b.n	8000c3c <main+0x18>
 8000d4c:	2000007d 	.word	0x2000007d
 8000d50:	2000006c 	.word	0x2000006c
 8000d54:	20000074 	.word	0x20000074
 8000d58:	20000070 	.word	0x20000070
 8000d5c:	20000080 	.word	0x20000080
 8000d60:	200000cc 	.word	0x200000cc
 8000d64:	080046dc 	.word	0x080046dc
 8000d68:	2000007c 	.word	0x2000007c
 8000d6c:	20000078 	.word	0x20000078

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	; 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f003 fc73 	bl	800466a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d94:	f000 fe3e 	bl	8001a14 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <SystemClock_Config+0xc8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a26      	ldr	r2, [pc, #152]	; (8000e38 <SystemClock_Config+0xc8>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <SystemClock_Config+0xc8>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db0:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <SystemClock_Config+0xcc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000db8:	4a20      	ldr	r2, [pc, #128]	; (8000e3c <SystemClock_Config+0xcc>)
 8000dba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <SystemClock_Config+0xcc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000de4:	2348      	movs	r3, #72	; 0x48
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000dec:	2303      	movs	r3, #3
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0320 	add.w	r3, r7, #32
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 fe1d 	bl	8001a34 <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e00:	f000 f81e 	bl	8000e40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e04:	230f      	movs	r3, #15
 8000e06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2102      	movs	r1, #2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f001 f8ab 	bl	8001f7c <HAL_RCC_ClockConfig>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e2c:	f000 f808 	bl	8000e40 <Error_Handler>
  }
}
 8000e30:	bf00      	nop
 8000e32:	3750      	adds	r7, #80	; 0x50
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	40007000 	.word	0x40007000

08000e40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e44:	b672      	cpsid	i
}
 8000e46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e48:	e7fe      	b.n	8000e48 <Error_Handler+0x8>
	...

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_MspInit+0x50>)
 8000e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e56:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <HAL_MspInit+0x50>)
 8000e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_MspInit+0x50>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_MspInit+0x50>)
 8000e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_MspInit+0x50>)
 8000e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e74:	6453      	str	r3, [r2, #68]	; 0x44
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <HAL_MspInit+0x50>)
 8000e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	2005      	movs	r0, #5
 8000e88:	f000 fb05 	bl	8001496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000e8c:	2005      	movs	r0, #5
 8000e8e:	f000 fb1e 	bl	80014ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800

08000ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <NMI_Handler+0x4>

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f9b4 	bl	8001258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(moveSensor_Pin);
 8000f06:	2010      	movs	r0, #16
 8000f08:	f000 fd6c 	bl	80019e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <TIM2_IRQHandler+0x10>)
 8000f16:	f001 ff46 	bl	8002da6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000080 	.word	0x20000080

08000f24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <USART3_IRQHandler+0x10>)
 8000f2a:	f002 fc05 	bl	8003738 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000cc 	.word	0x200000cc

08000f38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Guzik_Pin);
 8000f3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f40:	f000 fd50 	bl	80019e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f48:	f000 fd4c 	bl	80019e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <MX_TIM2_Init+0x98>)
 8000f94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	; (800100c <MX_TIM2_Init+0x98>)
 8000f9c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000fa0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_TIM2_Init+0x98>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 299999;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_TIM2_Init+0x98>)
 8000faa:	4a19      	ldr	r2, [pc, #100]	; (8001010 <MX_TIM2_Init+0x9c>)
 8000fac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_TIM2_Init+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_TIM2_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000fba:	4814      	ldr	r0, [pc, #80]	; (800100c <MX_TIM2_Init+0x98>)
 8000fbc:	f001 fdf4 	bl	8002ba8 <HAL_TIM_Base_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000fc6:	f7ff ff3b 	bl	8000e40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	480d      	ldr	r0, [pc, #52]	; (800100c <MX_TIM2_Init+0x98>)
 8000fd8:	f002 f804 	bl	8002fe4 <HAL_TIM_ConfigClockSource>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000fe2:	f7ff ff2d 	bl	8000e40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <MX_TIM2_Init+0x98>)
 8000ff4:	f002 fa22 	bl	800343c <HAL_TIMEx_MasterConfigSynchronization>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ffe:	f7ff ff1f 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	3720      	adds	r7, #32
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000080 	.word	0x20000080
 8001010:	000493df 	.word	0x000493df

08001014 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001024:	d113      	bne.n	800104e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <HAL_TIM_Base_MspInit+0x44>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <HAL_TIM_Base_MspInit+0x44>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <HAL_TIM_Base_MspInit+0x44>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	201c      	movs	r0, #28
 8001044:	f000 fa27 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001048:	201c      	movs	r0, #28
 800104a:	f000 fa40 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001062:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <MX_USART3_UART_Init+0x5c>)
 8001064:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001068:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800106c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0e      	ldr	r3, [pc, #56]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_USART3_UART_Init+0x58>)
 80010a0:	f002 fa78 	bl	8003594 <HAL_UART_Init>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010aa:	f7ff fec9 	bl	8000e40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200000cc 	.word	0x200000cc
 80010b8:	40004800 	.word	0x40004800

080010bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b0aa      	sub	sp, #168	; 0xa8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2284      	movs	r2, #132	; 0x84
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f003 fac4 	bl	800466a <memset>
  if(uartHandle->Instance==USART3)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a26      	ldr	r2, [pc, #152]	; (8001180 <HAL_UART_MspInit+0xc4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d144      	bne.n	8001176 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010f0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 f964 	bl	80023c8 <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001106:	f7ff fe9b 	bl	8000e40 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800110a:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <HAL_UART_MspInit+0xc8>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a1d      	ldr	r2, [pc, #116]	; (8001184 <HAL_UART_MspInit+0xc8>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <HAL_UART_MspInit+0xc8>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <HAL_UART_MspInit+0xc8>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a17      	ldr	r2, [pc, #92]	; (8001184 <HAL_UART_MspInit+0xc8>)
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b15      	ldr	r3, [pc, #84]	; (8001184 <HAL_UART_MspInit+0xc8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800113a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001148:	2301      	movs	r3, #1
 800114a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001154:	2307      	movs	r3, #7
 8001156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800115e:	4619      	mov	r1, r3
 8001160:	4809      	ldr	r0, [pc, #36]	; (8001188 <HAL_UART_MspInit+0xcc>)
 8001162:	f000 fa61 	bl	8001628 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001166:	2200      	movs	r2, #0
 8001168:	2100      	movs	r1, #0
 800116a:	2027      	movs	r0, #39	; 0x27
 800116c:	f000 f993 	bl	8001496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001170:	2027      	movs	r0, #39	; 0x27
 8001172:	f000 f9ac 	bl	80014ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001176:	bf00      	nop
 8001178:	37a8      	adds	r7, #168	; 0xa8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40004800 	.word	0x40004800
 8001184:	40023800 	.word	0x40023800
 8001188:	40020c00 	.word	0x40020c00

0800118c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001190:	480d      	ldr	r0, [pc, #52]	; (80011c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001192:	490e      	ldr	r1, [pc, #56]	; (80011cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001194:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001198:	e002      	b.n	80011a0 <LoopCopyDataInit>

0800119a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800119c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119e:	3304      	adds	r3, #4

080011a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a4:	d3f9      	bcc.n	800119a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a8:	4c0b      	ldr	r4, [pc, #44]	; (80011d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011ac:	e001      	b.n	80011b2 <LoopFillZerobss>

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b0:	3204      	adds	r2, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b6:	f7ff fecb 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ba:	f003 fa5f 	bl	800467c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011be:	f7ff fd31 	bl	8000c24 <main>
  bx  lr    
 80011c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011cc:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 80011d0:	08004708 	.word	0x08004708
  ldr r2, =_sbss
 80011d4:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 80011d8:	20000158 	.word	0x20000158

080011dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011dc:	e7fe      	b.n	80011dc <ADC_IRQHandler>

080011de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e2:	2003      	movs	r0, #3
 80011e4:	f000 f94c 	bl	8001480 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f000 f805 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ee:	f7ff fe2d 	bl	8000e4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f2:	2300      	movs	r3, #0
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_InitTick+0x54>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x58>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001212:	fbb2 f3f3 	udiv	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f967 	bl	80014ea <HAL_SYSTICK_Config>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d80a      	bhi.n	8001242 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f000 f92f 	bl	8001496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001238:	4a06      	ldr	r2, [pc, #24]	; (8001254 <HAL_InitTick+0x5c>)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123e:	2300      	movs	r3, #0
 8001240:	e000      	b.n	8001244 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000044 	.word	0x20000044
 8001250:	2000004c 	.word	0x2000004c
 8001254:	20000048 	.word	0x20000048

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	2000004c 	.word	0x2000004c
 800127c:	20000154 	.word	0x20000154

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000154 	.word	0x20000154

08001298 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a0:	f7ff ffee 	bl	8001280 <HAL_GetTick>
 80012a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d005      	beq.n	80012be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_Delay+0x44>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012be:	bf00      	nop
 80012c0:	f7ff ffde 	bl	8001280 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d8f7      	bhi.n	80012c0 <HAL_Delay+0x28>
  {
  }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000004c 	.word	0x2000004c

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <__NVIC_SetPriorityGrouping+0x40>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	4313      	orrs	r3, r2
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x40>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00
 8001324:	05fa0000 	.word	0x05fa0000

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <__NVIC_EnableIRQ+0x38>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	; (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
         );
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
	...

0800143c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800144c:	d301      	bcc.n	8001452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144e:	2301      	movs	r3, #1
 8001450:	e00f      	b.n	8001472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001452:	4a0a      	ldr	r2, [pc, #40]	; (800147c <SysTick_Config+0x40>)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3b01      	subs	r3, #1
 8001458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145a:	210f      	movs	r1, #15
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f7ff ff8e 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SysTick_Config+0x40>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <SysTick_Config+0x40>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f7ff ff29 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001496:	b580      	push	{r7, lr}
 8001498:	b086      	sub	sp, #24
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	60b9      	str	r1, [r7, #8]
 80014a0:	607a      	str	r2, [r7, #4]
 80014a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a8:	f7ff ff3e 	bl	8001328 <__NVIC_GetPriorityGrouping>
 80014ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	68b9      	ldr	r1, [r7, #8]
 80014b2:	6978      	ldr	r0, [r7, #20]
 80014b4:	f7ff ff8e 	bl	80013d4 <NVIC_EncodePriority>
 80014b8:	4602      	mov	r2, r0
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>
}
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff31 	bl	8001344 <__NVIC_EnableIRQ>
}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ffa2 	bl	800143c <SysTick_Config>
 80014f8:	4603      	mov	r3, r0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b084      	sub	sp, #16
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff feb6 	bl	8001280 <HAL_GetTick>
 8001514:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d008      	beq.n	8001534 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2280      	movs	r2, #128	; 0x80
 8001526:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e052      	b.n	80015da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0216 	bic.w	r2, r2, #22
 8001542:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001552:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001558:	2b00      	cmp	r3, #0
 800155a:	d103      	bne.n	8001564 <HAL_DMA_Abort+0x62>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001560:	2b00      	cmp	r3, #0
 8001562:	d007      	beq.n	8001574 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 0208 	bic.w	r2, r2, #8
 8001572:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001584:	e013      	b.n	80015ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001586:	f7ff fe7b 	bl	8001280 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b05      	cmp	r3, #5
 8001592:	d90c      	bls.n	80015ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2220      	movs	r2, #32
 8001598:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2203      	movs	r2, #3
 800159e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e015      	b.n	80015da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1e4      	bne.n	8001586 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c0:	223f      	movs	r2, #63	; 0x3f
 80015c2:	409a      	lsls	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b083      	sub	sp, #12
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d004      	beq.n	8001600 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e00c      	b.n	800161a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2205      	movs	r2, #5
 8001604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 0201 	bic.w	r2, r2, #1
 8001616:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	; 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e175      	b.n	8001934 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	429a      	cmp	r2, r3
 8001662:	f040 8164 	bne.w	800192e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d005      	beq.n	800167e <HAL_GPIO_Init+0x56>
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d130      	bne.n	80016e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 0201 	and.w	r2, r3, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d017      	beq.n	800171c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d123      	bne.n	8001770 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	69b9      	ldr	r1, [r7, #24]
 800176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80be 	beq.w	800192e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	4b66      	ldr	r3, [pc, #408]	; (800194c <HAL_GPIO_Init+0x324>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b6:	4a65      	ldr	r2, [pc, #404]	; (800194c <HAL_GPIO_Init+0x324>)
 80017b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017bc:	6453      	str	r3, [r2, #68]	; 0x44
 80017be:	4b63      	ldr	r3, [pc, #396]	; (800194c <HAL_GPIO_Init+0x324>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80017ca:	4a61      	ldr	r2, [pc, #388]	; (8001950 <HAL_GPIO_Init+0x328>)
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	089b      	lsrs	r3, r3, #2
 80017d0:	3302      	adds	r3, #2
 80017d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	220f      	movs	r2, #15
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a58      	ldr	r2, [pc, #352]	; (8001954 <HAL_GPIO_Init+0x32c>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d037      	beq.n	8001866 <HAL_GPIO_Init+0x23e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a57      	ldr	r2, [pc, #348]	; (8001958 <HAL_GPIO_Init+0x330>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d031      	beq.n	8001862 <HAL_GPIO_Init+0x23a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a56      	ldr	r2, [pc, #344]	; (800195c <HAL_GPIO_Init+0x334>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d02b      	beq.n	800185e <HAL_GPIO_Init+0x236>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a55      	ldr	r2, [pc, #340]	; (8001960 <HAL_GPIO_Init+0x338>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d025      	beq.n	800185a <HAL_GPIO_Init+0x232>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a54      	ldr	r2, [pc, #336]	; (8001964 <HAL_GPIO_Init+0x33c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01f      	beq.n	8001856 <HAL_GPIO_Init+0x22e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a53      	ldr	r2, [pc, #332]	; (8001968 <HAL_GPIO_Init+0x340>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d019      	beq.n	8001852 <HAL_GPIO_Init+0x22a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a52      	ldr	r2, [pc, #328]	; (800196c <HAL_GPIO_Init+0x344>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0x226>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a51      	ldr	r2, [pc, #324]	; (8001970 <HAL_GPIO_Init+0x348>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x222>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a50      	ldr	r2, [pc, #320]	; (8001974 <HAL_GPIO_Init+0x34c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x21e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4f      	ldr	r2, [pc, #316]	; (8001978 <HAL_GPIO_Init+0x350>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x21a>
 800183e:	2309      	movs	r3, #9
 8001840:	e012      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001842:	230a      	movs	r3, #10
 8001844:	e010      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001846:	2308      	movs	r3, #8
 8001848:	e00e      	b.n	8001868 <HAL_GPIO_Init+0x240>
 800184a:	2307      	movs	r3, #7
 800184c:	e00c      	b.n	8001868 <HAL_GPIO_Init+0x240>
 800184e:	2306      	movs	r3, #6
 8001850:	e00a      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001852:	2305      	movs	r3, #5
 8001854:	e008      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001856:	2304      	movs	r3, #4
 8001858:	e006      	b.n	8001868 <HAL_GPIO_Init+0x240>
 800185a:	2303      	movs	r3, #3
 800185c:	e004      	b.n	8001868 <HAL_GPIO_Init+0x240>
 800185e:	2302      	movs	r3, #2
 8001860:	e002      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_GPIO_Init+0x240>
 8001866:	2300      	movs	r3, #0
 8001868:	69fa      	ldr	r2, [r7, #28]
 800186a:	f002 0203 	and.w	r2, r2, #3
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	4093      	lsls	r3, r2
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001878:	4935      	ldr	r1, [pc, #212]	; (8001950 <HAL_GPIO_Init+0x328>)
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001886:	4b3d      	ldr	r3, [pc, #244]	; (800197c <HAL_GPIO_Init+0x354>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018aa:	4a34      	ldr	r2, [pc, #208]	; (800197c <HAL_GPIO_Init+0x354>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018b0:	4b32      	ldr	r3, [pc, #200]	; (800197c <HAL_GPIO_Init+0x354>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d4:	4a29      	ldr	r2, [pc, #164]	; (800197c <HAL_GPIO_Init+0x354>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018da:	4b28      	ldr	r3, [pc, #160]	; (800197c <HAL_GPIO_Init+0x354>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fe:	4a1f      	ldr	r2, [pc, #124]	; (800197c <HAL_GPIO_Init+0x354>)
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001904:	4b1d      	ldr	r3, [pc, #116]	; (800197c <HAL_GPIO_Init+0x354>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001928:	4a14      	ldr	r2, [pc, #80]	; (800197c <HAL_GPIO_Init+0x354>)
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	2b0f      	cmp	r3, #15
 8001938:	f67f ae86 	bls.w	8001648 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3724      	adds	r7, #36	; 0x24
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800
 8001950:	40013800 	.word	0x40013800
 8001954:	40020000 	.word	0x40020000
 8001958:	40020400 	.word	0x40020400
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40021400 	.word	0x40021400
 800196c:	40021800 	.word	0x40021800
 8001970:	40021c00 	.word	0x40021c00
 8001974:	40022000 	.word	0x40022000
 8001978:	40022400 	.word	0x40022400
 800197c:	40013c00 	.word	0x40013c00

08001980 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691a      	ldr	r2, [r3, #16]
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	4013      	ands	r3, r2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001998:	2301      	movs	r3, #1
 800199a:	73fb      	strb	r3, [r7, #15]
 800199c:	e001      	b.n	80019a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	460b      	mov	r3, r1
 80019ba:	807b      	strh	r3, [r7, #2]
 80019bc:	4613      	mov	r3, r2
 80019be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c0:	787b      	ldrb	r3, [r7, #1]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c6:	887a      	ldrh	r2, [r7, #2]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80019cc:	e003      	b.n	80019d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	041a      	lsls	r2, r3, #16
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	619a      	str	r2, [r3, #24]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d006      	beq.n	8001a08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019fa:	4a05      	ldr	r2, [pc, #20]	; (8001a10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a00:	88fb      	ldrh	r3, [r7, #6]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7fe ff0e 	bl	8000824 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a08:	bf00      	nop
 8001a0a:	3708      	adds	r7, #8
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40013c00 	.word	0x40013c00

08001a14 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40007000 	.word	0x40007000

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e291      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8087 	beq.w	8001b66 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a58:	4b96      	ldr	r3, [pc, #600]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d00c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a64:	4b93      	ldr	r3, [pc, #588]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b08      	cmp	r3, #8
 8001a6e:	d112      	bne.n	8001a96 <HAL_RCC_OscConfig+0x62>
 8001a70:	4b90      	ldr	r3, [pc, #576]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a7c:	d10b      	bne.n	8001a96 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7e:	4b8d      	ldr	r3, [pc, #564]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d06c      	beq.n	8001b64 <HAL_RCC_OscConfig+0x130>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d168      	bne.n	8001b64 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e26b      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a9e:	d106      	bne.n	8001aae <HAL_RCC_OscConfig+0x7a>
 8001aa0:	4b84      	ldr	r3, [pc, #528]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a83      	ldr	r2, [pc, #524]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	e02e      	b.n	8001b0c <HAL_RCC_OscConfig+0xd8>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x9c>
 8001ab6:	4b7f      	ldr	r3, [pc, #508]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a7e      	ldr	r2, [pc, #504]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b7c      	ldr	r3, [pc, #496]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7b      	ldr	r2, [pc, #492]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0xd8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0xc0>
 8001ada:	4b76      	ldr	r3, [pc, #472]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a75      	ldr	r2, [pc, #468]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a72      	ldr	r2, [pc, #456]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0xd8>
 8001af4:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a6e      	ldr	r2, [pc, #440]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001afa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6b      	ldr	r2, [pc, #428]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d013      	beq.n	8001b3c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff fbb4 	bl	8001280 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b1c:	f7ff fbb0 	bl	8001280 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e21f      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b2e:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0xe8>
 8001b3a:	e014      	b.n	8001b66 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fba0 	bl	8001280 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff fb9c 	bl	8001280 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e20b      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b56:	4b57      	ldr	r3, [pc, #348]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x110>
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d069      	beq.n	8001c46 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b72:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b7e:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d11c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x190>
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d116      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b96:	4b47      	ldr	r3, [pc, #284]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x17a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e1df      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	493d      	ldr	r1, [pc, #244]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	e040      	b.n	8001c46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d023      	beq.n	8001c14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bcc:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a38      	ldr	r2, [pc, #224]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fb52 	bl	8001280 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff fb4e 	bl	8001280 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e1bd      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf2:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfe:	4b2d      	ldr	r3, [pc, #180]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4929      	ldr	r1, [pc, #164]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]
 8001c12:	e018      	b.n	8001c46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a26      	ldr	r2, [pc, #152]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff fb2e 	bl	8001280 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff fb2a 	bl	8001280 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e199      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d038      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d019      	beq.n	8001c8e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c66:	f7ff fb0b 	bl	8001280 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c6e:	f7ff fb07 	bl	8001280 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e176      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x23a>
 8001c8c:	e01a      	b.n	8001cc4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8e:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c92:	4a08      	ldr	r2, [pc, #32]	; (8001cb4 <HAL_RCC_OscConfig+0x280>)
 8001c94:	f023 0301 	bic.w	r3, r3, #1
 8001c98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7ff faf1 	bl	8001280 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca0:	e00a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7ff faed 	bl	8001280 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d903      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e15c      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
 8001cb4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb8:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001cba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1ee      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a4 	beq.w	8001e1a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd2:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10d      	bne.n	8001cfa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4b88      	ldr	r3, [pc, #544]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a87      	ldr	r2, [pc, #540]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b85      	ldr	r3, [pc, #532]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cfa:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <HAL_RCC_OscConfig+0x4d0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d118      	bne.n	8001d38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d06:	4b7f      	ldr	r3, [pc, #508]	; (8001f04 <HAL_RCC_OscConfig+0x4d0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a7e      	ldr	r2, [pc, #504]	; (8001f04 <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fab5 	bl	8001280 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1a:	f7ff fab1 	bl	8001280 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b64      	cmp	r3, #100	; 0x64
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e120      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d2c:	4b75      	ldr	r3, [pc, #468]	; (8001f04 <HAL_RCC_OscConfig+0x4d0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d106      	bne.n	8001d4e <HAL_RCC_OscConfig+0x31a>
 8001d40:	4b6f      	ldr	r3, [pc, #444]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d44:	4a6e      	ldr	r2, [pc, #440]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d46:	f043 0301 	orr.w	r3, r3, #1
 8001d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d4c:	e02d      	b.n	8001daa <HAL_RCC_OscConfig+0x376>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x33c>
 8001d56:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5a:	4a69      	ldr	r2, [pc, #420]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6713      	str	r3, [r2, #112]	; 0x70
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	4a66      	ldr	r2, [pc, #408]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d68:	f023 0304 	bic.w	r3, r3, #4
 8001d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6e:	e01c      	b.n	8001daa <HAL_RCC_OscConfig+0x376>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x35e>
 8001d78:	4b61      	ldr	r3, [pc, #388]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a60      	ldr	r2, [pc, #384]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	4b5e      	ldr	r3, [pc, #376]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a5d      	ldr	r2, [pc, #372]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	e00b      	b.n	8001daa <HAL_RCC_OscConfig+0x376>
 8001d92:	4b5b      	ldr	r3, [pc, #364]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a5a      	ldr	r2, [pc, #360]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9e:	4b58      	ldr	r3, [pc, #352]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a57      	ldr	r2, [pc, #348]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d015      	beq.n	8001dde <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7ff fa65 	bl	8001280 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff fa61 	bl	8001280 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0ce      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	4b4b      	ldr	r3, [pc, #300]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0ee      	beq.n	8001dba <HAL_RCC_OscConfig+0x386>
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7ff fa4f 	bl	8001280 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff fa4b 	bl	8001280 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfc:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0e:	4b3c      	ldr	r3, [pc, #240]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a3b      	ldr	r2, [pc, #236]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80a4 	beq.w	8001f6c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d06b      	beq.n	8001f08 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d149      	bne.n	8001ecc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	4b31      	ldr	r3, [pc, #196]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a30      	ldr	r2, [pc, #192]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff fa1c 	bl	8001280 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4c:	f7ff fa18 	bl	8001280 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e087      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e5e:	4b28      	ldr	r3, [pc, #160]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	69da      	ldr	r2, [r3, #28]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a1b      	ldr	r3, [r3, #32]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	3b01      	subs	r3, #1
 8001e84:	041b      	lsls	r3, r3, #16
 8001e86:	431a      	orrs	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8c:	061b      	lsls	r3, r3, #24
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001e92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e96:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7ff f9ec 	bl	8001280 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eac:	f7ff f9e8 	bl	8001280 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e057      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x478>
 8001eca:	e04f      	b.n	8001f6c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0b      	ldr	r2, [pc, #44]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001ed2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff f9d2 	bl	8001280 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff f9ce 	bl	8001280 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e03d      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef2:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_RCC_OscConfig+0x4cc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x4ac>
 8001efe:	e035      	b.n	8001f6c <HAL_RCC_OscConfig+0x538>
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x544>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d028      	beq.n	8001f68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d121      	bne.n	8001f68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d11a      	bne.n	8001f68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f38:	4013      	ands	r3, r2
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f3e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d111      	bne.n	8001f68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	3b01      	subs	r3, #1
 8001f52:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d107      	bne.n	8001f68 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f62:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0d0      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f94:	4b6a      	ldr	r3, [pc, #424]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d910      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b67      	ldr	r3, [pc, #412]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 020f 	bic.w	r2, r3, #15
 8001faa:	4965      	ldr	r1, [pc, #404]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0b8      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a58      	ldr	r2, [pc, #352]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ffe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	494d      	ldr	r1, [pc, #308]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d040      	beq.n	80020a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d115      	bne.n	800205e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203e:	4b41      	ldr	r3, [pc, #260]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d109      	bne.n	800205e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e073      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204e:	4b3d      	ldr	r3, [pc, #244]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d101      	bne.n	800205e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e06b      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205e:	4b39      	ldr	r3, [pc, #228]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	4936      	ldr	r1, [pc, #216]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002070:	f7ff f906 	bl	8001280 <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	e00a      	b.n	800208e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002078:	f7ff f902 	bl	8001280 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	; 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e053      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208e:	4b2d      	ldr	r3, [pc, #180]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 020c 	and.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	429a      	cmp	r2, r3
 800209e:	d1eb      	bne.n	8002078 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020a0:	4b27      	ldr	r3, [pc, #156]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d210      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ae:	4b24      	ldr	r3, [pc, #144]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f023 020f 	bic.w	r2, r3, #15
 80020b6:	4922      	ldr	r1, [pc, #136]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e032      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4916      	ldr	r1, [pc, #88]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800210e:	f000 f821 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8002112:	4602      	mov	r2, r0
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	490a      	ldr	r1, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x1cc>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1d0>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x1d4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f862 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00
 8002144:	40023800 	.word	0x40023800
 8002148:	080046e0 	.word	0x080046e0
 800214c:	20000044 	.word	0x20000044
 8002150:	20000048 	.word	0x20000048

08002154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002158:	b094      	sub	sp, #80	; 0x50
 800215a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800215c:	2300      	movs	r3, #0
 800215e:	647b      	str	r3, [r7, #68]	; 0x44
 8002160:	2300      	movs	r3, #0
 8002162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002164:	2300      	movs	r3, #0
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002168:	2300      	movs	r3, #0
 800216a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800216c:	4b79      	ldr	r3, [pc, #484]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d00d      	beq.n	8002194 <HAL_RCC_GetSysClockFreq+0x40>
 8002178:	2b08      	cmp	r3, #8
 800217a:	f200 80e1 	bhi.w	8002340 <HAL_RCC_GetSysClockFreq+0x1ec>
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x34>
 8002182:	2b04      	cmp	r3, #4
 8002184:	d003      	beq.n	800218e <HAL_RCC_GetSysClockFreq+0x3a>
 8002186:	e0db      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b73      	ldr	r3, [pc, #460]	; (8002358 <HAL_RCC_GetSysClockFreq+0x204>)
 800218a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800218c:	e0db      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800218e:	4b73      	ldr	r3, [pc, #460]	; (800235c <HAL_RCC_GetSysClockFreq+0x208>)
 8002190:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002192:	e0d8      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002194:	4b6f      	ldr	r3, [pc, #444]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800219c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800219e:	4b6d      	ldr	r3, [pc, #436]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d063      	beq.n	8002272 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021aa:	4b6a      	ldr	r3, [pc, #424]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	2200      	movs	r2, #0
 80021b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80021b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021bc:	633b      	str	r3, [r7, #48]	; 0x30
 80021be:	2300      	movs	r3, #0
 80021c0:	637b      	str	r3, [r7, #52]	; 0x34
 80021c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80021c6:	4622      	mov	r2, r4
 80021c8:	462b      	mov	r3, r5
 80021ca:	f04f 0000 	mov.w	r0, #0
 80021ce:	f04f 0100 	mov.w	r1, #0
 80021d2:	0159      	lsls	r1, r3, #5
 80021d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021d8:	0150      	lsls	r0, r2, #5
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4621      	mov	r1, r4
 80021e0:	1a51      	subs	r1, r2, r1
 80021e2:	6139      	str	r1, [r7, #16]
 80021e4:	4629      	mov	r1, r5
 80021e6:	eb63 0301 	sbc.w	r3, r3, r1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021f8:	4659      	mov	r1, fp
 80021fa:	018b      	lsls	r3, r1, #6
 80021fc:	4651      	mov	r1, sl
 80021fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002202:	4651      	mov	r1, sl
 8002204:	018a      	lsls	r2, r1, #6
 8002206:	4651      	mov	r1, sl
 8002208:	ebb2 0801 	subs.w	r8, r2, r1
 800220c:	4659      	mov	r1, fp
 800220e:	eb63 0901 	sbc.w	r9, r3, r1
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800221e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002226:	4690      	mov	r8, r2
 8002228:	4699      	mov	r9, r3
 800222a:	4623      	mov	r3, r4
 800222c:	eb18 0303 	adds.w	r3, r8, r3
 8002230:	60bb      	str	r3, [r7, #8]
 8002232:	462b      	mov	r3, r5
 8002234:	eb49 0303 	adc.w	r3, r9, r3
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002246:	4629      	mov	r1, r5
 8002248:	024b      	lsls	r3, r1, #9
 800224a:	4621      	mov	r1, r4
 800224c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002250:	4621      	mov	r1, r4
 8002252:	024a      	lsls	r2, r1, #9
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800225a:	2200      	movs	r2, #0
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
 800225e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002264:	f7fd ffd8 	bl	8000218 <__aeabi_uldivmod>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4613      	mov	r3, r2
 800226e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002270:	e058      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002272:	4b38      	ldr	r3, [pc, #224]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	099b      	lsrs	r3, r3, #6
 8002278:	2200      	movs	r2, #0
 800227a:	4618      	mov	r0, r3
 800227c:	4611      	mov	r1, r2
 800227e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002282:	623b      	str	r3, [r7, #32]
 8002284:	2300      	movs	r3, #0
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
 8002288:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800228c:	4642      	mov	r2, r8
 800228e:	464b      	mov	r3, r9
 8002290:	f04f 0000 	mov.w	r0, #0
 8002294:	f04f 0100 	mov.w	r1, #0
 8002298:	0159      	lsls	r1, r3, #5
 800229a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800229e:	0150      	lsls	r0, r2, #5
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4641      	mov	r1, r8
 80022a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80022aa:	4649      	mov	r1, r9
 80022ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022c4:	ebb2 040a 	subs.w	r4, r2, sl
 80022c8:	eb63 050b 	sbc.w	r5, r3, fp
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	00eb      	lsls	r3, r5, #3
 80022d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022da:	00e2      	lsls	r2, r4, #3
 80022dc:	4614      	mov	r4, r2
 80022de:	461d      	mov	r5, r3
 80022e0:	4643      	mov	r3, r8
 80022e2:	18e3      	adds	r3, r4, r3
 80022e4:	603b      	str	r3, [r7, #0]
 80022e6:	464b      	mov	r3, r9
 80022e8:	eb45 0303 	adc.w	r3, r5, r3
 80022ec:	607b      	str	r3, [r7, #4]
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022fa:	4629      	mov	r1, r5
 80022fc:	028b      	lsls	r3, r1, #10
 80022fe:	4621      	mov	r1, r4
 8002300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002304:	4621      	mov	r1, r4
 8002306:	028a      	lsls	r2, r1, #10
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800230e:	2200      	movs	r2, #0
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	61fa      	str	r2, [r7, #28]
 8002314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002318:	f7fd ff7e 	bl	8000218 <__aeabi_uldivmod>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4613      	mov	r3, r2
 8002322:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_GetSysClockFreq+0x200>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	0c1b      	lsrs	r3, r3, #16
 800232a:	f003 0303 	and.w	r3, r3, #3
 800232e:	3301      	adds	r3, #1
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800233e:	e002      	b.n	8002346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <HAL_RCC_GetSysClockFreq+0x204>)
 8002342:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002348:	4618      	mov	r0, r3
 800234a:	3750      	adds	r7, #80	; 0x50
 800234c:	46bd      	mov	sp, r7
 800234e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800
 8002358:	00f42400 	.word	0x00f42400
 800235c:	007a1200 	.word	0x007a1200

08002360 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <HAL_RCC_GetHCLKFreq+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000044 	.word	0x20000044

08002378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800237c:	f7ff fff0 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	; (8002398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	0a9b      	lsrs	r3, r3, #10
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4903      	ldr	r1, [pc, #12]	; (800239c <HAL_RCC_GetPCLK1Freq+0x24>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	080046f0 	.word	0x080046f0

080023a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a4:	f7ff ffdc 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0b5b      	lsrs	r3, r3, #13
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4903      	ldr	r1, [pc, #12]	; (80023c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	080046f0 	.word	0x080046f0

080023c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b088      	sub	sp, #32
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d012      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023f0:	4b69      	ldr	r3, [pc, #420]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	4a68      	ldr	r2, [pc, #416]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023fa:	6093      	str	r3, [r2, #8]
 80023fc:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	4964      	ldr	r1, [pc, #400]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002412:	2301      	movs	r3, #1
 8002414:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d017      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002422:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002430:	4959      	ldr	r1, [pc, #356]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002432:	4313      	orrs	r3, r2
 8002434:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002440:	d101      	bne.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002442:	2301      	movs	r3, #1
 8002444:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800244e:	2301      	movs	r3, #1
 8002450:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d017      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800245e:	4b4e      	ldr	r3, [pc, #312]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002464:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	494a      	ldr	r1, [pc, #296]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247c:	d101      	bne.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800247e:	2301      	movs	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800248a:	2301      	movs	r3, #1
 800248c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800249a:	2301      	movs	r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 808b 	beq.w	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80024ac:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	4a39      	ldr	r2, [pc, #228]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024b6:	6413      	str	r3, [r2, #64]	; 0x40
 80024b8:	4b37      	ldr	r3, [pc, #220]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024c4:	4b35      	ldr	r3, [pc, #212]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a34      	ldr	r2, [pc, #208]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7fe fed6 	bl	8001280 <HAL_GetTick>
 80024d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d8:	f7fe fed2 	bl	8001280 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e357      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ea:	4b2c      	ldr	r3, [pc, #176]	; (800259c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024f6:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d035      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	429a      	cmp	r2, r3
 8002512:	d02e      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002514:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800251e:	4b1e      	ldr	r3, [pc, #120]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	4a1d      	ldr	r2, [pc, #116]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002534:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002536:	4a18      	ldr	r2, [pc, #96]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d114      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe fe9a 	bl	8001280 <HAL_GetTick>
 800254c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7fe fe96 	bl	8001280 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e319      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0ee      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800257e:	d111      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800258c:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800258e:	400b      	ands	r3, r1
 8002590:	4901      	ldr	r1, [pc, #4]	; (8002598 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
 8002596:	e00b      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002598:	40023800 	.word	0x40023800
 800259c:	40007000 	.word	0x40007000
 80025a0:	0ffffcff 	.word	0x0ffffcff
 80025a4:	4baa      	ldr	r3, [pc, #680]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4aa9      	ldr	r2, [pc, #676]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025ae:	6093      	str	r3, [r2, #8]
 80025b0:	4ba7      	ldr	r3, [pc, #668]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025bc:	49a4      	ldr	r1, [pc, #656]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d010      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025ce:	4ba0      	ldr	r3, [pc, #640]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025d4:	4a9e      	ldr	r2, [pc, #632]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025de:	4b9c      	ldr	r3, [pc, #624]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	4999      	ldr	r1, [pc, #612]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fc:	4b94      	ldr	r3, [pc, #592]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800260a:	4991      	ldr	r1, [pc, #580]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800261e:	4b8c      	ldr	r3, [pc, #560]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800262c:	4988      	ldr	r1, [pc, #544]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002640:	4b83      	ldr	r3, [pc, #524]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800264e:	4980      	ldr	r1, [pc, #512]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002662:	4b7b      	ldr	r3, [pc, #492]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4977      	ldr	r1, [pc, #476]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002684:	4b72      	ldr	r3, [pc, #456]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002692:	496f      	ldr	r1, [pc, #444]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026a6:	4b6a      	ldr	r3, [pc, #424]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	f023 020c 	bic.w	r2, r3, #12
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b4:	4966      	ldr	r1, [pc, #408]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026c8:	4b61      	ldr	r3, [pc, #388]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d6:	495e      	ldr	r1, [pc, #376]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026ea:	4b59      	ldr	r3, [pc, #356]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f8:	4955      	ldr	r1, [pc, #340]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800270c:	4b50      	ldr	r3, [pc, #320]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	494d      	ldr	r1, [pc, #308]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800272e:	4b48      	ldr	r3, [pc, #288]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	4944      	ldr	r1, [pc, #272]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002750:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	493c      	ldr	r1, [pc, #240]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002772:	4b37      	ldr	r3, [pc, #220]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002780:	4933      	ldr	r1, [pc, #204]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002794:	4b2e      	ldr	r3, [pc, #184]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a2:	492b      	ldr	r1, [pc, #172]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d011      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80027b6:	4b26      	ldr	r3, [pc, #152]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027c4:	4922      	ldr	r1, [pc, #136]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027d4:	d101      	bne.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002804:	4912      	ldr	r1, [pc, #72]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002828:	4909      	ldr	r1, [pc, #36]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800282a:	4313      	orrs	r3, r2
 800282c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d006      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	f000 80d9 	beq.w	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002844:	4b02      	ldr	r3, [pc, #8]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a01      	ldr	r2, [pc, #4]	; (8002850 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800284a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800284e:	e001      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002850:	40023800 	.word	0x40023800
 8002854:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002856:	f7fe fd13 	bl	8001280 <HAL_GetTick>
 800285a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800285c:	e008      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800285e:	f7fe fd0f 	bl	8001280 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b64      	cmp	r3, #100	; 0x64
 800286a:	d901      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e194      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002870:	4b6c      	ldr	r3, [pc, #432]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d021      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288c:	2b00      	cmp	r3, #0
 800288e:	d11d      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002890:	4b64      	ldr	r3, [pc, #400]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002896:	0c1b      	lsrs	r3, r3, #16
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800289e:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a4:	0e1b      	lsrs	r3, r3, #24
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	019a      	lsls	r2, r3, #6
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	041b      	lsls	r3, r3, #16
 80028b6:	431a      	orrs	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	061b      	lsls	r3, r3, #24
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	071b      	lsls	r3, r3, #28
 80028c4:	4957      	ldr	r1, [pc, #348]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d02e      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028f6:	d129      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028f8:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028fe:	0c1b      	lsrs	r3, r3, #16
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002906:	4b47      	ldr	r3, [pc, #284]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800290c:	0f1b      	lsrs	r3, r3, #28
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	019a      	lsls	r2, r3, #6
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	041b      	lsls	r3, r3, #16
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	431a      	orrs	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	071b      	lsls	r3, r3, #28
 800292c:	493d      	ldr	r1, [pc, #244]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002934:	4b3b      	ldr	r3, [pc, #236]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800293a:	f023 021f 	bic.w	r2, r3, #31
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	3b01      	subs	r3, #1
 8002944:	4937      	ldr	r1, [pc, #220]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d01d      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002958:	4b32      	ldr	r3, [pc, #200]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800295a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295e:	0e1b      	lsrs	r3, r3, #24
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002966:	4b2f      	ldr	r3, [pc, #188]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800296c:	0f1b      	lsrs	r3, r3, #28
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	019a      	lsls	r2, r3, #6
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	431a      	orrs	r2, r3
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	431a      	orrs	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	071b      	lsls	r3, r3, #28
 800298c:	4925      	ldr	r1, [pc, #148]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d011      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	019a      	lsls	r2, r3, #6
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	041b      	lsls	r3, r3, #16
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	071b      	lsls	r3, r3, #28
 80029bc:	4919      	ldr	r1, [pc, #100]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d0:	f7fe fc56 	bl	8001280 <HAL_GetTick>
 80029d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029d8:	f7fe fc52 	bl	8001280 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e0d7      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ea:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	f040 80cd 	bne.w	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a08      	ldr	r2, [pc, #32]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0a:	f7fe fc39 	bl	8001280 <HAL_GetTick>
 8002a0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a10:	e00a      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a12:	f7fe fc35 	bl	8001280 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	; 0x64
 8002a1e:	d903      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e0ba      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002a24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a28:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a34:	d0ed      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d009      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d02e      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d12a      	bne.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a5e:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	f003 0303 	and.w	r3, r3, #3
 8002a6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a6c:	4b4d      	ldr	r3, [pc, #308]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a72:	0f1b      	lsrs	r3, r3, #28
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	019a      	lsls	r2, r3, #6
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	041b      	lsls	r3, r3, #16
 8002a84:	431a      	orrs	r2, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	061b      	lsls	r3, r3, #24
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	071b      	lsls	r3, r3, #28
 8002a92:	4944      	ldr	r1, [pc, #272]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a9a:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	493d      	ldr	r1, [pc, #244]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d022      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac8:	d11d      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002aca:	4b36      	ldr	r3, [pc, #216]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	0e1b      	lsrs	r3, r3, #24
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ad8:	4b32      	ldr	r3, [pc, #200]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	0f1b      	lsrs	r3, r3, #28
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	019a      	lsls	r2, r3, #6
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	041b      	lsls	r3, r3, #16
 8002af2:	431a      	orrs	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	061b      	lsls	r3, r3, #24
 8002af8:	431a      	orrs	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	071b      	lsls	r3, r3, #28
 8002afe:	4929      	ldr	r1, [pc, #164]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0308 	and.w	r3, r3, #8
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d028      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	0e1b      	lsrs	r3, r3, #24
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	019a      	lsls	r2, r3, #6
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	061b      	lsls	r3, r3, #24
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69db      	ldr	r3, [r3, #28]
 8002b44:	071b      	lsls	r3, r3, #28
 8002b46:	4917      	ldr	r1, [pc, #92]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b4e:	4b15      	ldr	r3, [pc, #84]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	4911      	ldr	r1, [pc, #68]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a0e      	ldr	r2, [pc, #56]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b70:	f7fe fb86 	bl	8001280 <HAL_GetTick>
 8002b74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b78:	f7fe fb82 	bl	8001280 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b64      	cmp	r3, #100	; 0x64
 8002b84:	d901      	bls.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e007      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b8a:	4b06      	ldr	r3, [pc, #24]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b96:	d1ef      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3720      	adds	r7, #32
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40023800 	.word	0x40023800

08002ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e049      	b.n	8002c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fe fa20 	bl	8001014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3304      	adds	r3, #4
 8002be4:	4619      	mov	r1, r3
 8002be6:	4610      	mov	r0, r2
 8002be8:	f000 faee 	bl	80031c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
	...

08002c58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d001      	beq.n	8002c70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e054      	b.n	8002d1a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a26      	ldr	r2, [pc, #152]	; (8002d28 <HAL_TIM_Base_Start_IT+0xd0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d022      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x80>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9a:	d01d      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x80>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a22      	ldr	r2, [pc, #136]	; (8002d2c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d018      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x80>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a21      	ldr	r2, [pc, #132]	; (8002d30 <HAL_TIM_Base_Start_IT+0xd8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d013      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x80>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_TIM_Base_Start_IT+0xdc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x80>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1e      	ldr	r2, [pc, #120]	; (8002d38 <HAL_TIM_Base_Start_IT+0xe0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d009      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x80>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a1c      	ldr	r2, [pc, #112]	; (8002d3c <HAL_TIM_Base_Start_IT+0xe4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d004      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x80>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a1b      	ldr	r2, [pc, #108]	; (8002d40 <HAL_TIM_Base_Start_IT+0xe8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d115      	bne.n	8002d04 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <HAL_TIM_Base_Start_IT+0xec>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d015      	beq.n	8002d16 <HAL_TIM_Base_Start_IT+0xbe>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf0:	d011      	beq.n	8002d16 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d02:	e008      	b.n	8002d16 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e000      	b.n	8002d18 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40010000 	.word	0x40010000
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40000800 	.word	0x40000800
 8002d34:	40000c00 	.word	0x40000c00
 8002d38:	40010400 	.word	0x40010400
 8002d3c:	40014000 	.word	0x40014000
 8002d40:	40001800 	.word	0x40001800
 8002d44:	00010007 	.word	0x00010007

08002d48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6a1a      	ldr	r2, [r3, #32]
 8002d66:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10f      	bne.n	8002d90 <HAL_TIM_Base_Stop_IT+0x48>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	f240 4344 	movw	r3, #1092	; 0x444
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d107      	bne.n	8002d90 <HAL_TIM_Base_Stop_IT+0x48>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f022 0201 	bic.w	r2, r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d122      	bne.n	8002e02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d11b      	bne.n	8002e02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f06f 0202 	mvn.w	r2, #2
 8002dd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f9cf 	bl	800318c <HAL_TIM_IC_CaptureCallback>
 8002dee:	e005      	b.n	8002dfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f9c1 	bl	8003178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f9d2 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d122      	bne.n	8002e56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d11b      	bne.n	8002e56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f06f 0204 	mvn.w	r2, #4
 8002e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f9a5 	bl	800318c <HAL_TIM_IC_CaptureCallback>
 8002e42:	e005      	b.n	8002e50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f997 	bl	8003178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f000 f9a8 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b08      	cmp	r3, #8
 8002e62:	d122      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d11b      	bne.n	8002eaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f06f 0208 	mvn.w	r2, #8
 8002e7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2204      	movs	r2, #4
 8002e80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f97b 	bl	800318c <HAL_TIM_IC_CaptureCallback>
 8002e96:	e005      	b.n	8002ea4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f96d 	bl	8003178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f97e 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	f003 0310 	and.w	r3, r3, #16
 8002eb4:	2b10      	cmp	r3, #16
 8002eb6:	d122      	bne.n	8002efe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0310 	and.w	r3, r3, #16
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d11b      	bne.n	8002efe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f06f 0210 	mvn.w	r2, #16
 8002ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69db      	ldr	r3, [r3, #28]
 8002edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d003      	beq.n	8002eec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f951 	bl	800318c <HAL_TIM_IC_CaptureCallback>
 8002eea:	e005      	b.n	8002ef8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 f943 	bl	8003178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 f954 	bl	80031a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d10e      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d107      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f06f 0201 	mvn.w	r2, #1
 8002f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7fd fca1 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f34:	2b80      	cmp	r3, #128	; 0x80
 8002f36:	d10e      	bne.n	8002f56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f42:	2b80      	cmp	r3, #128	; 0x80
 8002f44:	d107      	bne.n	8002f56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fb0b 	bl	800356c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f64:	d10e      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f70:	2b80      	cmp	r3, #128	; 0x80
 8002f72:	d107      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 fafe 	bl	8003580 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f8e:	2b40      	cmp	r3, #64	; 0x40
 8002f90:	d10e      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b40      	cmp	r3, #64	; 0x40
 8002f9e:	d107      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f902 	bl	80031b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b20      	cmp	r3, #32
 8002fbc:	d10e      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d107      	bne.n	8002fdc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f06f 0220 	mvn.w	r2, #32
 8002fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fabe 	bl	8003558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_TIM_ConfigClockSource+0x1c>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0b4      	b.n	800316a <HAL_TIM_ConfigClockSource+0x186>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	4b56      	ldr	r3, [pc, #344]	; (8003174 <HAL_TIM_ConfigClockSource+0x190>)
 800301c:	4013      	ands	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003026:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003038:	d03e      	beq.n	80030b8 <HAL_TIM_ConfigClockSource+0xd4>
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303e:	f200 8087 	bhi.w	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003042:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003046:	f000 8086 	beq.w	8003156 <HAL_TIM_ConfigClockSource+0x172>
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304e:	d87f      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003050:	2b70      	cmp	r3, #112	; 0x70
 8003052:	d01a      	beq.n	800308a <HAL_TIM_ConfigClockSource+0xa6>
 8003054:	2b70      	cmp	r3, #112	; 0x70
 8003056:	d87b      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003058:	2b60      	cmp	r3, #96	; 0x60
 800305a:	d050      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x11a>
 800305c:	2b60      	cmp	r3, #96	; 0x60
 800305e:	d877      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003060:	2b50      	cmp	r3, #80	; 0x50
 8003062:	d03c      	beq.n	80030de <HAL_TIM_ConfigClockSource+0xfa>
 8003064:	2b50      	cmp	r3, #80	; 0x50
 8003066:	d873      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d058      	beq.n	800311e <HAL_TIM_ConfigClockSource+0x13a>
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d86f      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003070:	2b30      	cmp	r3, #48	; 0x30
 8003072:	d064      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003074:	2b30      	cmp	r3, #48	; 0x30
 8003076:	d86b      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003078:	2b20      	cmp	r3, #32
 800307a:	d060      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 800307c:	2b20      	cmp	r3, #32
 800307e:	d867      	bhi.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d05c      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003084:	2b10      	cmp	r3, #16
 8003086:	d05a      	beq.n	800313e <HAL_TIM_ConfigClockSource+0x15a>
 8003088:	e062      	b.n	8003150 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800309a:	f000 f9af 	bl	80033fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	609a      	str	r2, [r3, #8]
      break;
 80030b6:	e04f      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80030c8:	f000 f998 	bl	80033fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689a      	ldr	r2, [r3, #8]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030da:	609a      	str	r2, [r3, #8]
      break;
 80030dc:	e03c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	461a      	mov	r2, r3
 80030ec:	f000 f90c 	bl	8003308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2150      	movs	r1, #80	; 0x50
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 f965 	bl	80033c6 <TIM_ITRx_SetConfig>
      break;
 80030fc:	e02c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800310a:	461a      	mov	r2, r3
 800310c:	f000 f92b 	bl	8003366 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2160      	movs	r1, #96	; 0x60
 8003116:	4618      	mov	r0, r3
 8003118:	f000 f955 	bl	80033c6 <TIM_ITRx_SetConfig>
      break;
 800311c:	e01c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800312a:	461a      	mov	r2, r3
 800312c:	f000 f8ec 	bl	8003308 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f945 	bl	80033c6 <TIM_ITRx_SetConfig>
      break;
 800313c:	e00c      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f000 f93c 	bl	80033c6 <TIM_ITRx_SetConfig>
      break;
 800314e:	e003      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	73fb      	strb	r3, [r7, #15]
      break;
 8003154:	e000      	b.n	8003158 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003156:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	fffeff88 	.word	0xfffeff88

08003178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a40      	ldr	r2, [pc, #256]	; (80032dc <TIM_Base_SetConfig+0x114>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e6:	d00f      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a3d      	ldr	r2, [pc, #244]	; (80032e0 <TIM_Base_SetConfig+0x118>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00b      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a3c      	ldr	r2, [pc, #240]	; (80032e4 <TIM_Base_SetConfig+0x11c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3b      	ldr	r2, [pc, #236]	; (80032e8 <TIM_Base_SetConfig+0x120>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_Base_SetConfig+0x40>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a3a      	ldr	r2, [pc, #232]	; (80032ec <TIM_Base_SetConfig+0x124>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d108      	bne.n	800321a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800320e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2f      	ldr	r2, [pc, #188]	; (80032dc <TIM_Base_SetConfig+0x114>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d02b      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003228:	d027      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a2c      	ldr	r2, [pc, #176]	; (80032e0 <TIM_Base_SetConfig+0x118>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d023      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a2b      	ldr	r2, [pc, #172]	; (80032e4 <TIM_Base_SetConfig+0x11c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01f      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a2a      	ldr	r2, [pc, #168]	; (80032e8 <TIM_Base_SetConfig+0x120>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01b      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a29      	ldr	r2, [pc, #164]	; (80032ec <TIM_Base_SetConfig+0x124>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d017      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a28      	ldr	r2, [pc, #160]	; (80032f0 <TIM_Base_SetConfig+0x128>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a27      	ldr	r2, [pc, #156]	; (80032f4 <TIM_Base_SetConfig+0x12c>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00f      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a26      	ldr	r2, [pc, #152]	; (80032f8 <TIM_Base_SetConfig+0x130>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00b      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a25      	ldr	r2, [pc, #148]	; (80032fc <TIM_Base_SetConfig+0x134>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d007      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a24      	ldr	r2, [pc, #144]	; (8003300 <TIM_Base_SetConfig+0x138>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d003      	beq.n	800327a <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a23      	ldr	r2, [pc, #140]	; (8003304 <TIM_Base_SetConfig+0x13c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d108      	bne.n	800328c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4313      	orrs	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	689a      	ldr	r2, [r3, #8]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a0a      	ldr	r2, [pc, #40]	; (80032dc <TIM_Base_SetConfig+0x114>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d003      	beq.n	80032c0 <TIM_Base_SetConfig+0xf8>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0c      	ldr	r2, [pc, #48]	; (80032ec <TIM_Base_SetConfig+0x124>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	615a      	str	r2, [r3, #20]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40010000 	.word	0x40010000
 80032e0:	40000400 	.word	0x40000400
 80032e4:	40000800 	.word	0x40000800
 80032e8:	40000c00 	.word	0x40000c00
 80032ec:	40010400 	.word	0x40010400
 80032f0:	40014000 	.word	0x40014000
 80032f4:	40014400 	.word	0x40014400
 80032f8:	40014800 	.word	0x40014800
 80032fc:	40001800 	.word	0x40001800
 8003300:	40001c00 	.word	0x40001c00
 8003304:	40002000 	.word	0x40002000

08003308 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	f023 0201 	bic.w	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003332:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	f023 030a 	bic.w	r3, r3, #10
 8003344:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	621a      	str	r2, [r3, #32]
}
 800335a:	bf00      	nop
 800335c:	371c      	adds	r7, #28
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003366:	b480      	push	{r7}
 8003368:	b087      	sub	sp, #28
 800336a:	af00      	add	r7, sp, #0
 800336c:	60f8      	str	r0, [r7, #12]
 800336e:	60b9      	str	r1, [r7, #8]
 8003370:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	f023 0210 	bic.w	r2, r3, #16
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003390:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	031b      	lsls	r3, r3, #12
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	011b      	lsls	r3, r3, #4
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	bf00      	nop
 80033bc:	371c      	adds	r7, #28
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f043 0307 	orr.w	r3, r3, #7
 80033e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	609a      	str	r2, [r3, #8]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	021a      	lsls	r2, r3, #8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	431a      	orrs	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	609a      	str	r2, [r3, #8]
}
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003450:	2302      	movs	r3, #2
 8003452:	e06d      	b.n	8003530 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a30      	ldr	r2, [pc, #192]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d004      	beq.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a2f      	ldr	r2, [pc, #188]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d108      	bne.n	800349a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800348e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a20      	ldr	r2, [pc, #128]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d022      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034c6:	d01d      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a1d      	ldr	r2, [pc, #116]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d018      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a1c      	ldr	r2, [pc, #112]	; (8003548 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d013      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1a      	ldr	r2, [pc, #104]	; (800354c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00e      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a15      	ldr	r2, [pc, #84]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d009      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a16      	ldr	r2, [pc, #88]	; (8003550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d004      	beq.n	8003504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a15      	ldr	r2, [pc, #84]	; (8003554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d10c      	bne.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	4313      	orrs	r3, r2
 8003514:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40010000 	.word	0x40010000
 8003540:	40010400 	.word	0x40010400
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40014000 	.word	0x40014000
 8003554:	40001800 	.word	0x40001800

08003558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e040      	b.n	8003628 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d106      	bne.n	80035bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7fd fd80 	bl	80010bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2224      	movs	r2, #36	; 0x24
 80035c0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 fba2 	bl	8003d1c <UART_SetConfig>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e022      	b.n	8003628 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fdfa 	bl	80041e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800360e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fe81 	bl	8004328 <UART_CheckIdleState>
 8003626:	4603      	mov	r3, r0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08a      	sub	sp, #40	; 0x28
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003644:	2b20      	cmp	r3, #32
 8003646:	d171      	bne.n	800372c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <HAL_UART_Transmit+0x24>
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e06a      	b.n	800372e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2221      	movs	r2, #33	; 0x21
 8003664:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003666:	f7fd fe0b 	bl	8001280 <HAL_GetTick>
 800366a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	88fa      	ldrh	r2, [r7, #6]
 8003670:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	88fa      	ldrh	r2, [r7, #6]
 8003678:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003684:	d108      	bne.n	8003698 <HAL_UART_Transmit+0x68>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d104      	bne.n	8003698 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800368e:	2300      	movs	r3, #0
 8003690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	61bb      	str	r3, [r7, #24]
 8003696:	e003      	b.n	80036a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036a0:	e02c      	b.n	80036fc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2180      	movs	r1, #128	; 0x80
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fe72 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e038      	b.n	800372e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10b      	bne.n	80036da <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	3302      	adds	r3, #2
 80036d6:	61bb      	str	r3, [r7, #24]
 80036d8:	e007      	b.n	80036ea <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	3301      	adds	r3, #1
 80036e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1cc      	bne.n	80036a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	9300      	str	r3, [sp, #0]
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2200      	movs	r2, #0
 8003710:	2140      	movs	r1, #64	; 0x40
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	f000 fe3f 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e005      	b.n	800372e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
	...

08003738 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b0ba      	sub	sp, #232	; 0xe8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800375e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003762:	f640 030f 	movw	r3, #2063	; 0x80f
 8003766:	4013      	ands	r3, r2
 8003768:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800376c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d115      	bne.n	80037a0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00f      	beq.n	80037a0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d009      	beq.n	80037a0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8297 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	4798      	blx	r3
      }
      return;
 800379e:	e291      	b.n	8003cc4 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8117 	beq.w	80039d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80037aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80037ba:	4b85      	ldr	r3, [pc, #532]	; (80039d0 <HAL_UART_IRQHandler+0x298>)
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 810a 	beq.w	80039d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d011      	beq.n	80037f4 <HAL_UART_IRQHandler+0xbc>
 80037d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00b      	beq.n	80037f4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2201      	movs	r2, #1
 80037e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ea:	f043 0201 	orr.w	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d011      	beq.n	8003824 <HAL_UART_IRQHandler+0xec>
 8003800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2202      	movs	r2, #2
 8003812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381a:	f043 0204 	orr.w	r2, r3, #4
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d011      	beq.n	8003854 <HAL_UART_IRQHandler+0x11c>
 8003830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00b      	beq.n	8003854 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2204      	movs	r2, #4
 8003842:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800384a:	f043 0202 	orr.w	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d017      	beq.n	8003890 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b00      	cmp	r3, #0
 800386a:	d105      	bne.n	8003878 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800386c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003870:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00b      	beq.n	8003890 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2208      	movs	r2, #8
 800387e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003886:	f043 0208 	orr.w	r2, r3, #8
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003898:	2b00      	cmp	r3, #0
 800389a:	d012      	beq.n	80038c2 <HAL_UART_IRQHandler+0x18a>
 800389c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00c      	beq.n	80038c2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038b8:	f043 0220 	orr.w	r2, r3, #32
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 81fd 	beq.w	8003cc8 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038d2:	f003 0320 	and.w	r3, r3, #32
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00d      	beq.n	80038f6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038de:	f003 0320 	and.w	r3, r3, #32
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d007      	beq.n	80038f6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800390a:	2b40      	cmp	r3, #64	; 0x40
 800390c:	d005      	beq.n	800391a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800390e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003912:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003916:	2b00      	cmp	r3, #0
 8003918:	d04f      	beq.n	80039ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 fe01 	bl	8004522 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d141      	bne.n	80039b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3308      	adds	r3, #8
 8003934:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800394c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800395a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800395e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003962:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003966:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1d9      	bne.n	800392e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800397e:	2b00      	cmp	r3, #0
 8003980:	d013      	beq.n	80039aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003986:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <HAL_UART_IRQHandler+0x29c>)
 8003988:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd fe27 	bl	80015e2 <HAL_DMA_Abort_IT>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d017      	beq.n	80039ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039a4:	4610      	mov	r0, r2
 80039a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	e00f      	b.n	80039ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f9a0 	bl	8003cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b0:	e00b      	b.n	80039ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f99c 	bl	8003cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039b8:	e007      	b.n	80039ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f998 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80039c8:	e17e      	b.n	8003cc8 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ca:	bf00      	nop
    return;
 80039cc:	e17c      	b.n	8003cc8 <HAL_UART_IRQHandler+0x590>
 80039ce:	bf00      	nop
 80039d0:	04000120 	.word	0x04000120
 80039d4:	080045eb 	.word	0x080045eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039dc:	2b01      	cmp	r3, #1
 80039de:	f040 814c 	bne.w	8003c7a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e6:	f003 0310 	and.w	r3, r3, #16
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f000 8145 	beq.w	8003c7a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039f4:	f003 0310 	and.w	r3, r3, #16
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f000 813e 	beq.w	8003c7a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2210      	movs	r2, #16
 8003a04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	f040 80b6 	bne.w	8003b82 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a22:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 8150 	beq.w	8003ccc <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a36:	429a      	cmp	r2, r3
 8003a38:	f080 8148 	bcs.w	8003ccc <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a50:	f000 8086 	beq.w	8003b60 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a60:	e853 3f00 	ldrex	r3, [r3]
 8003a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a68:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003a7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a82:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a86:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003a8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003a96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1da      	bne.n	8003a54 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003aae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3308      	adds	r3, #8
 8003abe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003ac2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003ac6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003aca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e1      	bne.n	8003a9e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	3308      	adds	r3, #8
 8003ae0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003aea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	3308      	adds	r3, #8
 8003afa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003afe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b00:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b04:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e3      	bne.n	8003ada <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2220      	movs	r2, #32
 8003b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b30:	f023 0310 	bic.w	r3, r3, #16
 8003b34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b42:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b44:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e4      	bne.n	8003b20 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd fcd1 	bl	8001502 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8c2 	bl	8003d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003b80:	e0a4      	b.n	8003ccc <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 8096 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8003ba4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 8091 	beq.w	8003cd0 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb6:	e853 3f00 	ldrex	r3, [r3]
 8003bba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8003bd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e4      	bne.n	8003bae <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	f023 0301 	bic.w	r3, r3, #1
 8003bfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3308      	adds	r3, #8
 8003c04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c08:	633a      	str	r2, [r7, #48]	; 0x30
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c10:	e841 2300 	strex	r3, r2, [r1]
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1e3      	bne.n	8003be4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f023 0310 	bic.w	r3, r3, #16
 8003c44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	69b9      	ldr	r1, [r7, #24]
 8003c58:	69fa      	ldr	r2, [r7, #28]
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e4      	bne.n	8003c30 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c70:	4619      	mov	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f846 	bl	8003d04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003c78:	e02a      	b.n	8003cd0 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d00e      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01c      	beq.n	8003cd4 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
    }
    return;
 8003ca2:	e017      	b.n	8003cd4 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d012      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x59e>
 8003cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00c      	beq.n	8003cd6 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 fcaa 	bl	8004616 <UART_EndTransmit_IT>
    return;
 8003cc2:	e008      	b.n	8003cd6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003cc4:	bf00      	nop
 8003cc6:	e006      	b.n	8003cd6 <HAL_UART_IRQHandler+0x59e>
    return;
 8003cc8:	bf00      	nop
 8003cca:	e004      	b.n	8003cd6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003ccc:	bf00      	nop
 8003cce:	e002      	b.n	8003cd6 <HAL_UART_IRQHandler+0x59e>
      return;
 8003cd0:	bf00      	nop
 8003cd2:	e000      	b.n	8003cd6 <HAL_UART_IRQHandler+0x59e>
    return;
 8003cd4:	bf00      	nop
  }

}
 8003cd6:	37e8      	adds	r7, #232	; 0xe8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b088      	sub	sp, #32
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4ba6      	ldr	r3, [pc, #664]	; (8003fe0 <UART_SetConfig+0x2c4>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	6979      	ldr	r1, [r7, #20]
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68da      	ldr	r2, [r3, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a94      	ldr	r2, [pc, #592]	; (8003fe4 <UART_SetConfig+0x2c8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d120      	bne.n	8003dda <UART_SetConfig+0xbe>
 8003d98:	4b93      	ldr	r3, [pc, #588]	; (8003fe8 <UART_SetConfig+0x2cc>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	f003 0303 	and.w	r3, r3, #3
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d816      	bhi.n	8003dd4 <UART_SetConfig+0xb8>
 8003da6:	a201      	add	r2, pc, #4	; (adr r2, 8003dac <UART_SetConfig+0x90>)
 8003da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dac:	08003dbd 	.word	0x08003dbd
 8003db0:	08003dc9 	.word	0x08003dc9
 8003db4:	08003dc3 	.word	0x08003dc3
 8003db8:	08003dcf 	.word	0x08003dcf
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	77fb      	strb	r3, [r7, #31]
 8003dc0:	e150      	b.n	8004064 <UART_SetConfig+0x348>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	77fb      	strb	r3, [r7, #31]
 8003dc6:	e14d      	b.n	8004064 <UART_SetConfig+0x348>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	77fb      	strb	r3, [r7, #31]
 8003dcc:	e14a      	b.n	8004064 <UART_SetConfig+0x348>
 8003dce:	2308      	movs	r3, #8
 8003dd0:	77fb      	strb	r3, [r7, #31]
 8003dd2:	e147      	b.n	8004064 <UART_SetConfig+0x348>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	77fb      	strb	r3, [r7, #31]
 8003dd8:	e144      	b.n	8004064 <UART_SetConfig+0x348>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a83      	ldr	r2, [pc, #524]	; (8003fec <UART_SetConfig+0x2d0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d132      	bne.n	8003e4a <UART_SetConfig+0x12e>
 8003de4:	4b80      	ldr	r3, [pc, #512]	; (8003fe8 <UART_SetConfig+0x2cc>)
 8003de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dea:	f003 030c 	and.w	r3, r3, #12
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d828      	bhi.n	8003e44 <UART_SetConfig+0x128>
 8003df2:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <UART_SetConfig+0xdc>)
 8003df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003e45 	.word	0x08003e45
 8003e00:	08003e45 	.word	0x08003e45
 8003e04:	08003e45 	.word	0x08003e45
 8003e08:	08003e39 	.word	0x08003e39
 8003e0c:	08003e45 	.word	0x08003e45
 8003e10:	08003e45 	.word	0x08003e45
 8003e14:	08003e45 	.word	0x08003e45
 8003e18:	08003e33 	.word	0x08003e33
 8003e1c:	08003e45 	.word	0x08003e45
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e45 	.word	0x08003e45
 8003e28:	08003e3f 	.word	0x08003e3f
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	77fb      	strb	r3, [r7, #31]
 8003e30:	e118      	b.n	8004064 <UART_SetConfig+0x348>
 8003e32:	2302      	movs	r3, #2
 8003e34:	77fb      	strb	r3, [r7, #31]
 8003e36:	e115      	b.n	8004064 <UART_SetConfig+0x348>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e112      	b.n	8004064 <UART_SetConfig+0x348>
 8003e3e:	2308      	movs	r3, #8
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e10f      	b.n	8004064 <UART_SetConfig+0x348>
 8003e44:	2310      	movs	r3, #16
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e10c      	b.n	8004064 <UART_SetConfig+0x348>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a68      	ldr	r2, [pc, #416]	; (8003ff0 <UART_SetConfig+0x2d4>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d120      	bne.n	8003e96 <UART_SetConfig+0x17a>
 8003e54:	4b64      	ldr	r3, [pc, #400]	; (8003fe8 <UART_SetConfig+0x2cc>)
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e5e:	2b30      	cmp	r3, #48	; 0x30
 8003e60:	d013      	beq.n	8003e8a <UART_SetConfig+0x16e>
 8003e62:	2b30      	cmp	r3, #48	; 0x30
 8003e64:	d814      	bhi.n	8003e90 <UART_SetConfig+0x174>
 8003e66:	2b20      	cmp	r3, #32
 8003e68:	d009      	beq.n	8003e7e <UART_SetConfig+0x162>
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d810      	bhi.n	8003e90 <UART_SetConfig+0x174>
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d002      	beq.n	8003e78 <UART_SetConfig+0x15c>
 8003e72:	2b10      	cmp	r3, #16
 8003e74:	d006      	beq.n	8003e84 <UART_SetConfig+0x168>
 8003e76:	e00b      	b.n	8003e90 <UART_SetConfig+0x174>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	77fb      	strb	r3, [r7, #31]
 8003e7c:	e0f2      	b.n	8004064 <UART_SetConfig+0x348>
 8003e7e:	2302      	movs	r3, #2
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e0ef      	b.n	8004064 <UART_SetConfig+0x348>
 8003e84:	2304      	movs	r3, #4
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e0ec      	b.n	8004064 <UART_SetConfig+0x348>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	e0e9      	b.n	8004064 <UART_SetConfig+0x348>
 8003e90:	2310      	movs	r3, #16
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e0e6      	b.n	8004064 <UART_SetConfig+0x348>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a56      	ldr	r2, [pc, #344]	; (8003ff4 <UART_SetConfig+0x2d8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d120      	bne.n	8003ee2 <UART_SetConfig+0x1c6>
 8003ea0:	4b51      	ldr	r3, [pc, #324]	; (8003fe8 <UART_SetConfig+0x2cc>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8003eac:	d013      	beq.n	8003ed6 <UART_SetConfig+0x1ba>
 8003eae:	2bc0      	cmp	r3, #192	; 0xc0
 8003eb0:	d814      	bhi.n	8003edc <UART_SetConfig+0x1c0>
 8003eb2:	2b80      	cmp	r3, #128	; 0x80
 8003eb4:	d009      	beq.n	8003eca <UART_SetConfig+0x1ae>
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d810      	bhi.n	8003edc <UART_SetConfig+0x1c0>
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <UART_SetConfig+0x1a8>
 8003ebe:	2b40      	cmp	r3, #64	; 0x40
 8003ec0:	d006      	beq.n	8003ed0 <UART_SetConfig+0x1b4>
 8003ec2:	e00b      	b.n	8003edc <UART_SetConfig+0x1c0>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77fb      	strb	r3, [r7, #31]
 8003ec8:	e0cc      	b.n	8004064 <UART_SetConfig+0x348>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	77fb      	strb	r3, [r7, #31]
 8003ece:	e0c9      	b.n	8004064 <UART_SetConfig+0x348>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e0c6      	b.n	8004064 <UART_SetConfig+0x348>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	77fb      	strb	r3, [r7, #31]
 8003eda:	e0c3      	b.n	8004064 <UART_SetConfig+0x348>
 8003edc:	2310      	movs	r3, #16
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e0c0      	b.n	8004064 <UART_SetConfig+0x348>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a44      	ldr	r2, [pc, #272]	; (8003ff8 <UART_SetConfig+0x2dc>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d125      	bne.n	8003f38 <UART_SetConfig+0x21c>
 8003eec:	4b3e      	ldr	r3, [pc, #248]	; (8003fe8 <UART_SetConfig+0x2cc>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003efa:	d017      	beq.n	8003f2c <UART_SetConfig+0x210>
 8003efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f00:	d817      	bhi.n	8003f32 <UART_SetConfig+0x216>
 8003f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f06:	d00b      	beq.n	8003f20 <UART_SetConfig+0x204>
 8003f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0c:	d811      	bhi.n	8003f32 <UART_SetConfig+0x216>
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <UART_SetConfig+0x1fe>
 8003f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f16:	d006      	beq.n	8003f26 <UART_SetConfig+0x20a>
 8003f18:	e00b      	b.n	8003f32 <UART_SetConfig+0x216>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	77fb      	strb	r3, [r7, #31]
 8003f1e:	e0a1      	b.n	8004064 <UART_SetConfig+0x348>
 8003f20:	2302      	movs	r3, #2
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e09e      	b.n	8004064 <UART_SetConfig+0x348>
 8003f26:	2304      	movs	r3, #4
 8003f28:	77fb      	strb	r3, [r7, #31]
 8003f2a:	e09b      	b.n	8004064 <UART_SetConfig+0x348>
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	77fb      	strb	r3, [r7, #31]
 8003f30:	e098      	b.n	8004064 <UART_SetConfig+0x348>
 8003f32:	2310      	movs	r3, #16
 8003f34:	77fb      	strb	r3, [r7, #31]
 8003f36:	e095      	b.n	8004064 <UART_SetConfig+0x348>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2f      	ldr	r2, [pc, #188]	; (8003ffc <UART_SetConfig+0x2e0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d125      	bne.n	8003f8e <UART_SetConfig+0x272>
 8003f42:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <UART_SetConfig+0x2cc>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f50:	d017      	beq.n	8003f82 <UART_SetConfig+0x266>
 8003f52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f56:	d817      	bhi.n	8003f88 <UART_SetConfig+0x26c>
 8003f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5c:	d00b      	beq.n	8003f76 <UART_SetConfig+0x25a>
 8003f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f62:	d811      	bhi.n	8003f88 <UART_SetConfig+0x26c>
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d003      	beq.n	8003f70 <UART_SetConfig+0x254>
 8003f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6c:	d006      	beq.n	8003f7c <UART_SetConfig+0x260>
 8003f6e:	e00b      	b.n	8003f88 <UART_SetConfig+0x26c>
 8003f70:	2301      	movs	r3, #1
 8003f72:	77fb      	strb	r3, [r7, #31]
 8003f74:	e076      	b.n	8004064 <UART_SetConfig+0x348>
 8003f76:	2302      	movs	r3, #2
 8003f78:	77fb      	strb	r3, [r7, #31]
 8003f7a:	e073      	b.n	8004064 <UART_SetConfig+0x348>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	77fb      	strb	r3, [r7, #31]
 8003f80:	e070      	b.n	8004064 <UART_SetConfig+0x348>
 8003f82:	2308      	movs	r3, #8
 8003f84:	77fb      	strb	r3, [r7, #31]
 8003f86:	e06d      	b.n	8004064 <UART_SetConfig+0x348>
 8003f88:	2310      	movs	r3, #16
 8003f8a:	77fb      	strb	r3, [r7, #31]
 8003f8c:	e06a      	b.n	8004064 <UART_SetConfig+0x348>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <UART_SetConfig+0x2e4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d138      	bne.n	800400a <UART_SetConfig+0x2ee>
 8003f98:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <UART_SetConfig+0x2cc>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003fa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fa6:	d017      	beq.n	8003fd8 <UART_SetConfig+0x2bc>
 8003fa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003fac:	d82a      	bhi.n	8004004 <UART_SetConfig+0x2e8>
 8003fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb2:	d00b      	beq.n	8003fcc <UART_SetConfig+0x2b0>
 8003fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb8:	d824      	bhi.n	8004004 <UART_SetConfig+0x2e8>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <UART_SetConfig+0x2aa>
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc2:	d006      	beq.n	8003fd2 <UART_SetConfig+0x2b6>
 8003fc4:	e01e      	b.n	8004004 <UART_SetConfig+0x2e8>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	77fb      	strb	r3, [r7, #31]
 8003fca:	e04b      	b.n	8004064 <UART_SetConfig+0x348>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	77fb      	strb	r3, [r7, #31]
 8003fd0:	e048      	b.n	8004064 <UART_SetConfig+0x348>
 8003fd2:	2304      	movs	r3, #4
 8003fd4:	77fb      	strb	r3, [r7, #31]
 8003fd6:	e045      	b.n	8004064 <UART_SetConfig+0x348>
 8003fd8:	2308      	movs	r3, #8
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e042      	b.n	8004064 <UART_SetConfig+0x348>
 8003fde:	bf00      	nop
 8003fe0:	efff69f3 	.word	0xefff69f3
 8003fe4:	40011000 	.word	0x40011000
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40004400 	.word	0x40004400
 8003ff0:	40004800 	.word	0x40004800
 8003ff4:	40004c00 	.word	0x40004c00
 8003ff8:	40005000 	.word	0x40005000
 8003ffc:	40011400 	.word	0x40011400
 8004000:	40007800 	.word	0x40007800
 8004004:	2310      	movs	r3, #16
 8004006:	77fb      	strb	r3, [r7, #31]
 8004008:	e02c      	b.n	8004064 <UART_SetConfig+0x348>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a72      	ldr	r2, [pc, #456]	; (80041d8 <UART_SetConfig+0x4bc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d125      	bne.n	8004060 <UART_SetConfig+0x344>
 8004014:	4b71      	ldr	r3, [pc, #452]	; (80041dc <UART_SetConfig+0x4c0>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800401e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004022:	d017      	beq.n	8004054 <UART_SetConfig+0x338>
 8004024:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004028:	d817      	bhi.n	800405a <UART_SetConfig+0x33e>
 800402a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800402e:	d00b      	beq.n	8004048 <UART_SetConfig+0x32c>
 8004030:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004034:	d811      	bhi.n	800405a <UART_SetConfig+0x33e>
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <UART_SetConfig+0x326>
 800403a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800403e:	d006      	beq.n	800404e <UART_SetConfig+0x332>
 8004040:	e00b      	b.n	800405a <UART_SetConfig+0x33e>
 8004042:	2300      	movs	r3, #0
 8004044:	77fb      	strb	r3, [r7, #31]
 8004046:	e00d      	b.n	8004064 <UART_SetConfig+0x348>
 8004048:	2302      	movs	r3, #2
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e00a      	b.n	8004064 <UART_SetConfig+0x348>
 800404e:	2304      	movs	r3, #4
 8004050:	77fb      	strb	r3, [r7, #31]
 8004052:	e007      	b.n	8004064 <UART_SetConfig+0x348>
 8004054:	2308      	movs	r3, #8
 8004056:	77fb      	strb	r3, [r7, #31]
 8004058:	e004      	b.n	8004064 <UART_SetConfig+0x348>
 800405a:	2310      	movs	r3, #16
 800405c:	77fb      	strb	r3, [r7, #31]
 800405e:	e001      	b.n	8004064 <UART_SetConfig+0x348>
 8004060:	2310      	movs	r3, #16
 8004062:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800406c:	d15b      	bne.n	8004126 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800406e:	7ffb      	ldrb	r3, [r7, #31]
 8004070:	2b08      	cmp	r3, #8
 8004072:	d828      	bhi.n	80040c6 <UART_SetConfig+0x3aa>
 8004074:	a201      	add	r2, pc, #4	; (adr r2, 800407c <UART_SetConfig+0x360>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	080040a1 	.word	0x080040a1
 8004080:	080040a9 	.word	0x080040a9
 8004084:	080040b1 	.word	0x080040b1
 8004088:	080040c7 	.word	0x080040c7
 800408c:	080040b7 	.word	0x080040b7
 8004090:	080040c7 	.word	0x080040c7
 8004094:	080040c7 	.word	0x080040c7
 8004098:	080040c7 	.word	0x080040c7
 800409c:	080040bf 	.word	0x080040bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a0:	f7fe f96a 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 80040a4:	61b8      	str	r0, [r7, #24]
        break;
 80040a6:	e013      	b.n	80040d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a8:	f7fe f97a 	bl	80023a0 <HAL_RCC_GetPCLK2Freq>
 80040ac:	61b8      	str	r0, [r7, #24]
        break;
 80040ae:	e00f      	b.n	80040d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040b0:	4b4b      	ldr	r3, [pc, #300]	; (80041e0 <UART_SetConfig+0x4c4>)
 80040b2:	61bb      	str	r3, [r7, #24]
        break;
 80040b4:	e00c      	b.n	80040d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b6:	f7fe f84d 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 80040ba:	61b8      	str	r0, [r7, #24]
        break;
 80040bc:	e008      	b.n	80040d0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c2:	61bb      	str	r3, [r7, #24]
        break;
 80040c4:	e004      	b.n	80040d0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	77bb      	strb	r3, [r7, #30]
        break;
 80040ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d074      	beq.n	80041c0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	005a      	lsls	r2, r3, #1
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	085b      	lsrs	r3, r3, #1
 80040e0:	441a      	add	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	d916      	bls.n	8004120 <UART_SetConfig+0x404>
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	d212      	bcs.n	8004120 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f023 030f 	bic.w	r3, r3, #15
 8004102:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	085b      	lsrs	r3, r3, #1
 8004108:	b29b      	uxth	r3, r3
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	b29a      	uxth	r2, r3
 8004110:	89fb      	ldrh	r3, [r7, #14]
 8004112:	4313      	orrs	r3, r2
 8004114:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	89fa      	ldrh	r2, [r7, #14]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	e04f      	b.n	80041c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	77bb      	strb	r3, [r7, #30]
 8004124:	e04c      	b.n	80041c0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004126:	7ffb      	ldrb	r3, [r7, #31]
 8004128:	2b08      	cmp	r3, #8
 800412a:	d828      	bhi.n	800417e <UART_SetConfig+0x462>
 800412c:	a201      	add	r2, pc, #4	; (adr r2, 8004134 <UART_SetConfig+0x418>)
 800412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004132:	bf00      	nop
 8004134:	08004159 	.word	0x08004159
 8004138:	08004161 	.word	0x08004161
 800413c:	08004169 	.word	0x08004169
 8004140:	0800417f 	.word	0x0800417f
 8004144:	0800416f 	.word	0x0800416f
 8004148:	0800417f 	.word	0x0800417f
 800414c:	0800417f 	.word	0x0800417f
 8004150:	0800417f 	.word	0x0800417f
 8004154:	08004177 	.word	0x08004177
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004158:	f7fe f90e 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 800415c:	61b8      	str	r0, [r7, #24]
        break;
 800415e:	e013      	b.n	8004188 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004160:	f7fe f91e 	bl	80023a0 <HAL_RCC_GetPCLK2Freq>
 8004164:	61b8      	str	r0, [r7, #24]
        break;
 8004166:	e00f      	b.n	8004188 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004168:	4b1d      	ldr	r3, [pc, #116]	; (80041e0 <UART_SetConfig+0x4c4>)
 800416a:	61bb      	str	r3, [r7, #24]
        break;
 800416c:	e00c      	b.n	8004188 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800416e:	f7fd fff1 	bl	8002154 <HAL_RCC_GetSysClockFreq>
 8004172:	61b8      	str	r0, [r7, #24]
        break;
 8004174:	e008      	b.n	8004188 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800417a:	61bb      	str	r3, [r7, #24]
        break;
 800417c:	e004      	b.n	8004188 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	77bb      	strb	r3, [r7, #30]
        break;
 8004186:	bf00      	nop
    }

    if (pclk != 0U)
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d018      	beq.n	80041c0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	085a      	lsrs	r2, r3, #1
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	441a      	add	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	2b0f      	cmp	r3, #15
 80041a6:	d909      	bls.n	80041bc <UART_SetConfig+0x4a0>
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ae:	d205      	bcs.n	80041bc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60da      	str	r2, [r3, #12]
 80041ba:	e001      	b.n	80041c0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80041cc:	7fbb      	ldrb	r3, [r7, #30]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3720      	adds	r7, #32
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40007c00 	.word	0x40007c00
 80041dc:	40023800 	.word	0x40023800
 80041e0:	00f42400 	.word	0x00f42400

080041e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00a      	beq.n	8004252 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00a      	beq.n	8004274 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00a      	beq.n	8004296 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429a:	f003 0320 	and.w	r3, r3, #32
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00a      	beq.n	80042b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d01a      	beq.n	80042fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042e2:	d10a      	bne.n	80042fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
  }
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af02      	add	r7, sp, #8
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004338:	f7fc ffa2 	bl	8001280 <HAL_GetTick>
 800433c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b08      	cmp	r3, #8
 800434a:	d10e      	bne.n	800436a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800434c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f81b 	bl	8004396 <UART_WaitOnFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e011      	b.n	800438e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2220      	movs	r2, #32
 800436e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b09c      	sub	sp, #112	; 0x70
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	603b      	str	r3, [r7, #0]
 80043a2:	4613      	mov	r3, r2
 80043a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a6:	e0a7      	b.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ae:	f000 80a3 	beq.w	80044f8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b2:	f7fc ff65 	bl	8001280 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043be:	429a      	cmp	r2, r3
 80043c0:	d302      	bcc.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80043c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d13f      	bne.n	8004448 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043dc:	667b      	str	r3, [r7, #100]	; 0x64
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e6      	bne.n	80043c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3308      	adds	r3, #8
 8004400:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800440a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	663b      	str	r3, [r7, #96]	; 0x60
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3308      	adds	r3, #8
 8004418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800441a:	64ba      	str	r2, [r7, #72]	; 0x48
 800441c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004420:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004428:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e5      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2220      	movs	r2, #32
 8004432:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e068      	b.n	800451a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0304 	and.w	r3, r3, #4
 8004452:	2b00      	cmp	r3, #0
 8004454:	d050      	beq.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69db      	ldr	r3, [r3, #28]
 800445c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004460:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004464:	d148      	bne.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800446e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004484:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	461a      	mov	r2, r3
 800448c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
 8004490:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e6      	bne.n	8004470 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3308      	adds	r3, #8
 80044a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	613b      	str	r3, [r7, #16]
   return(result);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3308      	adds	r3, #8
 80044c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044c2:	623a      	str	r2, [r7, #32]
 80044c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	69f9      	ldr	r1, [r7, #28]
 80044c8:	6a3a      	ldr	r2, [r7, #32]
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e010      	b.n	800451a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69da      	ldr	r2, [r3, #28]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	4013      	ands	r3, r2
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	429a      	cmp	r2, r3
 8004506:	bf0c      	ite	eq
 8004508:	2301      	moveq	r3, #1
 800450a:	2300      	movne	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	461a      	mov	r2, r3
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	429a      	cmp	r2, r3
 8004514:	f43f af48 	beq.w	80043a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3770      	adds	r7, #112	; 0x70
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004522:	b480      	push	{r7}
 8004524:	b095      	sub	sp, #84	; 0x54
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800453e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	643b      	str	r3, [r7, #64]	; 0x40
 800454a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800454e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e6      	bne.n	800452a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3308      	adds	r3, #8
 8004562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	e853 3f00 	ldrex	r3, [r3]
 800456a:	61fb      	str	r3, [r7, #28]
   return(result);
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	f023 0301 	bic.w	r3, r3, #1
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3308      	adds	r3, #8
 800457a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800457c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800457e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1e5      	bne.n	800455c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004594:	2b01      	cmp	r3, #1
 8004596:	d118      	bne.n	80045ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f023 0310 	bic.w	r3, r3, #16
 80045ac:	647b      	str	r3, [r7, #68]	; 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	613b      	str	r3, [r7, #16]
   return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e6      	bne.n	8004598 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045de:	bf00      	nop
 80045e0:	3754      	adds	r7, #84	; 0x54
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b084      	sub	sp, #16
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff fb71 	bl	8003cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b088      	sub	sp, #32
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	60bb      	str	r3, [r7, #8]
   return(result);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004632:	61fb      	str	r3, [r7, #28]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	61bb      	str	r3, [r7, #24]
 800463e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6979      	ldr	r1, [r7, #20]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	613b      	str	r3, [r7, #16]
   return(result);
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e6      	bne.n	800461e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff fb3d 	bl	8003cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004662:	bf00      	nop
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <memset>:
 800466a:	4402      	add	r2, r0
 800466c:	4603      	mov	r3, r0
 800466e:	4293      	cmp	r3, r2
 8004670:	d100      	bne.n	8004674 <memset+0xa>
 8004672:	4770      	bx	lr
 8004674:	f803 1b01 	strb.w	r1, [r3], #1
 8004678:	e7f9      	b.n	800466e <memset+0x4>
	...

0800467c <__libc_init_array>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4d0d      	ldr	r5, [pc, #52]	; (80046b4 <__libc_init_array+0x38>)
 8004680:	4c0d      	ldr	r4, [pc, #52]	; (80046b8 <__libc_init_array+0x3c>)
 8004682:	1b64      	subs	r4, r4, r5
 8004684:	10a4      	asrs	r4, r4, #2
 8004686:	2600      	movs	r6, #0
 8004688:	42a6      	cmp	r6, r4
 800468a:	d109      	bne.n	80046a0 <__libc_init_array+0x24>
 800468c:	4d0b      	ldr	r5, [pc, #44]	; (80046bc <__libc_init_array+0x40>)
 800468e:	4c0c      	ldr	r4, [pc, #48]	; (80046c0 <__libc_init_array+0x44>)
 8004690:	f000 f818 	bl	80046c4 <_init>
 8004694:	1b64      	subs	r4, r4, r5
 8004696:	10a4      	asrs	r4, r4, #2
 8004698:	2600      	movs	r6, #0
 800469a:	42a6      	cmp	r6, r4
 800469c:	d105      	bne.n	80046aa <__libc_init_array+0x2e>
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a4:	4798      	blx	r3
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7ee      	b.n	8004688 <__libc_init_array+0xc>
 80046aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ae:	4798      	blx	r3
 80046b0:	3601      	adds	r6, #1
 80046b2:	e7f2      	b.n	800469a <__libc_init_array+0x1e>
 80046b4:	08004700 	.word	0x08004700
 80046b8:	08004700 	.word	0x08004700
 80046bc:	08004700 	.word	0x08004700
 80046c0:	08004704 	.word	0x08004704

080046c4 <_init>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	bf00      	nop
 80046c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ca:	bc08      	pop	{r3}
 80046cc:	469e      	mov	lr, r3
 80046ce:	4770      	bx	lr

080046d0 <_fini>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	bf00      	nop
 80046d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d6:	bc08      	pop	{r3}
 80046d8:	469e      	mov	lr, r3
 80046da:	4770      	bx	lr
